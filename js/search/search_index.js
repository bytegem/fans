var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.114,1,2.558]],["body/modules/AppModule.html",[0,1.978,1,5.12,2,1.672,3,1.769,4,1.995,5,1.995,6,1.769,7,2.526,8,1.876,9,3.302,10,3.302,11,4.305,12,0.02,13,3.164,14,3.993,15,3.993,16,3.993,17,2.686,18,1.995,19,1.876,20,0.203,21,0.157,22,0.134,23,3.848,24,0.157,25,5.18,26,3.071,27,3.472,28,0.383,29,3.6,30,1.108,31,1.769,32,1.876,33,2.131,34,1.108,35,3.848,36,0.702,37,3.848,38,3.6,39,3.848,40,1.223,41,2.281,42,3.848,43,3.848,44,5.18,45,2.943,46,3.312,47,3.302,48,2.409,49,1.003,50,1.672,51,1.583,52,3.848,53,3.848,54,3.848,55,0.955,56,2.281,57,1.163,58,3.848,59,1.003,60,3.848,61,5.18,62,3.848,63,1.995,64,3.848,65,5.18,66,3.848,67,2.943,68,2.943,69,0.203,70,0.222,71,0.01,72,0.013,73,0.01]],["title/interfaces/AuthDecoratorOptions.html",[74,1.795,75,2.815]],["body/interfaces/AuthDecoratorOptions.html",[12,0.02,20,0.208,21,0.161,22,0.138,24,0.161,28,0.334,30,1.14,40,2.29,46,2.532,47,3.399,55,1.311,56,3.523,57,0.889,59,1.033,69,0.334,71,0.01,72,0.013,73,0.01,74,1.931,75,4.544,76,2.752,77,2.752,78,4.847,79,4.544,80,0.364,81,1.447,82,1.573,83,4.72,84,0.668,85,3.798,86,2.507,87,3.758,88,5.281,89,5.281,90,3.96,91,2.752,92,3.67,93,3.399,94,3.029,95,2.921,96,4.341,97,3.286,98,1.931,99,1.917,100,3.399,101,3.96,102,3.96,103,2.348,104,3.399,105,3.96,106,3.96,107,3.96,108,3.523,109,3.96,110,2.348,111,3.029,112,3.029,113,1.931]],["title/guards/AuthorizationGuard.html",[46,2.353,114,2.558]],["body/guards/AuthorizationGuard.html",[12,0.02,20,0.129,21,0.1,22,0.086,24,0.252,28,0.341,30,0.708,31,3.279,32,3.365,33,3.035,34,1.08,36,0.449,40,2.061,41,1.457,45,1.88,46,2.399,48,2.551,49,0.641,55,1.129,57,1.392,59,0.978,69,0.129,70,0.142,71,0.006,72,0.01,73,0.006,80,0.226,82,1.492,84,0.652,85,2.399,86,2.318,87,3.02,91,2.608,92,2.608,93,2.109,94,1.88,95,2.076,96,3.964,97,1.274,99,1.961,108,1.457,114,4.018,115,2.458,116,2.109,117,1.254,118,2.033,119,5.093,120,4.551,121,3.752,122,3.752,123,3.752,124,3.752,125,1.254,126,2.458,127,6.354,128,3.43,129,0.878,130,2.458,131,1.08,132,1.912,133,1.157,134,5.113,135,3.22,136,1.389,137,1.463,138,3.752,139,2.458,140,3.752,141,1.749,142,2.076,143,2.458,144,2.458,145,3.752,146,3.752,147,3.752,148,2.458,149,3.752,150,3.752,151,2.458,152,3.752,153,2.458,154,3.752,155,1.725,156,3.752,157,2.458,158,1.945,159,3.905,160,1.254,161,2.458,162,2.458,163,1.88,164,1.708,165,1.88,166,1.88,167,1.571,168,0.744,169,2.219,170,1.6,171,3.22,172,1.457,173,2.109,174,2.109,175,3.752,176,3.752,177,2.225,178,0.761,179,2.458,180,2.458,181,1.389,182,2.458,183,2.458,184,2.458,185,2.458,186,2.109,187,2.458,188,2.458,189,2.458,190,2.458,191,1.13,192,0.674,193,2.458]],["title/classes/AuthorizationTokenEntity.html",[70,0.212,194,2.558]],["body/classes/AuthorizationTokenEntity.html",[12,0.02,20,0.183,21,0.141,22,0.121,24,0.291,28,0.292,34,1,36,0.634,40,2.129,49,0.906,69,0.183,70,0.2,71,0.009,72,0.012,73,0.009,80,0.319,81,1.323,84,0.58,86,2.567,97,2.879,98,2.707,100,5.15,129,0.921,168,1.461,178,1.487,194,3.357,195,0.668,196,2.837,197,5.604,198,2.981,199,3.075,200,3.859,201,4.765,202,3.292,203,3.338,204,1.489,205,2.005,206,4.05,207,3.473,208,3.837,209,3.473,210,1.214,211,6.002,212,3.473,213,6.53,214,2.864,215,3.473,216,2.672,217,2.417,218,3.473,219,1,220,1.987,221,2.355,222,2.981,223,2.981,224,4.384]],["title/classes/AuthorizationTokenEntityResolver.html",[70,0.212,225,2.558]],["body/classes/AuthorizationTokenEntityResolver.html",[12,0.02,20,0.127,21,0.099,22,0.085,24,0.267,26,2.198,28,0.355,31,2.75,32,1.808,33,2.602,34,1.776,36,0.442,40,2.144,41,3.407,48,2.078,49,0.631,55,0.92,57,1.223,59,1.317,69,0.127,70,0.14,71,0.006,72,0.009,73,0.006,80,0.222,82,1.352,83,2.577,84,0.62,86,2.309,87,1.435,97,3.347,98,3.147,99,1.738,108,1.435,113,1.18,117,1.239,118,1.585,125,1.239,128,3.308,129,0.796,131,1.776,132,1.732,133,1.048,136,1.372,137,1.97,141,1.528,158,2.979,165,1.851,169,1.808,170,1.304,177,2.995,178,1.382,181,1.372,191,1.705,192,1.016,194,4.889,195,0.466,196,2.497,199,2.197,204,1.193,205,0.769,208,3.229,217,1.372,219,1.454,221,1.808,222,2.077,223,3.868,225,2.577,226,2.077,227,4.507,228,3.182,229,2.42,230,2.42,231,2.42,232,1.851,233,4.157,234,2.42,235,3.182,236,2.42,237,2.836,238,2.42,239,3.482,240,2.37,241,2.42,242,3.199,243,2.42,244,2.42,245,2.42,246,2.42,247,2.42,248,2.198,249,2.37,250,2.577,251,1.547,252,1.851,253,1.682,254,1.18,255,1.851,256,1.435,257,1.547,258,1.339,259,1.435,260,1.851,261,2.42,262,2.077,263,2.42,264,2.42,265,1.682,266,3.708,267,2.42,268,2.42,269,3.708,270,1.611,271,2.42,272,1.851,273,2.42,274,1.339,275,1.851,276,3.708,277,2.42,278,1.255,279,2.077,280,1.113,281,2.077,282,2.42,283,2.42,284,2.42,285,2.42,286,2.42]],["title/modules/AuthorizationTokenModule.html",[0,1.114,11,2.353]],["body/modules/AuthorizationTokenModule.html",[0,2.085,2,1.97,3,2.084,4,2.35,5,2.35,6,2.084,7,3.092,8,3.092,11,4.743,12,0.019,13,3.239,16,4.177,17,2.99,18,2.35,19,2.21,20,0.239,21,0.185,22,0.158,24,0.185,27,3.42,28,0.363,29,4.008,30,1.305,40,2.122,41,2.688,69,0.239,70,0.261,71,0.011,72,0.015,73,0.011,86,2.028,128,4.126,165,3.467,196,1.97,225,4.008,287,3.891,288,3.891,289,3.891,290,4.534,291,4.534,292,2.898,293,4.534,294,4.534]],["title/injectables/AuthorizationTokenService.html",[128,2.036,160,1.23]],["body/injectables/AuthorizationTokenService.html",[12,0.02,20,0.116,21,0.09,22,0.077,24,0.225,28,0.331,30,0.633,34,1.591,40,1.999,41,3.425,48,1.975,49,0.574,55,1.484,57,1.241,59,0.574,69,0.116,70,0.127,71,0.006,72,0.009,73,0.006,80,0.202,82,1.293,84,0.641,85,2.202,86,2.549,87,2.847,96,2.202,99,1.809,103,1.305,108,1.305,113,1.073,117,1.151,118,2.253,125,1.151,128,1.905,129,0.807,131,1.591,132,1.657,133,1.064,136,2.046,137,1.872,141,1.577,142,2.883,160,1.151,167,1.407,169,1.679,170,1.211,177,3.8,178,1.413,181,2.213,191,1.951,192,1.316,196,2.51,200,3.337,201,3.642,202,1.305,203,1.012,206,3.09,208,3.069,210,1.064,228,3.642,233,1.529,254,1.073,257,1.407,258,1.217,259,2.847,260,1.683,265,1.529,270,2.784,274,1.217,278,1.786,295,1.141,296,1.888,297,4.244,298,3.444,299,4.801,300,4.244,301,1.888,302,3.308,303,2.2,304,3.444,305,2.2,306,2.2,307,3.444,308,3.444,309,2.202,310,3.823,311,2.2,312,2.2,313,2.2,314,2.2,315,2.956,316,2.956,317,2.2,318,2.2,319,2.2,320,2.2,321,2.634,322,3.337,323,1.683,324,1.529,325,2.2,326,2.634,327,2.634,328,2.634,329,2.634,330,2.634,331,1.529,332,1.305,333,4.801,334,2.2,335,2.2,336,2.2,337,2.2,338,2.207,339,2.634,340,2.956,341,2.2,342,2.634,343,2.2,344,2.2,345,2.2,346,2.2,347,2.2,348,2.2,349,2.2,350,3.444,351,2.2,352,2.2,353,2.2,354,1.683,355,2.2,356,2.2,357,2.2,358,3.444,359,2.2,360,2.2,361,2.2,362,2.2,363,2.2,364,2.2,365,4.12,366,1.888,367,1.683,368,2.2,369,1.888,370,2.956,371,1.529,372,2.2,373,1.217,374,2.2,375,2.2,376,2.2,377,2.2,378,2.2,379,2.2]],["title/interfaces/AuthorizationTokenValidityPeriod.html",[74,1.795,331,2.558]],["body/interfaces/AuthorizationTokenValidityPeriod.html",[12,0.02,20,0.26,21,0.201,22,0.173,24,0.201,28,0.26,69,0.26,71,0.013,72,0.015,73,0.013,74,2.409,76,3.434,80,0.454,81,1.668,84,0.662,86,2.532,196,2.147,322,3.434,331,4.23,338,2.798,339,5.265,340,5.908,342,4.655,380,4.24,381,5.908,382,6.597,383,2.967]],["title/classes/CreateAuthorizationTokenArgs.html",[70,0.212,239,2.353]],["body/classes/CreateAuthorizationTokenArgs.html",[12,0.02,20,0.211,21,0.163,22,0.14,24,0.283,28,0.314,36,0.73,40,2.165,69,0.211,70,0.231,71,0.01,72,0.013,73,0.01,80,0.368,81,1.456,84,0.663,86,1.869,129,0.872,131,2.077,177,4.185,178,1.409,195,0.77,196,2.765,204,1.41,205,1.898,210,1.149,219,1.832,239,3.398,242,2.756,259,3.773,260,3.058,270,3.161,338,2.925,384,4.866,385,3.432,386,3.999,387,3.999,388,4.068,389,6.363,390,4.422,391,3.52,392,3.999,393,4.562,394,3.999]],["title/classes/ExecutionContext.html",[31,1.692,70,0.212]],["body/classes/ExecutionContext.html",[12,0.02,20,0.148,21,0.115,22,0.098,24,0.237,28,0.219,31,2.272,32,2.659,33,2.714,34,0.812,40,1.935,48,2.832,49,0.735,55,1.444,57,1.306,59,0.735,69,0.148,70,0.163,71,0.007,72,0.011,73,0.007,80,0.259,81,1.139,82,1.603,84,0.579,86,2.544,97,2.156,98,2.027,99,1.841,103,1.671,113,1.374,117,1.39,118,1.737,125,1.39,129,0.92,131,1.812,132,1.734,133,1.05,141,1.495,142,3.017,155,1.912,163,5.715,164,4.491,169,3.15,177,4.192,178,1.433,181,1.043,192,0.772,195,0.542,210,1.211,256,3.831,274,1.559,338,1.912,367,2.156,395,2.419,396,6.597,397,6.597,398,4.941,399,4.159,400,2.819,401,2.819,402,3.569,403,2.819,404,2.819,405,2.819,406,2.819,407,2.819,408,4.159,409,2.819,410,2.819,411,4.159,412,2.819,413,4.159,414,2.819,415,4.941,416,2.819,417,2.819,418,2.819,419,2.819,420,1.671,421,2.819,422,2.819,423,2.819,424,2.819,425,2.819,426,2.819,427,2.819,428,2.819,429,2.819,430,2.819,431,2.819]],["title/classes/MomentAudioMedia.html",[70,0.212,432,2.036]],["body/classes/MomentAudioMedia.html",[12,0.02,20,0.164,21,0.127,22,0.109,24,0.294,28,0.236,36,0.57,55,0.775,57,1.176,59,1.168,63,3.508,69,0.332,70,0.33,71,0.008,72,0.011,73,0.008,80,0.287,81,1.227,82,1.111,84,0.651,129,0.765,133,0.862,168,1.585,191,1.435,192,0.855,195,0.601,204,1.237,205,1.665,210,1.352,219,1.87,220,2.354,254,1.522,332,1.851,432,3.166,433,1.727,434,4.122,435,4.109,436,2.354,437,3.799,438,4.773,439,3.122,440,4.012,441,1.747,442,3.122,443,3.874,444,1.996,445,2.387,446,2.863,447,2.863,448,1.996,449,1.851,450,1.996,451,3.349,452,2.17,453,2.478,454,2.898,455,2.898,456,2.863,457,2.656,458,1.996,459,2.478,460,1.851,461,1.851,462,1.996,463,3.106,464,1.996,465,1.996,466,1.996,467,1.618,468,1.996]],["title/classes/MomentEntity.html",[70,0.212,469,2.815]],["body/classes/MomentEntity.html",[12,0.02,20,0.166,21,0.129,22,0.11,24,0.298,28,0.303,34,0.91,36,0.577,49,0.824,59,1.178,69,0.166,70,0.182,71,0.008,72,0.011,73,0.008,80,0.29,81,1.238,84,0.613,129,0.974,168,1.367,178,1.069,195,0.608,199,2.571,203,2.646,204,1.574,205,2.12,210,1.325,217,2.648,219,1.954,220,1.859,435,3.607,441,1.762,457,4.504,459,2.5,469,3.456,470,2.712,471,6.52,472,3.372,473,5.274,474,5.981,475,5.274,476,6.52,477,3.161,478,3.878,479,5.755,480,3.161,481,5.755,482,3.161,483,3.161,484,4.519,485,3.161,486,3.161,487,3.161,488,3.161,489,3.666,490,2.889,491,3.161,492,3.161,493,3.161]],["title/classes/MomentImageMedia.html",[70,0.212,455,2.036]],["body/classes/MomentImageMedia.html",[12,0.02,20,0.171,21,0.132,22,0.113,24,0.294,28,0.242,36,0.592,55,0.804,57,1.201,59,0.845,63,3.311,69,0.336,70,0.336,71,0.008,72,0.012,73,0.008,80,0.298,81,1.261,84,0.65,129,0.672,133,0.885,168,1.618,191,1.49,192,0.888,195,0.624,204,1.086,205,1.463,210,1.348,219,1.891,220,2.395,254,1.58,332,1.922,432,2.958,433,1.793,434,3.786,435,4.101,436,2.395,437,3.83,438,4.438,440,3.979,441,1.264,443,3.93,444,2.072,445,2.479,446,2.941,447,2.941,448,2.072,449,1.922,450,2.072,451,3.721,452,2.253,453,2.545,454,2.958,455,3.22,456,3.93,457,2.728,458,2.072,459,2.545,460,1.922,461,1.922,462,2.072,463,3.171,464,2.072,465,2.072,466,2.072,467,1.68,468,2.072,494,3.241]],["title/classes/MomentMediaCommon.html",[70,0.212,437,2.036]],["body/classes/MomentMediaCommon.html",[12,0.02,20,0.175,21,0.135,22,0.116,24,0.294,28,0.247,36,0.607,55,0.825,57,1.218,59,0.867,63,3.339,69,0.339,70,0.339,71,0.008,72,0.012,73,0.008,80,0.306,81,1.284,84,0.647,129,0.486,133,0.902,168,1.641,191,1.529,192,0.911,195,0.64,204,0.785,205,1.057,210,1.34,219,1.905,220,2.422,254,1.621,332,1.972,432,3.001,433,1.84,434,3.818,435,4.113,436,2.231,437,3.8,438,4.476,440,4.006,441,1.297,443,3.968,446,2.995,447,2.995,448,2.126,449,1.972,450,2.126,451,3.468,452,2.311,453,3.001,454,3.001,455,3.001,456,2.995,457,2.778,458,2.126,459,2.592,460,1.972,461,1.972,462,2.126,463,3.216,464,2.126,465,2.126,466,2.126,467,1.724,468,2.126,495,3.326]],["title/modules/MomentModule.html",[0,1.114,496,2.558]],["body/modules/MomentModule.html",[0,2.051,2,2.286,3,2.418,4,2.727,5,2.727,6,2.418,7,2.565,8,2.565,12,0.019,13,3.36,17,3.278,18,2.727,19,2.565,20,0.277,21,0.214,22,0.184,27,3.749,28,0.333,30,1.514,69,0.277,70,0.303,71,0.013,72,0.016,73,0.013,292,3.363,496,5.079,497,4.514,498,5.26,499,5.26]],["title/classes/MomentVideoMedia.html",[70,0.212,454,2.036]],["body/classes/MomentVideoMedia.html",[12,0.02,20,0.165,21,0.128,22,0.11,24,0.294,28,0.237,36,0.573,55,0.779,57,1.18,59,0.819,63,3.514,69,0.333,70,0.331,71,0.008,72,0.011,73,0.008,80,0.289,81,1.233,84,0.652,129,0.768,133,0.866,168,1.59,191,1.444,192,0.861,195,0.604,204,1.241,205,1.671,210,1.353,219,1.874,220,2.361,254,1.531,332,1.862,432,2.908,433,1.738,434,3.747,435,4.111,436,2.361,437,3.804,438,4.779,440,4.237,441,1.225,443,3.883,444,2.008,445,2.402,446,2.876,447,2.876,448,2.008,449,1.862,450,2.008,451,3.36,452,2.183,453,2.489,454,3.175,455,2.908,456,2.876,457,2.667,458,2.008,459,2.489,460,1.862,461,1.862,462,2.008,463,3.116,464,2.008,465,2.008,466,2.008,467,1.628,468,2.008,500,3.141,501,3.141]],["title/modules/PrismaModule.html",[0,1.114,13,1.692]],["body/modules/PrismaModule.html",[0,2.097,2,1.854,7,2.081,8,2.081,12,0.02,13,2.55,20,0.225,21,0.174,22,0.149,24,0.174,28,0.324,29,4.284,30,1.229,34,2.032,48,2.535,49,1.113,55,1.059,67,3.264,68,3.264,69,0.225,70,0.355,71,0.011,72,0.014,73,0.011,118,1.951,125,1.854,134,4.242,137,2.638,168,1.291,169,2.081,170,1.501,181,2.053,192,1.169,321,4.714,436,1.755,502,3.264,503,4.761,504,4.284,505,5.289,506,5.289,507,3.264,508,4.242,509,3.662,510,3.662,511,3.662,512,3.662,513,3.662,514,3.662,515,3.662,516,4.761,517,4.761,518,3.662,519,3.662,520,3.264,521,3.662,522,3.662,523,3.662,524,3.662]],["title/modules/SecurityModule.html",[0,1.114,14,2.183]],["body/modules/SecurityModule.html",[0,2.092,2,1.992,3,2.108,4,2.377,5,2.377,6,2.108,7,3.109,8,3.109,12,0.019,13,3.249,14,4.406,15,4.19,17,3.011,18,2.377,19,2.235,20,0.241,21,0.187,22,0.16,24,0.187,27,3.444,28,0.364,30,1.32,51,1.886,69,0.241,70,0.264,71,0.012,72,0.015,73,0.012,270,2.913,292,2.931,525,3.935,526,4.585,527,3.935,528,3.935,529,4.133,530,4.585,531,1.788,532,4.037,533,4.585,534,3.506]],["title/classes/SecuritySmsResolver.html",[70,0.212,532,2.558]],["body/classes/SecuritySmsResolver.html",[12,0.02,20,0.167,21,0.129,22,0.111,24,0.276,26,2.685,28,0.344,31,2.65,32,2.208,33,2.685,36,0.579,40,1.44,55,1.124,57,1.017,59,1.181,69,0.167,70,0.183,71,0.008,72,0.011,73,0.008,80,0.291,82,1.311,83,2.203,84,0.583,87,1.88,94,2.425,95,2.923,99,1.598,108,1.88,117,1.514,118,2.229,125,1.06,129,0.772,131,2.028,132,1.68,133,1.109,136,1.676,141,1.37,155,2.082,158,3.287,170,1.115,181,1.676,191,1.458,192,0.869,195,0.61,196,1.378,200,3.147,204,1.069,210,1.109,214,3.417,235,2.721,240,2.895,242,2.348,249,3.378,251,2.027,254,1.546,255,2.425,256,1.88,270,3.087,280,3.266,383,3.182,489,3.672,529,3.61,532,3.147,534,2.425,535,4.006,536,2.721,537,4.576,538,5.283,539,4.529,540,2.721,541,3.17,542,4.529,543,3.17,544,4.086,545,3.17,546,3.17,547,3.17,548,3.17,549,2.425,550,1.754,551,2.425,552,3.17,553,3.17,554,2.721,555,3.17,556,3.17]],["title/injectables/SecuritySmsService.html",[160,1.23,529,2.036]],["body/injectables/SecuritySmsService.html",[12,0.02,20,0.139,21,0.107,22,0.092,24,0.242,28,0.298,30,0.76,34,1.711,48,2.172,49,0.688,50,1.721,51,1.629,55,1.573,56,2.818,57,1.383,69,0.139,70,0.152,71,0.007,72,0.01,73,0.007,80,0.243,82,1.404,84,0.52,85,3.038,99,1.864,113,2.317,117,1.324,118,2.279,125,1.324,129,0.827,131,1.14,132,1.799,133,1.089,136,2.199,137,1.544,141,1.598,142,2.191,160,1.324,169,1.931,170,1.393,181,1.759,192,0.723,200,2.752,203,1.214,210,1.247,217,1.466,257,1.688,258,1.46,270,3.08,274,1.46,278,2.053,279,2.265,280,3.296,295,1.369,322,2.752,339,4.039,373,2.191,383,2.575,472,1.688,529,2.191,531,1.029,535,4.129,537,4.221,544,4.203,551,4.544,557,2.265,558,4.753,559,3.399,560,3.96,561,2.64,562,3.653,563,2.64,564,2.64,565,2.64,566,3.96,567,3.96,568,3.96,569,2.64,570,5.281,571,3.96,572,5.281,573,4.753,574,3.96,575,2.64,576,3.96,577,5.281,578,2.64,579,3.029,580,2.64,581,2.64,582,2.64,583,2.64,584,2.64,585,2.64,586,2.64,587,2.64,588,2.64,589,2.64,590,2.64,591,2.64,592,2.64,593,3.96,594,2.64,595,2.64,596,2.64,597,2.265,598,2.64,599,2.64,600,2.64,601,2.64,602,2.64,603,2.64,604,2.64,605,2.64,606,2.64,607,2.64,608,2.64,609,2.64,610,2.64,611,2.64,612,2.64,613,2.64,614,2.64,615,2.64]],["title/interfaces/SocfonyConfig.html",[74,1.795,616,2.558]],["body/interfaces/SocfonyConfig.html",[12,0.02,20,0.213,21,0.164,22,0.223,24,0.164,26,3.94,28,0.282,30,1.163,38,2.807,55,1.328,57,0.907,63,3.312,69,0.316,71,0.01,72,0.014,73,0.01,74,1.969,76,2.807,80,0.371,81,1.466,84,0.551,85,3.836,98,3.397,99,1.222,103,3.172,141,1.222,155,2.759,172,3.172,192,1.107,210,1.341,237,4.092,371,3.719,383,2.925,504,3.719,616,4.439,617,3.089,618,5.861,619,6.645,620,6.967,621,6,622,5.35,623,3.466,624,3.466,625,4.885,626,3.466,627,4.039,628,4.039,629,4.039,630,4.039,631,4.039,632,4.039,633,4.039,634,4.039,635,4.039]],["title/classes/TencentCloudCosCredentials.html",[70,0.212,636,2.558]],["body/classes/TencentCloudCosCredentials.html",[12,0.02,20,0.21,21,0.162,22,0.139,24,0.287,28,0.279,36,0.728,40,2.208,50,3.231,51,3.059,69,0.21,70,0.23,71,0.01,72,0.013,73,0.01,80,0.367,81,1.455,84,0.548,86,2.236,129,0.871,195,0.768,204,1.408,205,1.896,210,1.31,219,1.83,220,2.184,531,2.479,636,3.689,637,3.425,638,5.054,639,3.537,640,6.241,641,4.828,642,3.77,643,3.662,644,3.991,645,3.991,646,3.991]],["title/classes/TencentCloudCosResolver.html",[70,0.212,647,2.558]],["body/classes/TencentCloudCosResolver.html",[12,0.02,20,0.145,21,0.112,22,0.17,24,0.267,28,0.318,32,1.346,33,1.136,36,0.504,40,2.123,50,3.037,51,2.876,57,1.096,69,0.216,70,0.159,71,0.007,72,0.01,73,0.007,80,0.254,82,1.211,84,0.642,86,1.44,99,1.634,110,2.428,117,1.369,118,2.124,125,0.923,129,0.789,131,1.95,132,1.552,133,1.11,136,1.516,141,1.477,142,3.459,155,1.27,158,3.132,170,0.971,172,1.637,195,0.531,204,1.153,237,2.112,240,2.618,242,2.123,248,2.428,249,3.121,250,2.847,251,1.765,257,1.765,258,1.528,381,3.515,434,1.637,440,1.637,448,1.765,450,1.765,456,1.765,531,2.249,550,1.528,597,3.515,636,3.753,638,4.765,639,3.708,642,2.428,643,2.701,647,2.847,648,2.112,649,3.132,650,5.4,651,4.882,652,2.762,653,3.202,654,2.762,655,4.882,656,2.762,657,2.112,658,2.762,659,3.132,660,4.634,661,2.762,662,2.762,663,5.631,664,4.13,665,2.762,666,2.762,667,3.132,668,2.762,669,2.762,670,2.847,671,3.515,672,3.515,673,3.515,674,3.515,675,3.515,676,3.515,677,3.515,678,3.515,679,3.515,680,2.762,681,2.762,682,2.762,683,3.132,684,4.096,685,2.762,686,2.37,687,2.762]],["title/injectables/TencentCloudCosService.html",[160,1.23,653,2.183]],["body/injectables/TencentCloudCosService.html",[12,0.02,20,0.162,21,0.125,22,0.108,24,0.212,28,0.274,30,0.886,50,2.975,51,2.816,55,1.558,56,3.574,57,1.277,69,0.162,70,0.178,71,0.008,72,0.011,73,0.008,80,0.283,82,1.101,84,0.408,99,1.342,117,1.482,118,2.207,125,1.029,129,0.88,131,1.807,132,1.41,133,1.208,136,2.324,141,1.342,160,1.482,170,1.083,181,1.642,210,1,257,1.968,258,1.703,295,1.596,310,2.835,420,2.63,531,2.448,550,1.703,559,2.643,638,4.869,639,3.722,640,4.461,641,3.613,643,3.473,653,2.63,660,3.806,664,3.392,670,3.082,686,3.806,688,2.643,689,5.687,690,4.435,691,3.806,692,5.198,693,3.079,694,3.372,695,3.079,696,3.079,697,6.278,698,4.435,699,3.079,700,3.079,701,3.079,702,3.079,703,4.435,704,4.435,705,3.079,706,3.079,707,3.079,708,4.435,709,4.435,710,4.435,711,4.435,712,4.435,713,4.435,714,4.435,715,4.435,716,4.435,717,4.435,718,4.435,719,4.435,720,4.435,721,4.435,722,4.435,723,4.435,724,4.435,725,3.079,726,3.079,727,3.079,728,3.079,729,3.079,730,3.079,731,3.079,732,3.806,733,3.079,734,3.079,735,3.079,736,3.079,737,3.079,738,3.079]],["title/modules/TencentCloudModule.html",[0,1.114,15,2.183]],["body/modules/TencentCloudModule.html",[0,2.064,2,1.906,3,2.017,4,2.274,5,2.274,6,2.017,7,3.045,8,3.045,12,0.02,15,4.424,17,2.928,18,2.274,19,2.139,20,0.231,21,0.179,22,0.153,24,0.179,28,0.359,30,1.263,50,2.454,51,2.323,69,0.231,70,0.253,71,0.011,72,0.014,73,0.011,531,1.711,537,2.805,562,4.402,638,3.049,643,2.427,647,3.925,653,4.402,694,4.402,739,3.765,740,3.765,741,3.765,742,4.387,743,4.387,744,4.387,745,4.387]],["title/injectables/TencentCloudSmsService.html",[160,1.23,562,2.183]],["body/injectables/TencentCloudSmsService.html",[12,0.02,20,0.194,21,0.15,22,0.129,24,0.205,28,0.324,30,1.06,50,2.673,51,2.53,55,1.247,56,2.98,57,1.285,69,0.194,70,0.212,71,0.009,72,0.013,73,0.009,80,0.338,82,1.247,84,0.462,98,1.795,99,1.113,117,1.68,118,2.013,129,0.836,131,1.447,132,1.598,133,0.967,136,1.861,137,2.653,141,1.732,160,1.68,163,2.815,181,1.362,192,1.009,210,1.279,295,1.908,338,2.311,453,2.036,467,2.606,531,2.399,537,4.542,551,5.203,562,2.98,639,2.182,641,4.475,683,2.815,691,4.314,746,3.159,747,4.314,748,5.724,749,4.314,750,3.681,751,5.279,752,5.279,753,3.681,754,5.526,755,3.681,756,6.647,757,3.681,758,3.681,759,5.027,760,3.213,761,3.213,762,3.681,763,3.681,764,3.681,765,3.493,766,3.681,767,3.681,768,3.681,769,3.681,770,3.681,771,3.681,772,3.681,773,3.681,774,1.599,775,3.159,776,3.681,777,3.681,778,3.681,779,3.681]],["title/classes/TencentCloudStsCredentials.html",[70,0.212,780,2.558]],["body/classes/TencentCloudStsCredentials.html",[12,0.02,20,0.174,21,0.134,22,0.115,24,0.289,28,0.285,36,0.603,50,3.246,51,3.056,59,1.41,69,0.246,70,0.269,71,0.008,72,0.012,73,0.008,80,0.304,81,1.278,84,0.497,86,2.412,129,0.789,168,1.635,195,0.636,203,2.144,204,1.276,205,1.718,206,3.481,210,1.353,217,2.173,219,1.901,220,2.223,383,1.611,420,3.481,441,2.108,531,2.29,642,1.959,643,3.425,649,5.739,659,3.567,760,2.981,761,2.981,780,4.081,781,2.527,782,4.638,783,4.638,784,5.789,785,3.304,786,3.304,787,3.304,788,4.002,789,4.002,790,4.002,791,4.002,792,4.002,793,4.002,794,2.836,795,4.002,796,2.836]],["title/classes/TencentCloudStsFederationToken.html",[70,0.212,642,2.183]],["body/classes/TencentCloudStsFederationToken.html",[12,0.02,20,0.17,21,0.131,22,0.113,24,0.288,28,0.281,36,0.589,50,3.238,51,3.038,59,1.663,69,0.241,70,0.264,71,0.008,72,0.012,73,0.008,80,0.296,81,1.256,82,1.582,84,0.49,86,2.242,129,0.779,168,1.614,195,0.621,203,2.671,204,1.259,205,1.696,206,3.975,210,1.313,217,1.697,219,1.888,220,2.194,383,2.235,420,2.718,441,2.487,531,2.265,642,2.718,643,3.394,649,5.726,659,4.079,760,2.931,761,2.931,780,4.037,781,2.467,782,2.768,783,2.768,784,4.985,788,3.935,789,4.578,790,3.935,791,4.578,792,4.985,793,4.985,794,4.578,795,4.985,796,4.578,797,3.226,798,3.226,799,3.226]],["title/injectables/TencentCloudStsService.html",[160,1.23,694,2.183]],["body/injectables/TencentCloudStsService.html",[12,0.02,20,0.239,21,0.185,22,0.159,24,0.235,28,0.334,30,1.308,50,2.51,51,2.376,57,1.02,69,0.239,70,0.262,71,0.012,72,0.015,73,0.012,80,0.418,82,1.128,84,0.418,98,2.215,99,1.374,117,1.931,129,0.664,131,1.663,132,1.445,133,0.874,136,2.138,137,2.749,141,1.374,160,1.931,192,1.245,210,1.222,295,2.356,338,2.089,453,2.513,467,2.356,531,2.252,639,2.694,641,4.978,643,3.696,694,3.424,747,4.957,749,4.957,751,4.957,752,4.957,760,2.905,761,2.905,765,4.014,774,1.974,775,3.899,800,3.899,801,4.544,802,4.957,803,4.544,804,4.544]],["title/classes/UpdateViewerArgs.html",[70,0.212,805,2.558]],["body/classes/UpdateViewerArgs.html",[12,0.019,20,0.218,21,0.169,22,0.145,24,0.273,28,0.32,36,0.757,40,1.318,55,1.029,59,1.42,69,0.218,70,0.239,71,0.011,72,0.014,73,0.011,80,0.381,81,1.492,82,1.351,84,0.559,95,3.57,129,0.795,178,1.359,192,1.768,195,0.798,196,1.801,204,1.285,205,1.731,210,1.17,214,3.227,219,1.75,239,3.48,242,2.822,262,3.558,270,2.912,278,3.151,280,3.271,373,4.017,384,3.17,391,3.57,393,5.216,436,1.705,441,2.123,520,4.936,544,3.826,805,3.783,806,5.216,807,3.558,808,5.216,809,4.485,810,4.146,811,4.146,812,4.163,813,3.558]],["title/classes/UserEntity.html",[70,0.212,814,2.353]],["body/classes/UserEntity.html",[12,0.019,20,0.235,21,0.182,22,0.156,24,0.286,28,0.301,36,0.815,59,1.164,69,0.235,70,0.257,71,0.011,72,0.014,73,0.011,80,0.41,81,1.565,84,0.61,129,0.97,133,1.099,168,1.35,178,1.501,195,0.859,199,3.07,203,2.895,204,1.567,205,2.11,210,1.099,216,3.672,217,2.457,220,2.349,436,2.349,441,1.741,444,4.243,472,3.651,774,2.884,814,3.651,815,3.831,816,4.283,817,4.367,818,3.831,819,3.831,820,3.831,821,3.102,822,3.831,823,3.831]],["title/classes/UserInterface.html",[70,0.212,816,2.183]],["body/classes/UserInterface.html",[12,0.02,20,0.203,21,0.157,22,0.135,24,0.292,28,0.309,34,1.11,36,0.704,49,1.005,59,1.353,69,0.203,70,0.222,71,0.01,72,0.013,73,0.01,74,2.858,80,0.354,81,1.421,84,0.576,129,0.916,133,1.207,168,1.569,178,1.522,195,0.742,203,3.098,204,1.48,205,1.993,210,1.259,216,3.809,217,2.625,219,1.11,224,4.357,280,1.772,441,2.023,447,3.316,472,3.747,489,3.605,774,2.992,816,3.075,817,4.795,821,4.074,824,3.308,825,3.967,826,3.855,827,3.855,828,3.855,829,3.855,830,2.869,831,3.308,832,2.286,833,2.286]],["title/classes/UserInterfaceResolver.html",[70,0.212,834,2.558]],["body/classes/UserInterfaceResolver.html",[12,0.02,20,0.22,21,0.17,22,0.146,24,0.248,28,0.354,33,2.248,36,0.761,49,1.088,57,0.936,69,0.22,70,0.24,71,0.011,72,0.014,73,0.011,74,3.154,80,0.383,82,1.356,84,0.502,99,1.653,117,1.827,125,1.394,129,0.798,131,1.573,132,1.738,133,1.052,136,2.023,141,1.262,158,3.572,170,1.467,172,3.835,178,1.526,195,0.803,204,0.985,219,1.573,248,3.24,250,4.237,550,2.307,657,3.19,667,4.18,774,2.994,816,3.24,830,3.023,831,3.58,834,3.798,835,5.231,836,3.58,837,4.171,838,3.884,839,4.171,840,4.171,841,4.171,842,4.171,843,4.171,844,4.171,845,4.171]],["title/modules/UserModule.html",[0,1.114,16,2.183]],["body/modules/UserModule.html",[0,2.068,2,1.919,3,2.03,4,2.289,5,2.289,6,2.03,7,3.054,8,3.054,12,0.019,13,3.217,14,4.149,16,4.428,17,2.94,18,2.289,19,2.153,20,0.232,21,0.18,22,0.154,24,0.18,27,3.362,28,0.375,30,1.271,69,0.232,70,0.255,71,0.011,72,0.014,73,0.011,178,1.27,292,2.823,302,4.111,834,3.941,846,3.789,847,3.789,848,3.789,849,3.789,850,4.473,851,4.416,852,4.416,853,4.416,854,4.416,855,3.789,856,3.941,857,4.416]],["title/classes/UserProfileEntity.html",[70,0.212,830,2.036]],["body/classes/UserProfileEntity.html",[12,0.02,20,0.178,21,0.138,22,0.118,24,0.294,28,0.178,36,0.617,59,1.822,63,3.075,69,0.178,70,0.195,71,0.009,72,0.012,73,0.009,80,0.311,81,1.299,84,0.595,129,0.946,133,1.279,168,1.434,178,1.518,195,0.651,199,2.668,202,3.245,203,2.179,204,1.528,205,2.058,210,1.419,217,2.396,219,1.365,220,1.95,224,4.341,441,2.724,474,5.09,489,3.294,774,3.068,830,3.281,858,2.902,859,6.648,860,6.648,861,6.648,862,4.697,863,5.932,864,3.381,865,3.381,866,3.381,867,3.381,868,5.932,869,3.381,870,3.381]],["title/modules/UserProfileModule.html",[0,1.114,850,2.353]],["body/modules/UserProfileModule.html",[0,2.112,2,2.057,3,2.176,4,2.454,5,2.454,6,2.176,7,3.155,8,3.155,12,0.019,13,3.275,17,3.073,18,2.454,19,2.308,20,0.249,21,0.193,22,0.165,24,0.193,27,3.514,28,0.357,30,1.363,69,0.249,70,0.273,71,0.012,72,0.015,73,0.012,178,1.202,292,3.026,774,2.575,838,4.15,850,4.713,871,4.063,872,4.063,873,4.734,874,4.063,875,4.734,876,4.119,877,4.734,878,4.063]],["title/classes/UserProfileResolver.html",[70,0.212,876,2.558]],["body/classes/UserProfileResolver.html",[12,0.02,20,0.187,21,0.145,22,0.124,24,0.268,28,0.355,31,2.788,32,2.394,33,2.826,34,1.414,36,0.65,48,2.826,49,0.928,55,0.883,57,0.799,69,0.187,70,0.205,71,0.009,72,0.012,73,0.009,80,0.327,82,1.219,84,0.517,99,1.834,110,2.912,117,1.642,118,1.978,125,1.642,129,0.717,131,1.414,132,1.561,133,1.082,136,1.818,137,1.915,141,1.076,155,2.258,158,3.411,169,2.394,170,1.727,178,1.393,181,1.818,195,0.685,199,2.957,202,2.11,204,0.84,214,3.773,240,2.275,242,2.546,249,3.14,251,2.275,256,2.11,278,3.495,373,3.73,391,2.717,774,3.03,813,3.054,830,3.111,838,3.354,876,3.413,878,3.054,879,3.054,880,6.064,881,5.624,882,3.558,883,3.558,884,5.624,885,3.558,886,4.422,887,3.558,888,3.558,889,3.558,890,3.054,891,3.558,892,3.558,893,3.558]],["title/injectables/UserProfileService.html",[160,1.23,838,2.036]],["body/injectables/UserProfileService.html",[12,0.02,20,0.213,21,0.164,22,0.141,24,0.244,28,0.282,30,1.163,34,1.966,48,2.628,49,1.053,57,1.347,69,0.213,70,0.233,71,0.01,72,0.014,73,0.01,80,0.371,82,1.328,84,0.492,95,2.96,99,1.619,113,1.969,117,1.788,118,2.11,125,1.35,129,0.781,131,1.54,132,1.701,133,1.03,136,2.364,137,2.087,141,1.222,142,2.96,160,1.788,170,1.42,178,1.515,181,1.98,202,3.172,248,3.787,274,2.234,278,2.094,295,2.094,301,3.466,354,4.092,550,2.234,774,3.222,821,2.807,838,2.96,894,3.466,895,6,896,4.039,897,4.039,898,6.388,899,4.039,900,4.039,901,4.039]],["title/classes/UserProfileUpdateInput.html",[70,0.212,886,2.558]],["body/classes/UserProfileUpdateInput.html",[12,0.019,20,0.269,21,0.208,22,0.178,24,0.253,28,0.352,34,1.469,36,0.931,49,1.33,55,1.266,69,0.269,70,0.294,71,0.013,72,0.016,73,0.013,168,1.878,178,1.356,195,0.982,202,3.025,373,3.701,391,3.701,436,2.099,774,2.907,825,4.747,830,2.822,862,4.378,886,4.314,890,4.378,902,4.378,903,3.902,904,5.117,905,6.207,906,3.902,907,5.102]],["title/classes/UserResolver.html",[70,0.212,908,2.815]],["body/classes/UserResolver.html",[12,0.02,20,0.214,21,0.165,22,0.142,24,0.278,28,0.36,34,1.546,36,0.742,48,2.87,49,1.06,57,0.912,69,0.214,70,0.234,71,0.01,72,0.014,73,0.01,80,0.373,82,1.333,84,0.553,99,1.625,117,1.796,125,1.358,129,0.785,131,1.546,132,1.708,133,1.158,137,2.095,141,1.229,158,3.546,170,1.429,178,1.479,192,1.113,195,0.782,199,3.122,204,0.959,232,3.107,233,4.981,242,2.785,253,2.824,254,1.981,274,2.247,281,3.487,388,4.257,390,4.45,490,3.434,550,2.247,814,3.434,908,4.108,909,3.487,910,4.063,911,4.063,912,4.063,913,4.063,914,4.063,915,4.063,916,4.063,917,3.487]],["title/injectables/UserService.html",[160,1.23,302,2.036]],["body/injectables/UserService.html",[12,0.02,20,0.181,21,0.14,22,0.12,24,0.243,28,0.331,30,0.991,49,0.898,55,0.855,57,1.462,69,0.181,70,0.199,71,0.009,72,0.012,73,0.009,80,0.317,82,1.372,84,0.644,95,3.308,99,1.97,113,2.695,117,1.605,118,2.29,125,1.151,129,0.807,131,1.382,132,1.757,133,1.064,136,2.41,141,1.452,142,3.308,160,1.605,170,1.211,178,1.517,181,2.046,210,1.253,258,1.905,259,3.545,265,2.394,270,3.047,275,2.634,295,1.785,302,2.656,309,4.357,310,3.069,338,2.207,391,2.656,461,2.042,463,2.847,467,1.785,529,3.696,534,2.634,535,2.394,537,3.069,540,2.956,550,1.905,833,4.157,918,2.956,919,4.801,920,5.527,921,3.444,922,4.801,923,3.444,924,4.801,925,3.444,926,3.444,927,4.801,928,2.956,929,3.444,930,3.444,931,3.444,932,3.444,933,3.444,934,3.444,935,2.956,936,3.444]],["title/classes/UserUpdateInput.html",[70,0.212,809,2.558]],["body/classes/UserUpdateInput.html",[12,0.019,20,0.242,21,0.187,22,0.161,24,0.273,28,0.336,34,1.326,36,0.841,49,1.201,59,1.519,69,0.242,70,0.265,71,0.012,72,0.015,73,0.012,80,0.423,81,1.596,82,1.446,84,0.423,129,0.673,168,1.762,178,1.456,192,1.84,195,0.886,204,1.087,205,1.464,210,1.23,216,2.548,219,1.677,221,2.245,280,2.117,373,3.534,391,3.534,436,1.894,441,2.272,754,4.999,809,4.049,812,3.522,832,2.731,833,4.26,903,3.522,904,4.886,906,4.455,937,4.455,938,4.605,939,3.522,940,4.605]],["title/classes/UserWhereUniqueInput.html",[70,0.212,388,2.353]],["body/classes/UserWhereUniqueInput.html",[12,0.019,20,0.269,21,0.208,22,0.178,24,0.253,28,0.352,34,1.469,36,0.931,49,1.33,55,1.266,69,0.269,70,0.294,71,0.013,72,0.016,73,0.013,168,1.878,178,1.356,195,0.982,216,2.822,217,2.298,219,1.469,221,2.487,280,2.346,388,3.968,391,3.701,436,2.099,812,4.747,832,3.025,904,5.117,906,3.902,937,3.902,939,3.902,941,4.378,942,6.691,943,5.102,944,5.102]],["title/classes/ViewerEntity.html",[70,0.212,221,1.795]],["body/classes/ViewerEntity.html",[12,0.019,20,0.192,21,0.148,22,0.127,24,0.289,28,0.3,36,0.665,49,0.95,59,1.673,69,0.192,70,0.21,71,0.009,72,0.013,73,0.009,80,0.335,81,1.367,84,0.609,129,0.968,133,0.96,168,1.722,178,1.502,195,0.701,199,2.775,203,2.617,204,1.564,205,2.106,210,1.329,214,3.375,216,3.387,217,2.267,219,1.048,220,2.052,221,2.433,224,3.468,280,3.119,383,2.985,436,2.052,441,2.502,444,3.915,472,3.19,774,2.661,816,4.096,817,3.816,818,3.125,819,3.125,820,3.125,821,2.531,822,3.125,823,3.125,825,3.816,832,3.375,945,3.125,946,6.908,947,6.123,948,6.123,949,6.123,950,3.641,951,5.255,952,3.641]],["title/classes/ViewerResolver.html",[70,0.212,856,2.558]],["body/classes/ViewerResolver.html",[12,0.02,20,0.118,21,0.091,22,0.078,24,0.262,28,0.339,31,2.671,32,1.699,33,2.855,34,1.003,36,0.408,40,1.539,48,2.472,49,0.583,55,1.533,57,1.249,69,0.118,70,0.129,71,0.006,72,0.009,73,0.006,80,0.205,82,1.303,84,0.552,97,2.51,98,2.36,99,1.758,103,2.067,110,2.541,113,1.089,117,1.165,118,1.507,125,1.165,129,0.767,131,1.003,132,1.669,133,1.01,136,1.29,137,1.359,141,1.465,155,1.602,158,3.116,167,1.428,169,1.699,170,1.226,178,1.472,181,2.059,191,1.97,192,1.327,195,0.43,199,2.36,204,1.143,210,0.671,214,4.053,217,0.827,219,1.511,221,2.36,232,1.709,233,3.866,240,1.428,242,3.274,248,2.067,249,2.228,250,3.649,251,1.428,254,1.089,255,1.709,256,1.325,258,1.236,259,1.325,265,1.553,270,1.514,274,1.236,275,1.709,278,1.807,280,2.904,302,3.214,324,1.553,354,2.666,365,5.158,366,2.991,367,2.666,369,2.991,371,1.553,373,3.214,383,1.089,390,1.553,420,2.87,544,1.325,554,2.991,579,1.709,657,2.666,667,3.277,683,1.709,805,3.649,808,2.991,832,3.445,833,2.067,855,1.917,856,2.422,917,1.917,928,1.917,935,1.917,939,1.709,953,1.709,954,4.286,955,2.234,956,2.234,957,2.234,958,2.234,959,2.234,960,2.234,961,2.234,962,2.234,963,2.234,964,3.485,965,3.485,966,2.234,967,2.234,968,2.234,969,2.666,970,2.666,971,2.666,972,2.234,973,2.234,974,1.917,975,2.234,976,2.234,977,2.234,978,2.234,979,2.234,980,2.234,981,2.234,982,2.234,983,2.234,984,1.709,985,4.841,986,2.234,987,3.485,988,3.485,989,2.991,990,2.234,991,2.234,992,2.234,993,2.234,994,2.234,995,2.234,996,2.234]],["title/coverage.html",[997,4.314]],["body/coverage.html",[6,1.118,12,0.02,22,0.085,31,1.118,33,1,38,1.69,40,1.183,41,2.206,46,1.554,70,0.42,71,0.006,72,0.009,73,0.006,74,2.204,75,1.86,77,3.52,84,0.223,91,1.69,92,1.69,103,3.756,110,1.442,112,1.86,114,1.69,116,2.087,128,1.345,137,0.948,160,2.003,166,1.86,167,1.554,192,0.666,194,1.69,196,2.898,197,2.087,198,2.087,217,0.9,221,1.185,225,1.69,226,2.087,239,1.554,252,1.86,253,1.69,256,1.442,296,2.087,302,1.345,309,1.554,323,1.86,324,1.69,326,1.86,327,1.86,328,1.86,329,1.86,330,1.86,331,1.69,380,2.087,384,1.86,385,2.087,388,1.554,395,2.087,432,1.345,433,3.019,437,1.345,449,1.442,454,1.345,455,1.345,459,1.345,469,1.86,470,2.087,490,1.554,502,1.86,507,1.86,529,1.345,531,2.41,532,1.69,535,2.586,536,2.087,549,1.86,557,2.087,562,1.442,616,1.69,617,3.457,636,1.69,637,2.087,642,1.442,647,1.69,648,1.86,653,1.442,688,2.087,694,1.442,746,2.087,765,1.69,780,1.69,781,2.846,800,2.087,805,1.69,806,2.087,807,2.087,809,1.69,814,1.554,815,2.087,816,1.442,824,2.087,830,1.345,834,1.69,835,2.087,836,2.087,838,1.345,856,1.69,858,2.087,876,1.69,879,2.087,886,1.69,894,2.087,902,2.087,903,2.846,908,1.86,909,2.087,918,2.087,937,2.846,941,2.087,945,2.087,953,2.846,969,1.86,970,1.86,971,1.86,984,1.86,997,2.087,998,1.86,999,2.432,1000,2.432,1001,7.692,1002,6.464,1003,7.51,1004,2.087,1005,5.064,1006,4.52,1007,5.141,1008,7.369,1009,6.179,1010,3.721,1011,5.547,1012,2.087,1013,4.684,1014,2.087,1015,2.087,1016,2.087,1017,2.087,1018,3.194,1019,2.846,1020,2.432,1021,2.432,1022,4.52,1023,2.432,1024,2.087,1025,2.087,1026,4.52,1027,2.846,1028,1.86,1029,2.432,1030,2.432]],["title/dependencies.html",[3,2.036,1031,3.073]],["body/dependencies.html",[3,2.34,12,0.02,30,1.465,36,0.929,45,3.892,49,1.327,70,0.357,71,0.013,72,0.016,73,0.013,164,4.645,172,3.017,322,3.537,623,4.368,760,3.253,761,3.253,802,4.368,1032,6.683,1033,5.089,1034,5.089,1035,5.089,1036,5.089,1037,5.089,1038,5.089,1039,5.089,1040,5.089,1041,5.089,1042,5.089,1043,5.089,1044,5.089,1045,5.089,1046,5.089,1047,5.089,1048,5.089,1049,5.089,1050,5.089,1051,4.368,1052,5.089,1053,5.089,1054,5.089,1055,5.089,1056,5.089]],["title/miscellaneous/enumerations.html",[1057,1.822,1058,3.8]],["body/miscellaneous/enumerations.html",[12,0.019,22,0.173,71,0.013,72,0.015,73,0.013,78,3.797,80,0.456,84,0.634,87,3.62,177,2.944,178,1.007,196,2.157,206,2.944,208,3.174,259,3.62,270,2.157,309,3.174,338,3.357,433,2.747,434,2.944,435,2.747,440,2.944,443,3.903,451,3.174,531,1.936,648,3.797,663,5.239,670,3.451,671,4.261,672,4.261,673,5.239,674,5.239,675,5.239,676,5.239,677,5.239,678,5.239,679,5.239,833,2.944,1057,2.944,1058,4.261,1059,4.965,1060,6.105,1061,4.261,1062,4.965,1063,4.965,1064,4.965]],["title/miscellaneous/functions.html",[1057,1.822,1065,3.387]],["body/miscellaneous/functions.html",[6,2.972,12,0.019,22,0.191,24,0.273,26,2.468,33,2.505,34,1.198,38,4.232,40,1.936,50,1.809,51,1.712,56,2.468,63,2.83,71,0.011,72,0.014,73,0.011,77,2.893,79,3.183,80,0.383,82,1.709,84,0.383,86,1.464,95,2.303,96,2.661,97,2.158,98,2.029,104,3.572,131,1.753,132,2.19,133,1.325,141,1.842,155,2.509,178,0.844,248,2.468,309,3.893,310,2.661,338,1.914,402,4.684,453,2.303,460,2.468,478,5.547,490,2.661,504,4.232,507,4.174,508,3.183,531,1.623,616,2.893,617,3.183,618,4.684,624,3.572,625,4.174,626,3.572,639,3.236,765,4.232,833,4.161,984,4.657,1004,4.684,1018,3.572,1019,3.183,1024,3.572,1025,3.572,1027,3.183,1028,4.174,1057,2.468,1065,3.183,1066,3.572,1067,3.572,1068,5.458,1069,5.458,1070,4.163,1071,4.163,1072,3.572,1073,4.163,1074,5.458,1075,5.458,1076,4.163,1077,4.163,1078,4.163,1079,4.163,1080,4.163,1081,3.572]],["title/index.html",[80,0.282,1082,2.637,1083,2.637]],["body/index.html",[12,0.016,21,0.213,24,0.213,26,3.737,71,0.013,72,0.016,73,0.013,135,4.491,155,3.356,664,4.002,951,5.805,998,4.002,1065,4.002,1081,4.491,1084,5.233,1085,5.233,1086,5.41,1087,5.233,1088,6.304,1089,5.233,1090,5.233,1091,5.233,1092,5.233,1093,5.233,1094,6.304,1095,5.233,1096,5.233,1097,5.233,1098,5.233,1099,5.233,1100,5.233,1101,5.233,1102,5.233,1103,5.233,1104,5.233,1105,5.233,1106,4.491,1107,4.002,1108,4.491,1109,4.002,1110,4.491,1111,5.233]],["title/license.html",[1082,2.637,1083,2.637,1107,2.35]],["body/license.html",[12,0.014,19,2.116,21,0.228,71,0.011,72,0.014,73,0.011,111,4.289,133,0.835,164,3.016,278,2.25,544,2.573,579,3.319,732,4.813,989,3.725,998,3.319,1086,5.333,1106,3.725,1107,3.319,1108,3.725,1109,3.319,1110,3.725,1112,6.966,1113,4.34,1114,4.34,1115,4.34,1116,4.34,1117,4.34,1118,4.34,1119,4.34,1120,6.214,1121,5.609,1122,4.34,1123,4.34,1124,4.34,1125,6.214,1126,6.214,1127,6.214,1128,4.34,1129,5.609,1130,4.34,1131,5.609,1132,5.609,1133,5.609,1134,4.34,1135,4.34,1136,4.34,1137,4.34,1138,4.34,1139,5.609,1140,4.34,1141,6.214,1142,4.34,1143,4.34,1144,4.34,1145,4.34,1146,4.34,1147,4.34,1148,4.34,1149,4.34,1150,5.609,1151,5.609,1152,6.214,1153,5.609,1154,4.34,1155,4.34,1156,4.34,1157,4.34,1158,4.34,1159,4.34,1160,4.34,1161,4.34,1162,4.34,1163,4.34,1164,4.34,1165,4.34,1166,4.34,1167,4.34,1168,4.34,1169,4.34,1170,4.34,1171,4.34,1172,4.34,1173,4.34,1174,4.34,1175,4.34,1176,4.34,1177,4.34,1178,4.34,1179,5.609,1180,4.34,1181,4.34,1182,4.34,1183,4.34,1184,4.34,1185,4.34,1186,4.34,1187,4.34,1188,4.34,1189,4.34,1190,4.34,1191,4.34]],["title/modules.html",[2,2.184]],["body/modules.html",[1,3.723,2,2.328,11,3.425,12,0.016,13,2.463,14,3.176,15,3.176,16,3.176,71,0.014,72,0.016,73,0.014,496,3.723,850,3.425,1192,7.416,1193,7.416,1194,7.416,1195,7.476,1196,5.357,1197,5.357]],["title/overview.html",[1198,4.314]],["body/overview.html",[0,1.147,1,5.048,2,1.647,3,1.743,4,1.965,5,1.965,6,1.743,7,1.848,8,1.848,9,3.253,10,3.253,11,4.568,12,0.019,13,3.206,14,4.274,15,4.335,16,4.335,17,2.658,18,1.965,19,1.848,71,0.01,72,0.013,73,0.01,76,2.634,114,2.634,128,3.793,195,0.729,272,2.899,287,3.253,288,3.253,289,3.253,295,1.965,302,3.793,496,4.327,497,3.253,525,3.253,527,3.253,528,3.253,529,3.793,562,4.065,653,4.065,694,4.065,739,3.253,740,3.253,741,3.253,838,3.793,846,3.253,847,3.253,848,3.253,849,3.253,850,4.458,871,3.253,872,3.253,874,3.253,1109,2.899,1198,3.253,1199,3.79,1200,3.79,1201,3.79]],["title/miscellaneous/variables.html",[1057,1.822,1202,3.8]],["body/miscellaneous/variables.html",[0,1.04,12,0.02,24,0.14,29,1.526,31,1.009,32,1.07,33,1.973,34,1.499,40,1.9,48,1.414,57,1.169,59,0.573,67,1.679,68,1.679,70,0.198,71,0.006,72,0.009,73,0.006,77,1.526,78,3.668,79,1.679,80,0.202,83,2.39,84,0.668,86,2.21,91,2.39,92,2.39,96,2.709,97,1.782,108,2.039,110,2.039,111,1.679,112,2.63,113,1.07,118,1.209,125,1.149,131,0.632,133,0.662,134,2.63,137,1.87,155,1.581,159,1.884,166,3.668,167,2.198,168,0.664,169,1.07,170,0.772,171,1.884,172,1.302,173,1.884,174,1.884,178,1.274,181,1.273,186,1.884,191,1.009,192,0.942,196,0.954,206,2.843,208,2.198,210,1.349,216,1.214,217,2.137,221,1.07,252,3.241,253,2.945,270,0.954,272,2.63,280,1.581,310,1.404,315,2.951,316,2.951,321,3.241,323,3.241,324,2.945,326,2.63,327,2.63,328,2.63,329,2.63,330,2.63,332,2.039,338,3.352,342,2.63,370,2.951,371,2.39,383,2.814,390,1.526,420,2.039,432,1.902,433,1.214,435,2.344,436,0.903,437,1.214,446,2.198,449,2.513,454,1.902,455,1.902,457,2.039,458,2.709,459,2.344,460,1.302,461,1.302,462,1.404,463,2.513,464,1.404,465,1.404,466,1.404,467,3.823,468,1.404,490,2.709,502,1.679,503,1.884,504,2.39,505,2.951,506,2.951,508,1.679,509,1.884,510,1.884,511,1.884,512,1.884,513,2.951,514,1.884,515,1.884,516,2.951,517,2.951,518,1.884,519,1.884,520,2.63,521,1.884,522,1.884,523,1.884,524,1.884,544,1.302,549,3.241,625,1.679,670,1.526,814,1.404,832,1.302,953,1.679,969,3.668,970,3.668,971,3.668,974,1.884,1007,1.884,1011,1.884,1012,1.884,1013,1.884,1014,4.116,1015,3.637,1016,3.637,1017,2.951,1019,1.679,1027,1.679,1028,1.679,1051,4.116,1057,1.302,1061,1.884,1066,2.951,1067,1.884,1072,1.884,1202,1.884,1203,5.207,1204,6.87,1205,2.195,1206,2.195,1207,2.195,1208,6.143,1209,2.195,1210,5.207,1211,2.195,1212,2.195,1213,2.195,1214,2.195,1215,2.195,1216,2.195,1217,2.195,1218,2.195,1219,2.195,1220,2.195,1221,2.195,1222,2.195,1223,2.195,1224,4.238,1225,2.195,1226,2.195,1227,2.195,1228,2.195,1229,2.195]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"modules/MomentModule.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":1052,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1043,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":1041,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":272,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1***$2@$3",{"_index":980,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["1****$2",{"_index":977,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["1.10.4",{"_index":1044,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1003,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1001,"title":{},"body":{"coverage.html":{}}}],["15.5.0",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["2.0",{"_index":721,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["2.17.0",{"_index":1035,"title":{},"body":{"dependencies.html":{}}}],["2.21.0",{"_index":1037,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1022,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1021,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":1114,"title":{},"body":{"license.html":{}}}],["26",{"_index":1201,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1109,"title":{},"body":{"index.html":{},"license.html":{},"overview.html":{}}}],["3.1.20",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1009,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":583,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["3000",{"_index":634,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["4.0.65",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":1046,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1002,"title":{},"body":{"coverage.html":{}}}],["5.0.0",{"_index":1039,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1026,"title":{},"body":{"coverage.html":{}}}],["6.6.3",{"_index":1054,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["60).tostring",{"_index":601,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["66",{"_index":1020,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1200,"title":{},"body":{"overview.html":{}}}],["7.6.12",{"_index":1032,"title":{},"body":{"dependencies.html":{}}}],["7.9.9",{"_index":1033,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["7200",{"_index":707,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["8",{"_index":1199,"title":{},"body":{"overview.html":{}}}],["8.2.0",{"_index":1045,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":1023,"title":{},"body":{"coverage.html":{}}}],["_",{"_index":711,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["_data",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["above",{"_index":1131,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":691,"title":{},"body":{"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{}}}],["action",{"_index":724,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["activate",{"_index":140,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["activel",{"_index":145,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["add(setting.expiredin.value",{"_index":356,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["add(setting.refreshexpiredin.value",{"_index":359,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["address",{"_index":949,"title":{},"body":{"classes/ViewerEntity.html":{}}}],["advised",{"_index":1188,"title":{},"body":{"license.html":{}}}],["allow",{"_index":670,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["allows",{"_index":1093,"title":{},"body":{"index.html":{}}}],["allowuploadfiletype",{"_index":663,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["alphabet",{"_index":1014,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["alphabet(a",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["and/or",{"_index":1136,"title":{},"body":{"license.html":{}}}],["ap",{"_index":751,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{}}}],["api",{"_index":211,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["apollo",{"_index":1036,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"interfaces/SocfonyConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["app.config",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":1081,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["applydecorators",{"_index":88,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":242,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["argstype",{"_index":393,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{},"classes/UpdateViewerArgs.html":{}}}],["arising",{"_index":1185,"title":{},"body":{"license.html":{}}}],["array.isarray(token",{"_index":428,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["async",{"_index":118,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["audio",{"_index":434,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["auth",{"_index":78,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["auth_metadata_has_authorization",{"_index":91,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_metadata_has_authorization_type",{"_index":92,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_token_default_expired_in",{"_index":326,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_token_default_expired_unit",{"_index":327,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_token_default_refresh_expired_in",{"_index":328,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_token_default_refresh_expired_unit",{"_index":329,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_token_vvalidity_period_key",{"_index":330,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authdecoratoroptions",{"_index":75,"title":{"interfaces/AuthDecoratorOptions.html":{}},"body":{"interfaces/AuthDecoratorOptions.html":{},"coverage.html":{}}}],["authoprization",{"_index":313,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["authorization",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UpdateViewerArgs.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["authorization(options",{"_index":104,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"miscellaneous/functions.html":{}}}],["authorization(undefined",{"_index":656,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["authorization.guard",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{}}}],["authorization_token_create_user_where_allow_one",{"_index":252,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authorization_token_not_found",{"_index":323,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authorizationguard",{"_index":46,"title":{"guards/AuthorizationGuard.html":{}},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"coverage.html":{}}}],["authorizationtoken",{"_index":177,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"miscellaneous/enumerations.html":{}}}],["authorizationtoken(@context",{"_index":268,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["authorizationtoken(context",{"_index":231,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["authorizationtoken.expiredat.gettime",{"_index":374,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["authorizationtoken.token",{"_index":377,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["authorizationtoken?.user",{"_index":418,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["authorizationtokenentity",{"_index":194,"title":{"classes/AuthorizationTokenEntity.html":{}},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"coverage.html":{}}}],["authorizationtokenentity'})@authorization({hasauthorization",{"_index":234,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["authorizationtokenentityresolver",{"_index":225,"title":{"classes/AuthorizationTokenEntityResolver.html":{}},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"coverage.html":{}}}],["authorizationtokenmodule",{"_index":11,"title":{"modules/AuthorizationTokenModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules.html":{},"overview.html":{}}}],["authorizationtokenservice",{"_index":128,"title":{"injectables/AuthorizationTokenService.html":{}},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"overview.html":{}}}],["authorizationtokenvalidityperiod",{"_index":331,"title":{"interfaces/AuthorizationTokenValidityPeriod.html":{}},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"coverage.html":{}}}],["authorizationwith",{"_index":110,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authorizationwithout",{"_index":112,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authotization",{"_index":304,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["authotizationtoken",{"_index":346,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["autoschemafile",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1197,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":859,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["await",{"_index":181,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":759,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["baseoptions",{"_index":748,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["bcrypt",{"_index":1038,"title":{},"body":{"dependencies.html":{}}}],["binary",{"_index":1121,"title":{},"body":{"license.html":{}}}],["bio",{"_index":860,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["boolean",{"_index":85,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bound",{"_index":946,"title":{},"body":{"classes/ViewerEntity.html":{}}}],["browse",{"_index":1195,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1192,"title":{},"body":{"modules.html":{}}}],["bsd",{"_index":1108,"title":{},"body":{"index.html":{},"license.html":{}}}],["bucket",{"_index":640,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{},"injectables/TencentCloudCosService.html":{}}}],["bucket.split",{"_index":713,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["builds",{"_index":1087,"title":{},"body":{"index.html":{}}}],["business",{"_index":1175,"title":{},"body":{"license.html":{}}}],["byte",{"_index":1115,"title":{},"body":{"license.html":{}}}],["c",{"_index":1113,"title":{},"body":{"license.html":{}}}],["callback",{"_index":517,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["canactivate",{"_index":119,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["canactivate(context",{"_index":138,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["canactivelytokenhandler",{"_index":120,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["canactivelytokenhandler(context",{"_index":143,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["case",{"_index":463,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["caused",{"_index":1177,"title":{},"body":{"license.html":{}}}],["check",{"_index":988,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["china",{"_index":571,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["class",{"_index":70,"title":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"modules/MomentModule.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":195,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"overview.html":{}}}],["classprovider",{"_index":503,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["clause",{"_index":1110,"title":{},"body":{"index.html":{},"license.html":{}}}],["client",{"_index":137,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"modules/PrismaModule.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client.sendsms(request",{"_index":779,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["cloud",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/SecurityModule.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"miscellaneous/functions.html":{}}}],["cloud.module.ts",{"_index":743,"title":{},"body":{"modules/TencentCloudModule.html":{}}}],["cloud/common/index.ts",{"_index":1025,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["cloud/cos/cos.resolver.ts",{"_index":648,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["cloud/cos/cos.resolver.ts:43",{"_index":654,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["cloud/cos/cos.resolver.ts:55",{"_index":658,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["cloud/cos/cos.resolver.ts:72",{"_index":661,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["cloud/cos/cos.resolver.ts:90",{"_index":666,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["cloud/cos/entities/cos.entity.ts",{"_index":637,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{},"coverage.html":{}}}],["cloud/cos/entities/cos.entity.ts:17",{"_index":644,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{}}}],["cloud/cos/entities/cos.entity.ts:25",{"_index":645,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{}}}],["cloud/cos/entities/cos.entity.ts:33",{"_index":646,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{}}}],["cloud/cos/soc.service.ts",{"_index":688,"title":{},"body":{"injectables/TencentCloudCosService.html":{},"coverage.html":{}}}],["cloud/cos/soc.service.ts:19",{"_index":700,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["cloud/cos/soc.service.ts:29",{"_index":702,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["cloud/cos/soc.service.ts:36",{"_index":696,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["cloud/cos/soc.service.ts:64",{"_index":699,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["cloud/cos/soc.service.ts:9",{"_index":695,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["cloud/sms",{"_index":580,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["cloud/sms/sms.service.ts",{"_index":746,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"coverage.html":{}}}],["cloud/sms/sms.service.ts:14",{"_index":758,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["cloud/sms/sms.service.ts:29",{"_index":750,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["cloud/sms/sms.service.ts:45",{"_index":755,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["cloud/sts/entities/sts.entity.ts",{"_index":781,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"coverage.html":{}}}],["cloud/sts/entities/sts.entity.ts:18",{"_index":787,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{}}}],["cloud/sts/entities/sts.entity.ts:26",{"_index":785,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{}}}],["cloud/sts/entities/sts.entity.ts:34",{"_index":786,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{}}}],["cloud/sts/entities/sts.entity.ts:52",{"_index":797,"title":{},"body":{"classes/TencentCloudStsFederationToken.html":{}}}],["cloud/sts/entities/sts.entity.ts:61",{"_index":799,"title":{},"body":{"classes/TencentCloudStsFederationToken.html":{}}}],["cloud/sts/entities/sts.entity.ts:70",{"_index":798,"title":{},"body":{"classes/TencentCloudStsFederationToken.html":{}}}],["cloud/sts/sts.service.ts",{"_index":800,"title":{},"body":{"injectables/TencentCloudStsService.html":{},"coverage.html":{}}}],["cloud/sts/sts.service.ts:14",{"_index":801,"title":{},"body":{"injectables/TencentCloudStsService.html":{}}}],["cloud/tencent",{"_index":742,"title":{},"body":{"modules/TencentCloudModule.html":{}}}],["clous",{"_index":791,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authorizationtokenmodule",{"_index":287,"title":{},"body":{"modules/AuthorizationTokenModule.html":{},"overview.html":{}}}],["cluster_authorizationtokenmodule_exports",{"_index":289,"title":{},"body":{"modules/AuthorizationTokenModule.html":{},"overview.html":{}}}],["cluster_authorizationtokenmodule_imports",{"_index":290,"title":{},"body":{"modules/AuthorizationTokenModule.html":{}}}],["cluster_authorizationtokenmodule_providers",{"_index":288,"title":{},"body":{"modules/AuthorizationTokenModule.html":{},"overview.html":{}}}],["cluster_momentmodule",{"_index":497,"title":{},"body":{"modules/MomentModule.html":{},"overview.html":{}}}],["cluster_momentmodule_imports",{"_index":498,"title":{},"body":{"modules/MomentModule.html":{}}}],["cluster_securitymodule",{"_index":525,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_exports",{"_index":527,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_imports",{"_index":526,"title":{},"body":{"modules/SecurityModule.html":{}}}],["cluster_securitymodule_providers",{"_index":528,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_tencentcloudmodule",{"_index":739,"title":{},"body":{"modules/TencentCloudModule.html":{},"overview.html":{}}}],["cluster_tencentcloudmodule_exports",{"_index":740,"title":{},"body":{"modules/TencentCloudModule.html":{},"overview.html":{}}}],["cluster_tencentcloudmodule_providers",{"_index":741,"title":{},"body":{"modules/TencentCloudModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":846,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":849,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":847,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":848,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userprofilemodule",{"_index":871,"title":{},"body":{"modules/UserProfileModule.html":{},"overview.html":{}}}],["cluster_userprofilemodule_exports",{"_index":874,"title":{},"body":{"modules/UserProfileModule.html":{},"overview.html":{}}}],["cluster_userprofilemodule_imports",{"_index":873,"title":{},"body":{"modules/UserProfileModule.html":{}}}],["cluster_userprofilemodule_providers",{"_index":872,"title":{},"body":{"modules/UserProfileModule.html":{},"overview.html":{}}}],["code",{"_index":544,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/ViewerResolver.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["code'})@authorization({hasauthorization",{"_index":547,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["codes",{"_index":974,"title":{},"body":{"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["common",{"_index":453,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"miscellaneous/functions.html":{}}}],["compare",{"_index":309,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["compare(password",{"_index":1073,"title":{},"body":{"miscellaneous/functions.html":{}}}],["comparecode",{"_index":558,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["comparecode(phone",{"_index":564,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["compared",{"_index":365,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"classes/ViewerResolver.html":{}}}],["comparepassword",{"_index":919,"title":{},"body":{"injectables/UserService.html":{}}}],["comparepassword(user",{"_index":922,"title":{},"body":{"injectables/UserService.html":{}}}],["comparesecurity",{"_index":920,"title":{},"body":{"injectables/UserService.html":{}}}],["comparesecurity(user",{"_index":925,"title":{},"body":{"injectables/UserService.html":{}}}],["compase",{"_index":566,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["complexity",{"_index":1099,"title":{},"body":{"index.html":{}}}],["compore",{"_index":924,"title":{},"body":{"injectables/UserService.html":{}}}],["conditions",{"_index":1127,"title":{},"body":{"license.html":{}}}],["config",{"_index":618,"title":{},"body":{"interfaces/SocfonyConfig.html":{},"miscellaneous/functions.html":{}}}],["connect",{"_index":518,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["consequential",{"_index":1167,"title":{},"body":{"license.html":{}}}],["const",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"injectables/UserService.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerResolver.html":{}}}],["constants",{"_index":167,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":125,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["constructor(authorizationtokenservice",{"_index":229,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["constructor(cosservice",{"_index":652,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["constructor(prisma",{"_index":301,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"injectables/UserProfileService.html":{}}}],["constructor(prismaclient",{"_index":910,"title":{},"body":{"classes/UserResolver.html":{}}}],["constructor(private",{"_index":550,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"classes/UserInterfaceResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(profileservice",{"_index":882,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["constructor(reflector",{"_index":126,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["constructor(request",{"_index":400,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["constructor(securitysmsservice",{"_index":540,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"injectables/UserService.html":{}}}],["constructor(sts",{"_index":693,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["constructor(tencentcloudsmsservice",{"_index":561,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["constructor(userprofileservice",{"_index":837,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["constructor(userservice",{"_index":955,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["content",{"_index":471,"title":{},"body":{"classes/MomentEntity.html":{}}}],["context",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["context.authorizationtoken",{"_index":269,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["context.gethandler",{"_index":176,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["context.gettype",{"_index":171,"title":{},"body":{"guards/AuthorizationGuard.html":{},"miscellaneous/variables.html":{}}}],["context.request.context",{"_index":419,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.switchtohttp().getrequest",{"_index":184,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["context.switchtohttp().getrequest().context",{"_index":174,"title":{},"body":{"guards/AuthorizationGuard.html":{},"miscellaneous/variables.html":{}}}],["context.ts",{"_index":395,"title":{},"body":{"classes/ExecutionContext.html":{},"coverage.html":{}}}],["context.ts:15",{"_index":404,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.ts:16",{"_index":403,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.ts:17",{"_index":405,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.ts:24",{"_index":407,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.ts:54",{"_index":412,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.ts:7",{"_index":401,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.ts:73",{"_index":410,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.user",{"_index":554,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"classes/ViewerResolver.html":{}}}],["continue",{"_index":987,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["contract",{"_index":1180,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":1141,"title":{},"body":{"license.html":{}}}],["convert",{"_index":983,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["copyright",{"_index":1112,"title":{},"body":{"license.html":{}}}],["core",{"_index":135,"title":{},"body":{"guards/AuthorizationGuard.html":{},"index.html":{}}}],["cos",{"_index":638,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{}}}],["cos/cos.resolver",{"_index":744,"title":{},"body":{"modules/TencentCloudModule.html":{}}}],["cosservice",{"_index":655,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["cover",{"_index":438,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{}}}],["coverage",{"_index":997,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creat",{"_index":308,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["create",{"_index":131,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["create(prismaclient",{"_index":406,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["createauthorizationtoken",{"_index":227,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["createauthorizationtoken(args",{"_index":238,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["createauthorizationtokenargs",{"_index":239,"title":{"classes/CreateAuthorizationTokenArgs.html":{}},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/UpdateViewerArgs.html":{},"coverage.html":{}}}],["createclient",{"_index":747,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{}}}],["createclient(region",{"_index":749,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{}}}],["createcostemporaryreadcredential",{"_index":650,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["createcostemporarywritecredential",{"_index":651,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["createcostemporarywritecredential(type",{"_index":662,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["created",{"_index":479,"title":{},"body":{"classes/MomentEntity.html":{}}}],["createdat",{"_index":472,"title":{},"body":{"classes/MomentEntity.html":{},"injectables/SecuritySmsService.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/ViewerEntity.html":{}}}],["createparamdecorator(function",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createsecurity",{"_index":538,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["createsecurity(phone",{"_index":543,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["createtemporaryreadcredential",{"_index":689,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["createtemporarywritecredential",{"_index":690,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["createtemporarywritecredential(name",{"_index":698,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["createtokenwithsecurity",{"_index":297,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["createtokenwithsecurity(user",{"_index":305,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["createuniontype",{"_index":446,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/variables.html":{}}}],["createuserauthorizationtoken",{"_index":298,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["createuserauthorizationtoken(user",{"_index":311,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["createviewersecurity",{"_index":539,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["createviewersecurity(@context",{"_index":553,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["createviewersecurity(context",{"_index":546,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["creathe",{"_index":307,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["credential",{"_index":639,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"miscellaneous/functions.html":{}}}],["credential'})@authorizationwith",{"_index":665,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["credentials",{"_index":649,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["custom",{"_index":1015,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["customalphabet('0123456789",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customalphabet('23456789qwertyupasdfghjklzxcvbnm",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customalphabet('qwertyuiopasdfghjklzxcvbnm",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customalphabet(alphabet",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damage",{"_index":1191,"title":{},"body":{"license.html":{}}}],["damages",{"_index":1168,"title":{},"body":{"license.html":{}}}],["data",{"_index":278,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/ViewerResolver.html":{},"license.html":{}}}],["data[key",{"_index":985,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["database",{"_index":321,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["datasources",{"_index":512,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":203,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"injectables/AuthorizationTokenService.html":{},"classes/MomentEntity.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/ViewerEntity.html":{}}}],["date.now",{"_index":612,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["dayjs",{"_index":322,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"injectables/SecuritySmsService.html":{},"dependencies.html":{}}}],["dayjs().add(10",{"_index":363,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["dayjs().add(options.expiredin",{"_index":591,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["days",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["debug",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{}}}],["decorator",{"_index":79,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":204,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"classes/UserResolver.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["default",{"_index":467,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":129,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["deleted",{"_index":481,"title":{},"body":{"classes/MomentEntity.html":{}}}],["deletedat",{"_index":473,"title":{},"body":{"classes/MomentEntity.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"dependencies.html":{},"overview.html":{}}}],["derived",{"_index":1145,"title":{},"body":{"license.html":{}}}],["desc",{"_index":609,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["description",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["destory",{"_index":522,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["developers",{"_index":1095,"title":{},"body":{"index.html":{}}}],["developing",{"_index":1100,"title":{},"body":{"index.html":{}}}],["direct",{"_index":1162,"title":{},"body":{"license.html":{}}}],["disclaimed",{"_index":1158,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":1133,"title":{},"body":{"license.html":{}}}],["disconnect",{"_index":523,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["distribution",{"_index":1138,"title":{},"body":{"license.html":{}}}],["document",{"_index":1105,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":998,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["don't",{"_index":186,"title":{},"body":{"guards/AuthorizationGuard.html":{},"miscellaneous/variables.html":{}}}],["dontenvconfig",{"_index":622,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["dot",{"_index":631,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["dotenv",{"_index":623,"title":{},"body":{"interfaces/SocfonyConfig.html":{},"dependencies.html":{}}}],["dto",{"_index":914,"title":{},"body":{"classes/UserResolver.html":{}}}],["dto/create",{"_index":261,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["dto/profile",{"_index":889,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["dto/update",{"_index":972,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["duration",{"_index":703,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["durationseconds",{"_index":716,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["e",{"_index":947,"title":{},"body":{"classes/ViewerEntity.html":{}}}],["ecosystem",{"_index":1101,"title":{},"body":{"index.html":{}}}],["effect",{"_index":723,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["email",{"_index":832,"title":{},"body":{"classes/UserInterface.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["email(@parent",{"_index":978,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["email(user",{"_index":957,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["email.replace(/^(\\w{1}).*?(\\w{1",{"_index":979,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["encrpyted",{"_index":1075,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encrypted",{"_index":1074,"title":{},"body":{"miscellaneous/functions.html":{}}}],["endorse",{"_index":1142,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":98,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/ExecutionContext.html":{},"interfaces/SocfonyConfig.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{}}}],["endpoit",{"_index":100,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"classes/AuthorizationTokenEntity.html":{}}}],["entities/authorization",{"_index":263,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["entities/cos.entity",{"_index":668,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["entities/profile.entity",{"_index":890,"title":{},"body":{"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{}}}],["entities/user.entity",{"_index":915,"title":{},"body":{"classes/UserResolver.html":{}}}],["entities/user.interface",{"_index":842,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["entities/user.union",{"_index":916,"title":{},"body":{"classes/UserResolver.html":{}}}],["entities/viewer.entity",{"_index":939,"title":{},"body":{"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerResolver.html":{}}}],["entity",{"_index":199,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/MomentEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"classes/UserResolver.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["entity.'})@authorization({hasauthorization",{"_index":244,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["enum",{"_index":450,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/TencentCloudCosResolver.html":{}}}],["enumerations",{"_index":1058,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":265,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["env",{"_index":625,"title":{},"body":{"interfaces/SocfonyConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":371,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/SocfonyConfig.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["error(authorization_token_create_user_where_allow_one",{"_index":273,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["error(authorization_token_not_found",{"_index":372,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["error(constants[`user_${key.touppercase()}_field_existed",{"_index":992,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["error(media_type_dont_supported",{"_index":468,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/variables.html":{}}}],["error(security_compare_failed",{"_index":369,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"classes/ViewerResolver.html":{}}}],["error(unauthorized",{"_index":193,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["error(user_not_found",{"_index":281,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/UserResolver.html":{}}}],["error(user_not_set_phone",{"_index":555,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["even",{"_index":1187,"title":{},"body":{"license.html":{}}}],["event",{"_index":1159,"title":{},"body":{"license.html":{}}}],["exection",{"_index":965,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["execution",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":31,"title":{"classes/ExecutionContext.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["executioncontext.create(prisma",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["exemplary",{"_index":1166,"title":{},"body":{"license.html":{}}}],["existed",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiration",{"_index":796,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["expired",{"_index":206,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"injectables/AuthorizationTokenService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["expiredat",{"_index":200,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"injectables/AuthorizationTokenService.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{}}}],["expiredat.gettime",{"_index":349,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["expiredin",{"_index":339,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"injectables/SecuritySmsService.html":{}}}],["expiredin.unit",{"_index":343,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["expiredin.value",{"_index":341,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["expiredtime",{"_index":794,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["export",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"modules/MomentModule.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{}}}],["express",{"_index":164,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/ExecutionContext.html":{},"dependencies.html":{},"license.html":{}}}],["extendcode",{"_index":770,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["extends",{"_index":436,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":113,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"injectables/SecuritySmsService.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["federation",{"_index":659,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["field",{"_index":219,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["field((type",{"_index":224,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/ViewerEntity.html":{}}}],["field(undefined",{"_index":205,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{}}}],["file",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"modules/MomentModule.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["filename",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["find",{"_index":389,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{}}}],["fitness",{"_index":1155,"title":{},"body":{"license.html":{}}}],["fiveminutesdate",{"_index":378,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["fiveminutesdate.gettime",{"_index":375,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["flutter",{"_index":1104,"title":{},"body":{"index.html":{}}}],["following",{"_index":1126,"title":{},"body":{"license.html":{}}}],["form",{"_index":1134,"title":{},"body":{"license.html":{}}}],["forms",{"_index":1122,"title":{},"body":{"license.html":{}}}],["found",{"_index":370,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"miscellaneous/variables.html":{}}}],["friendly",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":951,"title":{},"body":{"classes/ViewerEntity.html":{},"index.html":{}}}],["function",{"_index":103,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"interfaces/SocfonyConfig.html":{},"classes/ViewerResolver.html":{},"coverage.html":{}}}],["functions",{"_index":1065,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["gem",{"_index":1116,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getauthorizationtoken",{"_index":398,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["getauthorizationtoken(prismaclient",{"_index":409,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["getbaseoptions",{"_index":757,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["getconfig",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"interfaces/SocfonyConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getcredential",{"_index":765,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getfederationtokenresponse",{"_index":789,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["gethasauthorization",{"_index":121,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["gethasauthorization(context",{"_index":147,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["gethasauthorizationtype",{"_index":122,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["gethasauthorizationtype(context",{"_index":150,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["gethttpauthorization",{"_index":399,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["gethttpauthorization(request",{"_index":411,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["getoptions",{"_index":559,"title":{},"body":{"injectables/SecuritySmsService.html":{},"injectables/TencentCloudCosService.html":{}}}],["getoptions(haschina",{"_index":568,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["gettemporarycredentialdurationseconds",{"_index":701,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["getting",{"_index":1082,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettokenexpiredin",{"_index":299,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["gif",{"_index":675,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["global",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["goods",{"_index":1171,"title":{},"body":{"license.html":{}}}],["gqlcontexttype",{"_index":161,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["gqlexecutioncontext",{"_index":162,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["gqlexecutioncontext.create(context).getcontext",{"_index":173,"title":{},"body":{"guards/AuthorizationGuard.html":{},"miscellaneous/variables.html":{}}}],["graph",{"_index":1196,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":172,"title":{},"body":{"guards/AuthorizationGuard.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["graphqlisodatetime",{"_index":489,"title":{},"body":{"classes/MomentEntity.html":{},"classes/SecuritySmsResolver.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{}}}],["graphqlmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forrootasync",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["guangzhou",{"_index":752,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{}}}],["guard",{"_index":114,"title":{"guards/AuthorizationGuard.html":{}},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":115,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["handler",{"_index":146,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["hasauthorization",{"_index":83,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"miscellaneous/variables.html":{}}}],["haschina",{"_index":570,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["hash",{"_index":984,"title":{},"body":{"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["hash(password",{"_index":1076,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hastokenexpired",{"_index":300,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["hastokenexpired(token",{"_index":317,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["hastokenexpiredtype",{"_index":87,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/SecuritySmsResolver.html":{},"miscellaneous/enumerations.html":{}}}],["hastokenexpiredtype.auth",{"_index":108,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/SecuritySmsResolver.html":{},"miscellaneous/variables.html":{}}}],["hastokenexpiredtype.refresh",{"_index":284,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["header",{"_index":413,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["headers",{"_index":423,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["headers[key",{"_index":427,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["headers[key.tolowercase",{"_index":425,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["help",{"_index":1097,"title":{},"body":{"index.html":{}}}],["helper",{"_index":1078,"title":{},"body":{"miscellaneous/functions.html":{}}}],["holder",{"_index":1139,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1149,"title":{},"body":{"license.html":{}}}],["hook",{"_index":516,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":97,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/ExecutionContext.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["httpprofile",{"_index":775,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{}}}],["icontext",{"_index":159,"title":{},"body":{"guards/AuthorizationGuard.html":{},"miscellaneous/variables.html":{}}}],["icontext.create",{"_index":182,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["id",{"_index":217,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/MomentEntity.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["idhelper",{"_index":257,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{}}}],["idhelper.alphabet(32",{"_index":715,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["idhelper.id(128",{"_index":355,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["idhelper.id(64",{"_index":279,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/SecuritySmsService.html":{}}}],["idhelper.numeral(6",{"_index":590,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["image",{"_index":451,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/enumerations.html":{}}}],["images",{"_index":456,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/TencentCloudCosResolver.html":{}}}],["implements",{"_index":168,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"miscellaneous/variables.html":{}}}],["implied",{"_index":1150,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"modules/MomentModule.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/SecurityModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{}}}],["incidental",{"_index":1164,"title":{},"body":{"license.html":{}}}],["include",{"_index":431,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["including",{"_index":1152,"title":{},"body":{"license.html":{}}}],["index",{"_index":80,"title":{"index.html":{}},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indirect",{"_index":1163,"title":{},"body":{"license.html":{}}}],["info",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"modules/MomentModule.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["inherited",{"_index":444,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentVideoMedia.html":{},"classes/UserEntity.html":{},"classes/ViewerEntity.html":{}}}],["inique",{"_index":942,"title":{},"body":{"classes/UserWhereUniqueInput.html":{}}}],["init",{"_index":515,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["initializecontext",{"_index":123,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["initializecontext(context",{"_index":152,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["initialzd",{"_index":154,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["inject",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":160,"title":{"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{}},"body":{"guards/AuthorizationGuard.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":295,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":391,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{}}}],["inputtype",{"_index":904,"title":{},"body":{"classes/UserProfileUpdateInput.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{}}}],["instanceof",{"_index":367,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/ViewerResolver.html":{}}}],["int",{"_index":788,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["interface",{"_index":74,"title":{"interfaces/AuthDecoratorOptions.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"interfaces/SocfonyConfig.html":{}},"body":{"interfaces/AuthDecoratorOptions.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"interfaces/SocfonyConfig.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"coverage.html":{}}}],["interface.resolver",{"_index":854,"title":{},"body":{"modules/UserModule.html":{}}}],["interface.resolver.ts",{"_index":836,"title":{},"body":{"classes/UserInterfaceResolver.html":{},"coverage.html":{}}}],["interface.resolver.ts:11",{"_index":839,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["interface.resolver.ts:23",{"_index":841,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["interfaces",{"_index":76,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"interfaces/SocfonyConfig.html":{},"overview.html":{}}}],["interfacetype",{"_index":447,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/UserInterface.html":{}}}],["interruption",{"_index":1176,"title":{},"body":{"license.html":{}}}],["iso8601",{"_index":795,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["isproduction",{"_index":619,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["item",{"_index":597,"title":{},"body":{"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{}}}],["jpg",{"_index":673,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["json.stringify",{"_index":719,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["kernel",{"_index":408,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["key",{"_index":420,"title":{},"body":{"classes/ExecutionContext.html":{},"injectables/TencentCloudCosService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{}}}],["liability",{"_index":1179,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1161,"title":{},"body":{"license.html":{}}}],["license",{"_index":1107,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":1111,"title":{},"body":{"index.html":{}}}],["limited",{"_index":1153,"title":{},"body":{"license.html":{}}}],["list",{"_index":732,"title":{},"body":{"injectables/TencentCloudCosService.html":{},"license.html":{}}}],["literal",{"_index":381,"title":{},"body":{"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/TencentCloudCosResolver.html":{}}}],["load",{"_index":624,"title":{},"body":{"interfaces/SocfonyConfig.html":{},"miscellaneous/functions.html":{}}}],["loadconfig",{"_index":1004,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loadconfig(path",{"_index":626,"title":{},"body":{"interfaces/SocfonyConfig.html":{},"miscellaneous/functions.html":{}}}],["location",{"_index":861,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["logged",{"_index":213,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["logger",{"_index":504,"title":{},"body":{"modules/PrismaModule.html":{},"interfaces/SocfonyConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["logger('prisma",{"_index":510,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["logger('socfony",{"_index":627,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["logger.error(error.message",{"_index":628,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["logger.log(`loaded",{"_index":630,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["login",{"_index":216,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"miscellaneous/variables.html":{}}}],["loss",{"_index":1173,"title":{},"body":{"license.html":{}}}],["lte",{"_index":362,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["mail",{"_index":948,"title":{},"body":{"classes/ViewerEntity.html":{}}}],["map((item",{"_index":596,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["matches",{"_index":995,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["matching",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"modules/MomentModule.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["materials",{"_index":1137,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":1092,"title":{},"body":{"index.html":{}}}],["media",{"_index":435,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["media.entity",{"_index":492,"title":{},"body":{"classes/MomentEntity.html":{}}}],["media_type_dont_supported",{"_index":449,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":1154,"title":{},"body":{"license.html":{}}}],["met",{"_index":1128,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":1051,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":117,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["middleware",{"_index":508,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mime",{"_index":672,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["minutes').todate",{"_index":364,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["miscellaneous",{"_index":1057,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mobile",{"_index":993,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["modification",{"_index":1123,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":457,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/variables.html":{}}}],["momentaudiomedia",{"_index":432,"title":{"classes/MomentAudioMedia.html":{}},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["momententity",{"_index":469,"title":{"classes/MomentEntity.html":{}},"body":{"classes/MomentEntity.html":{},"coverage.html":{}}}],["momentimagemedia",{"_index":455,"title":{"classes/MomentImageMedia.html":{}},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["momentmedia",{"_index":459,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["momentmediacommon",{"_index":437,"title":{"classes/MomentMediaCommon.html":{}},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["momentmediacommon:36",{"_index":445,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentVideoMedia.html":{}}}],["momentmediatype",{"_index":443,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/enumerations.html":{}}}],["momentmediatype.audio",{"_index":464,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/variables.html":{}}}],["momentmediatype.image",{"_index":465,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/variables.html":{}}}],["momentmediatype.video",{"_index":466,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/variables.html":{}}}],["momentmodule",{"_index":496,"title":{"modules/MomentModule.html":{}},"body":{"modules/MomentModule.html":{},"modules.html":{},"overview.html":{}}}],["momentvideomedia",{"_index":454,"title":{"classes/MomentVideoMedia.html":{}},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["months",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":1094,"title":{},"body":{"index.html":{}}}],["mp3",{"_index":678,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["mp4",{"_index":676,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["mutation",{"_index":249,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{}}}],["mutation((returns",{"_index":283,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["mutation(undefined",{"_index":240,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{}}}],["name",{"_index":133,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["name/cos:abortmultipartupload",{"_index":737,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:completemultipartupload",{"_index":736,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:getobject",{"_index":725,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:headobject",{"_index":726,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:initiatemultipartupload",{"_index":731,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:listmultipartuploads",{"_index":733,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:listparts",{"_index":734,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:optionsobject",{"_index":727,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:postobject",{"_index":730,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:putobject",{"_index":729,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:uploadpart",{"_index":735,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["names",{"_index":1140,"title":{},"body":{"license.html":{}}}],["namespace",{"_index":336,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["namespace_name",{"_index":335,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["nanoid",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["nanoid(size",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":95,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/SecuritySmsResolver.html":{},"classes/UpdateViewerArgs.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["negligence",{"_index":1183,"title":{},"body":{"license.html":{}}}],["nestjs",{"_index":134,"title":{},"body":{"guards/AuthorizationGuard.html":{},"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"modules/MomentModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1034,"title":{},"body":{"dependencies.html":{}}}],["networking",{"_index":1090,"title":{},"body":{"index.html":{}}}],["new",{"_index":192,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserResolver.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newphonesecurity",{"_index":808,"title":{},"body":{"classes/UpdateViewerArgs.html":{},"classes/ViewerResolver.html":{}}}],["nextjs",{"_index":149,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["nodejs",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["nodejs/tencentcloud/services/sms/v20190711/sms_client",{"_index":762,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["nodejs/tencentcloud/services/sms/v20190711/sms_models",{"_index":764,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["nodejs/tencentcloud/services/sts/v20180813/sts_client",{"_index":803,"title":{},"body":{"injectables/TencentCloudStsService.html":{}}}],["nodejs/tencentcloud/services/sts/v20180813/sts_models",{"_index":790,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["notice",{"_index":1132,"title":{},"body":{"license.html":{}}}],["nullable",{"_index":441,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{}}}],["number",{"_index":383,"title":{},"body":{"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["number.parseint",{"_index":581,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["numeral",{"_index":1016,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":310,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"injectables/TencentCloudCosService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":683,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudSmsService.html":{},"classes/ViewerResolver.html":{}}}],["object.keys(data",{"_index":982,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["object.keys(where).length",{"_index":271,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["objecttype",{"_index":220,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UserEntity.html":{},"classes/UserProfileEntity.html":{},"classes/ViewerEntity.html":{}}}],["ogg",{"_index":677,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["omit",{"_index":825,"title":{},"body":{"classes/UserInterface.html":{},"classes/UserProfileUpdateInput.html":{},"classes/ViewerEntity.html":{}}}],["omittype",{"_index":905,"title":{},"body":{"classes/UserProfileUpdateInput.html":{}}}],["one",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onmoduledestroy",{"_index":505,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["onmoduleinit",{"_index":506,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":1085,"title":{},"body":{"index.html":{}}}],["optional",{"_index":82,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"miscellaneous/functions.html":{}}}],["options.endpoint",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["options.expiredin",{"_index":600,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["options.isproduction",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["options.templateid",{"_index":605,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["options.veriables",{"_index":594,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["options?.hasauthorization",{"_index":106,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["options?.type",{"_index":107,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["orderby",{"_index":608,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["other.id",{"_index":991,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["otherwise",{"_index":1184,"title":{},"body":{"license.html":{}}}],["out",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1198,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":474,"title":{},"body":{"classes/MomentEntity.html":{},"classes/UserProfileEntity.html":{}}}],["ownerid",{"_index":475,"title":{},"body":{"classes/MomentEntity.html":{}}}],["package",{"_index":1031,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":99,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["param.hasauthorization",{"_index":101,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["param.type",{"_index":102,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["parameters",{"_index":132,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":756,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["paramsset",{"_index":593,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["parent",{"_index":250,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"classes/ViewerResolver.html":{}}}],["partialtype",{"_index":906,"title":{},"body":{"classes/UserProfileUpdateInput.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{}}}],["partialtype(userprofileentity",{"_index":907,"title":{},"body":{"classes/UserProfileUpdateInput.html":{}}}],["partialtype(viewerentity",{"_index":943,"title":{},"body":{"classes/UserWhereUniqueInput.html":{}}}],["particular",{"_index":1156,"title":{},"body":{"license.html":{}}}],["password",{"_index":833,"title":{},"body":{"classes/UserInterface.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerResolver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["passwordhelper",{"_index":928,"title":{},"body":{"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["passwordhelper.compare(password",{"_index":930,"title":{},"body":{"injectables/UserService.html":{}}}],["passwordhelper.hash(data[key",{"_index":986,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["path",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"interfaces/SocfonyConfig.html":{},"classes/UserProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["period",{"_index":316,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"miscellaneous/variables.html":{}}}],["permission",{"_index":1148,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":1124,"title":{},"body":{"license.html":{}}}],["phone",{"_index":280,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserInterface.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["phone(@parent",{"_index":975,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["phone(user",{"_index":959,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["phone.replace(/(.*)\\d{4}(\\d{4",{"_index":976,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["phone.startswith('+86",{"_index":588,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["phonenumberset",{"_index":604,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["pick",{"_index":754,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"classes/UserUpdateInput.html":{}}}],["picktype",{"_index":812,"title":{},"body":{"classes/UpdateViewerArgs.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{}}}],["picktype(viewerentity",{"_index":940,"title":{},"body":{"classes/UserUpdateInput.html":{}}}],["platform",{"_index":1088,"title":{},"body":{"index.html":{}}}],["playground",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["plugin",{"_index":1091,"title":{},"body":{"index.html":{}}}],["png",{"_index":674,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["policy",{"_index":718,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["port",{"_index":620,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["possibility",{"_index":1189,"title":{},"body":{"license.html":{}}}],["prifle",{"_index":880,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["prior",{"_index":1147,"title":{},"body":{"license.html":{}}}],["prisma",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/MomentEntity.html":{},"modules/PrismaModule.html":{},"injectables/SecuritySmsService.html":{},"classes/UserInterface.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma.authorizationtokengetpayload",{"_index":223,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{}}}],["prisma.jsonvalue",{"_index":484,"title":{},"body":{"classes/MomentEntity.html":{}}}],["prisma.middleware",{"_index":1079,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma.momentgetpayload",{"_index":493,"title":{},"body":{"classes/MomentEntity.html":{}}}],["prisma.usergetpayload",{"_index":898,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":944,"title":{},"body":{"classes/UserWhereUniqueInput.html":{}}}],["prisma/client",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/MomentEntity.html":{},"modules/PrismaModule.html":{},"injectables/SecuritySmsService.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"injectables/SecuritySmsService.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["prismaclient.authorizationtoken.findunique",{"_index":430,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["prismaloggermiddleware",{"_index":507,"title":{},"body":{"modules/PrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["prismaloggermiddleware(logger",{"_index":1077,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prismamodule",{"_index":13,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["private",{"_index":169,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"injectables/SecuritySmsService.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["process.argv",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.client_graphql_endpoint",{"_index":635,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["process.env.client_server_port",{"_index":633,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["process.env.database_url",{"_index":514,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":632,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["process.env.tencent_cloud_cos_bucket",{"_index":705,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["process.env.tencent_cloud_cos_region",{"_index":706,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["process.env.tencent_cloud_sms_app_id",{"_index":767,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["process.env.tencent_cloud_sms_china_template_id",{"_index":584,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["process.env.tencent_cloud_sms_china_veriables",{"_index":585,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["process.env.tencent_cloud_sms_expired_in",{"_index":582,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["process.env.tencent_cloud_sms_extend_code",{"_index":771,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["process.env.tencent_cloud_sms_other_template_id",{"_index":586,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["process.env.tencent_cloud_sms_other_veriables",{"_index":587,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["process.env.tencent_cloud_sms_sender_id",{"_index":773,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["process.env.tencent_cloud_sms_sign",{"_index":769,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["process.exit(1",{"_index":629,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["procurement",{"_index":1169,"title":{},"body":{"license.html":{}}}],["production",{"_index":621,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["products",{"_index":1144,"title":{},"body":{"license.html":{}}}],["profile",{"_index":774,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/ViewerEntity.html":{}}}],["profile'})@authorizationwith",{"_index":887,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["profile(@parent",{"_index":844,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["profile(user",{"_index":840,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["profile.resolver",{"_index":877,"title":{},"body":{"modules/UserProfileModule.html":{}}}],["profile.service",{"_index":878,"title":{},"body":{"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{}}}],["profile.userid",{"_index":893,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["profile/entities/profile.entity",{"_index":831,"title":{},"body":{"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{}}}],["profile/profile.module",{"_index":853,"title":{},"body":{"modules/UserModule.html":{}}}],["profile/profile.service",{"_index":843,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["profileservice",{"_index":884,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["profits",{"_index":1174,"title":{},"body":{"license.html":{}}}],["project",{"_index":1102,"title":{},"body":{"index.html":{}}}],["promise",{"_index":142,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{}}}],["promote",{"_index":1143,"title":{},"body":{"license.html":{}}}],["properties",{"_index":81,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"classes/AuthorizationTokenEntity.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{}}}],["provide",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":1125,"title":{},"body":{"license.html":{}}}],["provider",{"_index":509,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{}}}],["public",{"_index":396,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["purpose",{"_index":1157,"title":{},"body":{"license.html":{}}}],["qcs::cos:${region}:uid/${uid}:${bucket",{"_index":728,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["qcs::cos:${region}:uid/${uid}:${bucket}/${name",{"_index":738,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["query",{"_index":233,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["query(undefined",{"_index":232,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["read",{"_index":660,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{}}}],["readability",{"_index":1017,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["readability(23456789qwertyupasdfghjklzxcvbnm",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":170,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"modules/PrismaModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["real",{"_index":1080,"title":{},"body":{"miscellaneous/functions.html":{}}}],["redistribution",{"_index":1119,"title":{},"body":{"license.html":{}}}],["redistributions",{"_index":1129,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":127,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["refresh",{"_index":208,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["refreshauthorizationtoken",{"_index":228,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{}}}],["refreshauthorizationtoken(@context",{"_index":285,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["refreshauthorizationtoken(authorizationtoken",{"_index":319,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["refreshauthorizationtoken(context",{"_index":243,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["refreshexpiredat",{"_index":201,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"injectables/AuthorizationTokenService.html":{}}}],["refreshexpiredin",{"_index":340,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{}}}],["refreshexpiredin.unit",{"_index":345,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["refreshexpiredin.value",{"_index":344,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["region",{"_index":641,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{}}}],["register",{"_index":680,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["registered",{"_index":817,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/ViewerEntity.html":{}}}],["registerenumtype",{"_index":448,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/TencentCloudCosResolver.html":{}}}],["registerenumtype(allowuploadfiletype",{"_index":682,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["registerenumtype(momentmediatype",{"_index":452,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{}}}],["rejectonnotfound",{"_index":274,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"injectables/SecuritySmsService.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["replace('#code",{"_index":598,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["replace('#expired",{"_index":599,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["reproduce",{"_index":1135,"title":{},"body":{"license.html":{}}}],["req",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":163,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/ExecutionContext.html":{},"injectables/TencentCloudSmsService.html":{}}}],["request.context",{"_index":415,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["request.context.authorizationtoken?.token",{"_index":416,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["request.header",{"_index":421,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["request.header(key",{"_index":422,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["request.headers",{"_index":424,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["reserved",{"_index":1118,"title":{},"body":{"license.html":{}}}],["reset",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{}}}],["resolve",{"_index":248,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"injectables/UserProfileService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{}}}],["resolvecontext",{"_index":124,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["resolvecontext(context",{"_index":156,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["resolvefield",{"_index":667,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"classes/ViewerResolver.html":{}}}],["resolvefield(undefined",{"_index":657,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"classes/ViewerResolver.html":{}}}],["resolveprofile",{"_index":895,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["resolveprofile(user",{"_index":897,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["resolver",{"_index":158,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["resolvers",{"_index":745,"title":{},"body":{"modules/TencentCloudModule.html":{}}}],["resolvetype",{"_index":1028,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["resolvetype(value",{"_index":460,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["resource",{"_index":686,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{}}}],["result",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"modules/MomentModule.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"modules/MomentModule.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":1130,"title":{},"body":{"license.html":{}}}],["return",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":141,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":1117,"title":{},"body":{"license.html":{}}}],["root",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["runner",{"_index":237,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosResolver.html":{}}}],["rxjs",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["schema",{"_index":681,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["scofony",{"_index":964,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["sdk",{"_index":761,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"dependencies.html":{}}}],["seconds",{"_index":704,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["seconds').todate",{"_index":592,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["secrect",{"_index":784,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["secuity",{"_index":927,"title":{},"body":{"injectables/UserService.html":{}}}],["secure",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["security",{"_index":270,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/UpdateViewerArgs.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["security.expiredat.gettime",{"_index":611,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["security.id",{"_index":614,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["security.usedat",{"_index":610,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["security/security.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["security_compare_failed",{"_index":324,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["securitymodule",{"_index":14,"title":{"modules/SecurityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SecurityModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["securitysmscode",{"_index":577,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["securitysmsresolver",{"_index":532,"title":{"classes/SecuritySmsResolver.html":{}},"body":{"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"coverage.html":{}}}],["securitysmsservice",{"_index":529,"title":{"injectables/SecuritySmsService.html":{}},"body":{"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["secyrity",{"_index":542,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["send",{"_index":551,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudSmsService.html":{}}}],["send(params",{"_index":753,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["send(phone",{"_index":574,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["senderid",{"_index":772,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["sendsmsrequest",{"_index":763,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["sent",{"_index":567,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["server",{"_index":802,"title":{},"body":{"injectables/TencentCloudStsService.html":{},"dependencies.html":{}}}],["service",{"_index":136,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["services",{"_index":1172,"title":{},"body":{"license.html":{}}}],["set",{"_index":520,"title":{},"body":{"modules/PrismaModule.html":{},"classes/UpdateViewerArgs.html":{},"miscellaneous/variables.html":{}}}],["setmetadata",{"_index":89,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["setmetadata(auth_metadata_has_authorization",{"_index":105,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["setting",{"_index":333,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["setting.expiredin.unit",{"_index":357,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["setting.refreshexpiredin.unit",{"_index":360,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["shall",{"_index":1160,"title":{},"body":{"license.html":{}}}],["sign",{"_index":768,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["size",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sms",{"_index":537,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/UserService.html":{}}}],["sms.resolver",{"_index":533,"title":{},"body":{"modules/SecurityModule.html":{}}}],["sms.resolver.ts",{"_index":536,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"coverage.html":{}}}],["sms.resolver.ts:13",{"_index":541,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["sms.resolver.ts:27",{"_index":545,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["sms.resolver.ts:47",{"_index":548,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["sms.service",{"_index":534,"title":{},"body":{"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/UserService.html":{}}}],["sms.service.ts",{"_index":557,"title":{},"body":{"injectables/SecuritySmsService.html":{},"coverage.html":{}}}],["sms.service.ts:11",{"_index":563,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["sms.service.ts:113",{"_index":578,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["sms.service.ts:26",{"_index":569,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["sms.service.ts:49",{"_index":575,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["sms.service.ts:85",{"_index":565,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["sms.tencentcloudapi.com",{"_index":776,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["sms_code",{"_index":1064,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["smssdkappid",{"_index":766,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["soc.service",{"_index":669,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["socfony",{"_index":155,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["socfonyconfig",{"_index":616,"title":{"interfaces/SocfonyConfig.html":{}},"body":{"interfaces/SocfonyConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["social",{"_index":1089,"title":{},"body":{"index.html":{}}}],["software",{"_index":1086,"title":{},"body":{"index.html":{},"license.html":{}}}],["solve",{"_index":1098,"title":{},"body":{"index.html":{}}}],["source",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"modules/MomentModule.html":{},"classes/MomentVideoMedia.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"index.html":{},"license.html":{}}}],["special",{"_index":1165,"title":{},"body":{"license.html":{}}}],["specific",{"_index":1146,"title":{},"body":{"license.html":{}}}],["split",{"_index":595,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["src/.../app.config.ts",{"_index":1069,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../authorization.decorator.ts",{"_index":1066,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../context.decorator.ts",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cos.resolver.ts",{"_index":1059,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../enums.ts",{"_index":1060,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../id.helper.ts",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":1070,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../logger.middleware.ts",{"_index":1071,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1067,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../media.entity.ts",{"_index":1061,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../password.helper.ts",{"_index":1068,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prisma.module.ts",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.union.ts",{"_index":1072,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../viewer.resolver.ts",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.config.ts",{"_index":617,"title":{},"body":{"interfaces/SocfonyConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authorization",{"_index":196,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/SecuritySmsResolver.html":{},"classes/UpdateViewerArgs.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/authorization.decorator",{"_index":251,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{}}}],["src/authorization.decorator.ts",{"_index":77,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/authorization.guard.ts",{"_index":116,"title":{},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{}}}],["src/authorization.guard.ts:101",{"_index":139,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/authorization.guard.ts:19",{"_index":130,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/authorization.guard.ts:36",{"_index":157,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/authorization.guard.ts:48",{"_index":148,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/authorization.guard.ts:59",{"_index":151,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/authorization.guard.ts:71",{"_index":144,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/authorization.guard.ts:88",{"_index":153,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/constants",{"_index":254,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["src/constants.ts",{"_index":1011,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/context.decorator",{"_index":255,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"classes/ViewerResolver.html":{}}}],["src/context.decorator.ts",{"_index":1012,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/execution",{"_index":256,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"coverage.html":{}}}],["src/helper",{"_index":258,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["src/helper/id.helper.ts",{"_index":1013,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helper/password.helper.ts",{"_index":1018,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":1019,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/moment/entities/media.entity.ts",{"_index":433,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/moment/entities/media.entity.ts:36",{"_index":495,"title":{},"body":{"classes/MomentMediaCommon.html":{}}}],["src/moment/entities/media.entity.ts:51",{"_index":500,"title":{},"body":{"classes/MomentVideoMedia.html":{}}}],["src/moment/entities/media.entity.ts:57",{"_index":501,"title":{},"body":{"classes/MomentVideoMedia.html":{}}}],["src/moment/entities/media.entity.ts:72",{"_index":442,"title":{},"body":{"classes/MomentAudioMedia.html":{}}}],["src/moment/entities/media.entity.ts:78",{"_index":439,"title":{},"body":{"classes/MomentAudioMedia.html":{}}}],["src/moment/entities/media.entity.ts:90",{"_index":494,"title":{},"body":{"classes/MomentImageMedia.html":{}}}],["src/moment/entities/moment.entity.ts",{"_index":470,"title":{},"body":{"classes/MomentEntity.html":{},"coverage.html":{}}}],["src/moment/entities/moment.entity.ts:23",{"_index":483,"title":{},"body":{"classes/MomentEntity.html":{}}}],["src/moment/entities/moment.entity.ts:29",{"_index":488,"title":{},"body":{"classes/MomentEntity.html":{}}}],["src/moment/entities/moment.entity.ts:35",{"_index":477,"title":{},"body":{"classes/MomentEntity.html":{}}}],["src/moment/entities/moment.entity.ts:41",{"_index":485,"title":{},"body":{"classes/MomentEntity.html":{}}}],["src/moment/entities/moment.entity.ts:47",{"_index":480,"title":{},"body":{"classes/MomentEntity.html":{}}}],["src/moment/entities/moment.entity.ts:53",{"_index":482,"title":{},"body":{"classes/MomentEntity.html":{}}}],["src/moment/entities/moment.entity.ts:59",{"_index":487,"title":{},"body":{"classes/MomentEntity.html":{}}}],["src/moment/entities/moment.entity.ts:65",{"_index":486,"title":{},"body":{"classes/MomentEntity.html":{}}}],["src/moment/moment.module.ts",{"_index":499,"title":{},"body":{"modules/MomentModule.html":{}}}],["src/prisma",{"_index":292,"title":{},"body":{"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/SecurityModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{}}}],["src/prisma/middleware/logger.middleware.ts",{"_index":1024,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module.ts",{"_index":502,"title":{},"body":{"modules/PrismaModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/security/security",{"_index":535,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/security/security.module",{"_index":852,"title":{},"body":{"modules/UserModule.html":{}}}],["src/security/security.module.ts",{"_index":530,"title":{},"body":{"modules/SecurityModule.html":{}}}],["src/tencent",{"_index":531,"title":{},"body":{"modules/SecurityModule.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/user/dto",{"_index":394,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{}}}],["src/user/dto/update",{"_index":806,"title":{},"body":{"classes/UpdateViewerArgs.html":{},"coverage.html":{}}}],["src/user/dto/user",{"_index":937,"title":{},"body":{"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts",{"_index":815,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/user/entities/user.interface.ts",{"_index":824,"title":{},"body":{"classes/UserInterface.html":{},"coverage.html":{}}}],["src/user/entities/user.interface.ts:27",{"_index":827,"title":{},"body":{"classes/UserInterface.html":{}}}],["src/user/entities/user.interface.ts:36",{"_index":828,"title":{},"body":{"classes/UserInterface.html":{}}}],["src/user/entities/user.interface.ts:44",{"_index":826,"title":{},"body":{"classes/UserInterface.html":{}}}],["src/user/entities/user.interface.ts:52",{"_index":829,"title":{},"body":{"classes/UserInterface.html":{}}}],["src/user/entities/user.union",{"_index":491,"title":{},"body":{"classes/MomentEntity.html":{}}}],["src/user/entities/user.union.ts",{"_index":1027,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/user/entities/viewer.entity",{"_index":222,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{}}}],["src/user/entities/viewer.entity.ts",{"_index":945,"title":{},"body":{"classes/ViewerEntity.html":{},"coverage.html":{}}}],["src/user/entities/viewer.entity.ts:22",{"_index":950,"title":{},"body":{"classes/ViewerEntity.html":{}}}],["src/user/entities/viewer.entity.ts:31",{"_index":952,"title":{},"body":{"classes/ViewerEntity.html":{}}}],["src/user/enums",{"_index":260,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{}}}],["src/user/enums.ts",{"_index":1063,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/profile/dto/profile",{"_index":902,"title":{},"body":{"classes/UserProfileUpdateInput.html":{},"coverage.html":{}}}],["src/user/profile/entities/profile.entity.ts",{"_index":858,"title":{},"body":{"classes/UserProfileEntity.html":{},"coverage.html":{}}}],["src/user/profile/entities/profile.entity.ts:16",{"_index":870,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["src/user/profile/entities/profile.entity.ts:25",{"_index":867,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["src/user/profile/entities/profile.entity.ts:34",{"_index":864,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["src/user/profile/entities/profile.entity.ts:43",{"_index":865,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["src/user/profile/entities/profile.entity.ts:52",{"_index":866,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["src/user/profile/entities/profile.entity.ts:61",{"_index":869,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["src/user/profile/profile.module.ts",{"_index":875,"title":{},"body":{"modules/UserProfileModule.html":{}}}],["src/user/profile/profile.resolver.ts",{"_index":879,"title":{},"body":{"classes/UserProfileResolver.html":{},"coverage.html":{}}}],["src/user/profile/profile.resolver.ts:13",{"_index":883,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["src/user/profile/profile.resolver.ts:33",{"_index":888,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["src/user/profile/profile.service.ts",{"_index":894,"title":{},"body":{"injectables/UserProfileService.html":{},"coverage.html":{}}}],["src/user/profile/profile.service.ts:19",{"_index":899,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["src/user/profile/profile.service.ts:8",{"_index":896,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["src/user/user",{"_index":835,"title":{},"body":{"classes/UserInterfaceResolver.html":{},"coverage.html":{}}}],["src/user/user.module",{"_index":293,"title":{},"body":{"modules/AuthorizationTokenModule.html":{}}}],["src/user/user.module.ts",{"_index":851,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.resolver.ts",{"_index":909,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["src/user/user.resolver.ts:12",{"_index":911,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.resolver.ts:26",{"_index":913,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.service",{"_index":325,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["src/user/user.service.ts",{"_index":918,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:11",{"_index":921,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:23",{"_index":923,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":926,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/viewer.resolver.ts",{"_index":953,"title":{},"body":{"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/viewer.resolver.ts:38",{"_index":956,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["src/user/viewer.resolver.ts:54",{"_index":960,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["src/user/viewer.resolver.ts:68",{"_index":958,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["src/user/viewer.resolver.ts:85",{"_index":968,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["src/user/viewer.resolver.ts:98",{"_index":963,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["stack",{"_index":1084,"title":{},"body":{"index.html":{}}}],["started",{"_index":1083,"title":{"index.html":{},"license.html":{}},"body":{}}],["statement",{"_index":722,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["statements",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":397,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["status",{"_index":1103,"title":{},"body":{"index.html":{}}}],["storage",{"_index":863,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["strict",{"_index":1181,"title":{},"body":{"license.html":{}}}],["string",{"_index":210,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["sts",{"_index":643,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{}}}],["sts.tencentcloudapi.com",{"_index":804,"title":{},"body":{"injectables/TencentCloudStsService.html":{}}}],["stsclient",{"_index":709,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["stsclient.getfederationtoken",{"_index":714,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["substitute",{"_index":1170,"title":{},"body":{"license.html":{}}}],["such",{"_index":1190,"title":{},"body":{"license.html":{}}}],["super",{"_index":511,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["support",{"_index":1193,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["svg",{"_index":1194,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":461,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["system",{"_index":337,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["table",{"_index":1030,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1029,"title":{},"body":{"coverage.html":{}}}],["teams",{"_index":1096,"title":{},"body":{"index.html":{}}}],["templateid",{"_index":572,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["templateparamset",{"_index":606,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["temporary",{"_index":697,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["temporarycredentialdurationseconds",{"_index":692,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["tencent",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"miscellaneous/functions.html":{}}}],["tencentcloud",{"_index":760,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"dependencies.html":{}}}],["tencentcloudcoscredentials",{"_index":636,"title":{"classes/TencentCloudCosCredentials.html":{}},"body":{"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"coverage.html":{}}}],["tencentcloudcosresolver",{"_index":647,"title":{"classes/TencentCloudCosResolver.html":{}},"body":{"classes/TencentCloudCosResolver.html":{},"modules/TencentCloudModule.html":{},"coverage.html":{}}}],["tencentcloudcosservice",{"_index":653,"title":{"injectables/TencentCloudCosService.html":{}},"body":{"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"coverage.html":{},"overview.html":{}}}],["tencentcloudmodule",{"_index":15,"title":{"modules/TencentCloudModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules.html":{},"overview.html":{}}}],["tencentcloudsmsservice",{"_index":562,"title":{"injectables/TencentCloudSmsService.html":{}},"body":{"injectables/SecuritySmsService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"coverage.html":{},"overview.html":{}}}],["tencentcloudstscredentials",{"_index":780,"title":{"classes/TencentCloudStsCredentials.html":{}},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"coverage.html":{}}}],["tencentcloudstsfederationtoken",{"_index":642,"title":{"classes/TencentCloudStsFederationToken.html":{}},"body":{"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"coverage.html":{}}}],["tencentcloudstsservice",{"_index":694,"title":{"injectables/TencentCloudStsService.html":{}},"body":{"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudStsService.html":{},"coverage.html":{},"overview.html":{}}}],["text",{"_index":478,"title":{},"body":{"classes/MomentEntity.html":{},"miscellaneous/functions.html":{}}}],["theory",{"_index":1178,"title":{},"body":{"license.html":{}}}],["this.$connect",{"_index":519,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["this.$disconnect",{"_index":524,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["this.$use(prismaloggermiddleware(this.logger",{"_index":521,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["this.authorizationtokenservice.createtokenwithsecurity",{"_index":282,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["this.authorizationtokenservice.hastokenexpired",{"_index":180,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.authorizationtokenservice.refreshauthorizationtoken",{"_index":286,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["this.baseoptions",{"_index":778,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["this.canactivelytokenhandler(context",{"_index":190,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.comparepassword(user",{"_index":933,"title":{},"body":{"injectables/UserService.html":{}}}],["this.cosservice.createtemporaryreadcredential",{"_index":685,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["this.cosservice.createtemporarywritecredential(idhelper.id(64",{"_index":687,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["this.cosservice.options",{"_index":684,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["this.createclient(region",{"_index":777,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["this.createsecurity(phone",{"_index":556,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["this.createuserauthorizationtoken(authorizationtoken.userid",{"_index":379,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.createuserauthorizationtoken(user",{"_index":368,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.getauthorizationtoken",{"_index":417,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["this.gethasauthorization(context",{"_index":188,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.gethasauthorizationtype(context",{"_index":189,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.gethttpauthorization(request",{"_index":414,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["this.getoptions(haschina",{"_index":589,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["this.gettokenexpiredin",{"_index":350,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.initializecontext(context",{"_index":185,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.options",{"_index":708,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["this.prisma.$transaction",{"_index":351,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.prisma.authorizationtoken.create",{"_index":352,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.prisma.authorizationtoken.deletemany",{"_index":361,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.prisma.authorizationtoken.update",{"_index":376,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.prisma.securitysmscode.create",{"_index":602,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["this.prisma.securitysmscode.findfirst",{"_index":607,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["this.prisma.securitysmscode.update",{"_index":613,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["this.prisma.setting.findunique",{"_index":334,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.prisma.user.create",{"_index":277,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["this.prisma.user.findunique",{"_index":266,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["this.prisma.userprofile.create",{"_index":901,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["this.prisma.userprofile.findunique",{"_index":900,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["this.prismaclient",{"_index":183,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.prismaclient.user.findunique",{"_index":917,"title":{},"body":{"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["this.prismaclient.user.update",{"_index":996,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["this.prismaclient.userprofile.update",{"_index":892,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["this.profileservice.resolveprofile(context.user",{"_index":891,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["this.reflector.get",{"_index":175,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.resolvecontext(context",{"_index":179,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.securitysmsservice.comparecode",{"_index":934,"title":{},"body":{"injectables/UserService.html":{}}}],["this.securitysmsservice.send(phone",{"_index":552,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["this.securitysmsservice.updatecodetoused(value",{"_index":936,"title":{},"body":{"injectables/UserService.html":{}}}],["this.sts.createclient(region",{"_index":710,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["this.temporarycredentialdurationseconds",{"_index":717,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["this.tencentcloudsmsservice.send",{"_index":603,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["this.userprofileservice.resolveprofile(user",{"_index":845,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["this.userservice.comparesecurity",{"_index":366,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"classes/ViewerResolver.html":{}}}],["throw",{"_index":191,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":793,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["title",{"_index":476,"title":{},"body":{"classes/MomentEntity.html":{}}}],["tmpsecretid",{"_index":782,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["tmpsecretkey",{"_index":783,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["todate",{"_index":358,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token",{"_index":86,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["token.args",{"_index":262,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/UpdateViewerArgs.html":{}}}],["token.args.ts",{"_index":385,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{},"coverage.html":{}}}],["token.args.ts:16",{"_index":392,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{}}}],["token.args.ts:24",{"_index":387,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{}}}],["token.args.ts:32",{"_index":386,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{}}}],["token.entity",{"_index":264,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token.entity.ts",{"_index":198,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"coverage.html":{}}}],["token.entity.ts:23",{"_index":218,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["token.entity.ts:31",{"_index":215,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["token.entity.ts:39",{"_index":212,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["token.entity.ts:47",{"_index":207,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["token.entity.ts:55",{"_index":209,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["token.expiredat",{"_index":347,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.length",{"_index":426,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["token.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["token.module.ts",{"_index":291,"title":{},"body":{"modules/AuthorizationTokenModule.html":{}}}],["token.pop",{"_index":429,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["token.refreshexpiredat",{"_index":348,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.resolver",{"_index":294,"title":{},"body":{"modules/AuthorizationTokenModule.html":{}}}],["token.resolver.ts",{"_index":226,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"coverage.html":{}}}],["token.resolver.ts:127",{"_index":245,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token.resolver.ts:29",{"_index":230,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token.resolver.ts:45",{"_index":247,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token.resolver.ts:72",{"_index":236,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token.resolver.ts:83",{"_index":241,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token.service",{"_index":165,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{}}}],["token.service.ts",{"_index":296,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{}}}],["token.service.ts:121",{"_index":306,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.service.ts:145",{"_index":320,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.service.ts:25",{"_index":303,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.service.ts:39",{"_index":314,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.service.ts:69",{"_index":318,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.service.ts:86",{"_index":312,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.userid",{"_index":267,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token/authorization",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"coverage.html":{}}}],["token/constants",{"_index":93,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{}}}],["token/constants.ts",{"_index":1007,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["token/dto/create",{"_index":384,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{},"classes/UpdateViewerArgs.html":{},"coverage.html":{}}}],["token/entities/authorization",{"_index":197,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"coverage.html":{}}}],["token/enums",{"_index":94,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/SecuritySmsResolver.html":{}}}],["token/enums.ts",{"_index":1062,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["token/types.ts",{"_index":380,"title":{},"body":{"interfaces/AuthorizationTokenValidityPeriod.html":{},"coverage.html":{}}}],["tort",{"_index":1182,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":1040,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":84,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentEntity.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":353,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["types",{"_index":332,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/variables.html":{}}}],["uid",{"_index":712,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["unauthorized",{"_index":166,"title":{},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":235,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{}}}],["union",{"_index":458,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":390,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["unique.input.ts",{"_index":941,"title":{},"body":{"classes/UserWhereUniqueInput.html":{},"coverage.html":{}}}],["unit",{"_index":342,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"miscellaneous/variables.html":{}}}],["unittype",{"_index":382,"title":{},"body":{"interfaces/AuthorizationTokenValidityPeriod.html":{}}}],["unix",{"_index":792,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["unknown",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":373,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerResolver.html":{}}}],["update.input",{"_index":813,"title":{},"body":{"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{}}}],["update.input.ts",{"_index":903,"title":{},"body":{"classes/UserProfileUpdateInput.html":{},"classes/UserUpdateInput.html":{},"coverage.html":{}}}],["update.input.ts:25",{"_index":938,"title":{},"body":{"classes/UserUpdateInput.html":{}}}],["updatecodetoused",{"_index":560,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["updatecodetoused(security",{"_index":576,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["updated",{"_index":868,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["updatedat",{"_index":862,"title":{},"body":{"classes/UserProfileEntity.html":{},"classes/UserProfileUpdateInput.html":{}}}],["updateviewer",{"_index":954,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["updateviewer(context",{"_index":961,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["updateviewerargs",{"_index":805,"title":{"classes/UpdateViewerArgs.html":{}},"body":{"classes/UpdateViewerArgs.html":{},"classes/ViewerResolver.html":{},"coverage.html":{}}}],["updateviewerprofile",{"_index":881,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["updateviewerprofile(context",{"_index":885,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["upload",{"_index":671,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":513,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["use",{"_index":1120,"title":{},"body":{"license.html":{}}}],["useclass",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":579,"title":{},"body":{"injectables/SecuritySmsService.html":{},"classes/ViewerResolver.html":{},"license.html":{}}}],["usedat",{"_index":615,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["usefactory(prisma",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":90,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["useguards(authorizationguard",{"_index":109,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["user",{"_index":178,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/MomentEntity.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["user(token",{"_index":246,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["user(where",{"_index":912,"title":{},"body":{"classes/UserResolver.html":{}}}],["user.'})@authorizationwith",{"_index":967,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["user.id",{"_index":354,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"injectables/UserProfileService.html":{},"classes/ViewerResolver.html":{}}}],["user.interface",{"_index":823,"title":{},"body":{"classes/UserEntity.html":{},"classes/ViewerEntity.html":{}}}],["user.password",{"_index":931,"title":{},"body":{"injectables/UserService.html":{}}}],["user.phone",{"_index":935,"title":{},"body":{"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["user.service",{"_index":855,"title":{},"body":{"modules/UserModule.html":{},"classes/ViewerResolver.html":{}}}],["user/user.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["user?.password",{"_index":929,"title":{},"body":{"injectables/UserService.html":{}}}],["user_email_field_existed",{"_index":969,"title":{},"body":{"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_login_field_existed",{"_index":970,"title":{},"body":{"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_not_found",{"_index":253,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_not_set_phone",{"_index":549,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_phone_field_existed",{"_index":971,"title":{},"body":{"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity",{"_index":814,"title":{"classes/UserEntity.html":{}},"body":{"classes/UserEntity.html":{},"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":202,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"injectables/AuthorizationTokenService.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{}}}],["userinterface",{"_index":816,"title":{"classes/UserInterface.html":{}},"body":{"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/ViewerEntity.html":{},"coverage.html":{}}}],["userinterface:27",{"_index":819,"title":{},"body":{"classes/UserEntity.html":{},"classes/ViewerEntity.html":{}}}],["userinterface:36",{"_index":820,"title":{},"body":{"classes/UserEntity.html":{},"classes/ViewerEntity.html":{}}}],["userinterface:44",{"_index":818,"title":{},"body":{"classes/UserEntity.html":{},"classes/ViewerEntity.html":{}}}],["userinterface:52",{"_index":822,"title":{},"body":{"classes/UserEntity.html":{},"classes/ViewerEntity.html":{}}}],["userinterfaceresolver",{"_index":834,"title":{"classes/UserInterfaceResolver.html":{}},"body":{"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":16,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userprofile",{"_index":821,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserInterface.html":{},"injectables/UserProfileService.html":{},"classes/ViewerEntity.html":{}}}],["userprofileentity",{"_index":830,"title":{"classes/UserProfileEntity.html":{}},"body":{"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"coverage.html":{}}}],["userprofilemodule",{"_index":850,"title":{"modules/UserProfileModule.html":{}},"body":{"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["userprofileresolver",{"_index":876,"title":{"classes/UserProfileResolver.html":{}},"body":{"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"coverage.html":{}}}],["userprofileservice",{"_index":838,"title":{"injectables/UserProfileService.html":{}},"body":{"classes/UserInterfaceResolver.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["userprofileupdateinput",{"_index":886,"title":{"classes/UserProfileUpdateInput.html":{}},"body":{"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"coverage.html":{}}}],["userresolver",{"_index":908,"title":{"classes/UserResolver.html":{}},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["users",{"_index":990,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["usersecuritycomparetype",{"_index":259,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/enumerations.html":{}}}],["usersecuritycomparetype.password",{"_index":932,"title":{},"body":{"injectables/UserService.html":{}}}],["usersecuritycomparetype.sms_code",{"_index":275,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["userservice",{"_index":302,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthorizationTokenService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"overview.html":{}}}],["userunion",{"_index":490,"title":{},"body":{"classes/MomentEntity.html":{},"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["userupdateinput",{"_index":809,"title":{"classes/UserUpdateInput.html":{}},"body":{"classes/UpdateViewerArgs.html":{},"classes/UserUpdateInput.html":{},"coverage.html":{}}}],["userwhereuniqueinput",{"_index":388,"title":{"classes/UserWhereUniqueInput.html":{}},"body":{"classes/CreateAuthorizationTokenArgs.html":{},"classes/UserResolver.html":{},"classes/UserWhereUniqueInput.html":{},"coverage.html":{}}}],["validate",{"_index":96,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"injectables/AuthorizationTokenService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["validator",{"_index":1042,"title":{},"body":{"dependencies.html":{}}}],["validity",{"_index":315,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":338,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value?.type",{"_index":462,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1008,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1202,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veriables",{"_index":573,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["verification",{"_index":994,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["verified",{"_index":187,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["version",{"_index":720,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["video",{"_index":440,"title":{},"body":{"classes/MomentAudioMedia.html":{},"classes/MomentImageMedia.html":{},"classes/MomentMediaCommon.html":{},"classes/MomentVideoMedia.html":{},"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["viewer",{"_index":214,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/SecuritySmsResolver.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["viewer'})@authorizationwith",{"_index":962,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["viewer(@context",{"_index":981,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["viewer(context",{"_index":966,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["viewer.args",{"_index":973,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["viewer.args.ts",{"_index":807,"title":{},"body":{"classes/UpdateViewerArgs.html":{},"coverage.html":{}}}],["viewer.args.ts:20",{"_index":810,"title":{},"body":{"classes/UpdateViewerArgs.html":{}}}],["viewer.args.ts:29",{"_index":811,"title":{},"body":{"classes/UpdateViewerArgs.html":{}}}],["viewer.resolver",{"_index":857,"title":{},"body":{"modules/UserModule.html":{}}}],["viewerentity",{"_index":221,"title":{"classes/ViewerEntity.html":{}},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["viewerresolver",{"_index":856,"title":{"classes/ViewerResolver.html":{}},"body":{"modules/UserModule.html":{},"classes/ViewerResolver.html":{},"coverage.html":{}}}],["warranties",{"_index":1151,"title":{},"body":{"license.html":{}}}],["wav",{"_index":679,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["way",{"_index":1186,"title":{},"body":{"license.html":{}}}],["where.phone",{"_index":276,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["whether",{"_index":989,"title":{},"body":{"classes/ViewerResolver.html":{},"license.html":{}}}],["without",{"_index":111,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["write",{"_index":664,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"index.html":{}}}],["written",{"_index":1106,"title":{},"body":{"index.html":{},"license.html":{}}}],["yes",{"_index":402,"title":{},"body":{"classes/ExecutionContext.html":{},"miscellaneous/functions.html":{}}}],["z",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/MomentModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthorizationTokenModule\n\nAuthorizationTokenModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthorizationTokenModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nSecurityModule\n\nSecurityModule\n\nAppModule -->\n\nSecurityModule->AppModule\n\n\n\n\n\nTencentCloudModule\n\nTencentCloudModule\n\nAppModule -->\n\nTencentCloudModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Root app module.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthorizationTokenModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            SecurityModule\n                        \n                        \n                            TencentCloudModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ExecutionContext } from './execution-context';\nimport { PrismaModule } from './prisma';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { SecurityModule } from './security/security.module';\nimport { getConfig } from './app.config';\nimport { AuthorizationTokenModule } from './authorization-token/authorization-token.module';\nimport { UserModule } from './user/user.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthorizationGuard } from './authorization.guard';\nimport { PrismaClient } from '@prisma/client';\nimport { TencentCloudModule } from './tencent-cloud';\n\n/**\n * Root app module.\n */\n@Global()\n@Module({\n  imports: [\n    GraphQLModule.forRootAsync({\n      imports: [PrismaModule],\n      inject: [PrismaClient],\n      useFactory(prisma: PrismaClient) {\n        const options = getConfig();\n        return {\n          autoSchemaFile: true,\n          debug: !options.isProduction,\n          playground: !options.isProduction,\n          path: options.endpoint,\n          context({ req }) {\n            return ExecutionContext.create(prisma, req);\n          },\n        };\n      },\n    }),\n    PrismaModule,\n    AuthorizationTokenModule,\n    UserModule,\n    SecurityModule,\n    TencentCloudModule,\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AuthorizationGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthDecoratorOptions.html":{"url":"interfaces/AuthDecoratorOptions.html","title":"interface - AuthDecoratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthDecoratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization.decorator.ts\n        \n\n            \n                Description\n            \n            \n                Auth Decorator Options.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        hasAuthorization\n                                \n                                \n                                            Optional\n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hasAuthorization\n                                    \n                                \n                                \n                                    \n                                        hasAuthorization:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Has authorization token\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         HasTokenExpiredType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HasTokenExpiredType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Has authorization token type.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { applyDecorators, SetMetadata, UseGuards } from '@nestjs/common';\nimport {\n  AUTH_METADATA_HAS_AUTHORIZATION,\n  AUTH_METADATA_HAS_AUTHORIZATION_TYPE,\n} from './authorization-token/constants';\nimport { HasTokenExpiredType } from './authorization-token/enums';\nimport { AuthorizationGuard } from './authorization.guard';\n\n/**\n * Auth Decorator Options.\n */\nexport interface AuthDecoratorOptions {\n  /**\n   * Has authorization token\n   */\n  hasAuthorization?: boolean;\n\n  /**\n   * Has authorization token type.\n   */\n  type?: HasTokenExpiredType;\n}\n\n/**\n * Need validate HTTP endpoint `Authorization` token decorator.\n * @param param validate HTTP endpoit `Authorization` token options.\n * @param param.hasAuthorization Has need validate\n * @param param.type validate token type.\n */\nexport function Authorization(options?: AuthDecoratorOptions) {\n  return applyDecorators(\n    SetMetadata(AUTH_METADATA_HAS_AUTHORIZATION, options?.hasAuthorization),\n    SetMetadata(\n      AUTH_METADATA_HAS_AUTHORIZATION_TYPE,\n      options?.type || HasTokenExpiredType.AUTH,\n    ),\n    UseGuards(AuthorizationGuard),\n  );\n}\n\n/**\n * Http auth validate token.\n */\nexport const AuthorizationWith = () =>\n  Authorization({\n    hasAuthorization: true,\n    type: HasTokenExpiredType.AUTH,\n  });\n\n/**\n * Http auth, without validate token.\n */\nexport const AuthorizationWithout = () =>\n  Authorization({\n    hasAuthorization: false,\n    type: HasTokenExpiredType.AUTH,\n  });\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthorizationGuard.html":{"url":"guards/AuthorizationGuard.html","title":"guard - AuthorizationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthorizationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/authorization.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Authorization guard.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                canActivelyTokenHandler\n                            \n                            \n                                getHasAuthorization\n                            \n                            \n                                getHasAuthorizationType\n                            \n                            \n                                    Async\n                                initializeContext\n                            \n                            \n                                resolveContext\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, authorizationTokenService: AuthorizationTokenService, prismaClient: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/authorization.guard.ts:19\n                            \n                        \n\n                \n                    \n                            Create Authorization guard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                NestJS core reflector.\n\n                                                        \n                                                \n                                                \n                                                        authorizationTokenService\n                                                  \n                                                        \n                                                                        AuthorizationTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authorization token service.\n\n                                                        \n                                                \n                                                \n                                                        prismaClient\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma Client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization.guard.ts:101\n                \n            \n\n\n            \n                \n                    Can activate guard.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        NestJS execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivelyTokenHandler\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivelyTokenHandler(context: ExecutionContext, type: HasTokenExpiredType)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization.guard.ts:71\n                \n            \n\n\n            \n                \n                    Can activel token handler.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        NestJS execution context\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                HasTokenExpiredType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Token validate type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHasAuthorization\n                        \n                        \n                    \n                \n            \n            \n                \ngetHasAuthorization(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization.guard.ts:48\n                \n            \n\n\n            \n                \n                    Get token has need validate.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        NextJS execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHasAuthorizationType\n                        \n                        \n                    \n                \n            \n            \n                \ngetHasAuthorizationType(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization.guard.ts:59\n                \n            \n\n\n            \n                \n                    Get token validate type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        NestJS execution context\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            initializeContext\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initializeContext(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization.guard.ts:88\n                \n            \n\n\n            \n                \n                    Initialzd Socfony execution context.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        NestJS execution context\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolveContext\n                        \n                        \n                    \n                \n            \n            \n                \nresolveContext(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization.guard.ts:36\n                \n            \n\n\n            \n                \n                    Resolver context.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        NestJS execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IContext\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { GqlContextType, GqlExecutionContext } from '@nestjs/graphql';\nimport { PrismaClient } from '@prisma/client';\nimport { Request } from 'express';\nimport { AuthorizationTokenService } from './authorization-token/authorization-token.service';\nimport {\n  AUTH_METADATA_HAS_AUTHORIZATION,\n  AUTH_METADATA_HAS_AUTHORIZATION_TYPE,\n} from './authorization-token/constants';\nimport { HasTokenExpiredType } from './authorization-token/enums';\nimport { UNAUTHORIZED } from './constants';\nimport { ExecutionContext as IContext } from './execution-context';\n\n/**\n * Authorization guard.\n */\n@Injectable()\nexport class AuthorizationGuard implements CanActivate {\n  /**\n   * Create Authorization guard.\n   * @param reflector NestJS core reflector.\n   * @param authorizationTokenService Authorization token service.\n   * @param prismaClient Prisma Client.\n   */\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly authorizationTokenService: AuthorizationTokenService,\n    private readonly prismaClient: PrismaClient,\n  ) {}\n\n  /**\n   * Resolver context.\n   * @param context NestJS execution context.\n   */\n  resolveContext(context: ExecutionContext): IContext {\n    if (context.getType() === 'graphql') {\n      return GqlExecutionContext.create(context).getContext();\n    }\n\n    return context.switchToHttp().getRequest().context;\n  }\n\n  /**\n   * Get token has need validate.\n   * @param context NextJS execution context.\n   */\n  getHasAuthorization(context: ExecutionContext) {\n    return this.reflector.get(\n      AUTH_METADATA_HAS_AUTHORIZATION,\n      context.getHandler(),\n    );\n  }\n\n  /**\n   * Get token validate type.\n   * @param context NestJS execution context\n   */\n  getHasAuthorizationType(context: ExecutionContext) {\n    return this.reflector.get(\n      AUTH_METADATA_HAS_AUTHORIZATION_TYPE,\n      context.getHandler(),\n    );\n  }\n\n  /**\n   * Can activel token handler.\n   * @param context NestJS execution context\n   * @param type Token validate type.\n   */\n  canActivelyTokenHandler(\n    context: ExecutionContext,\n    type: HasTokenExpiredType,\n  ): boolean {\n    const { authorizationToken, user } = this.resolveContext(context);\n    const has = !this.authorizationTokenService.hasTokenExpired(\n      authorizationToken,\n      type,\n    );\n\n    return user && has;\n  }\n\n  /**\n   * Initialzd Socfony execution context.\n   * @param context NestJS execution context\n   */\n  async initializeContext(context: ExecutionContext) {\n    if (context.getType() === 'http') {\n      return await IContext.create(\n        this.prismaClient,\n        context.switchToHttp().getRequest(),\n      );\n    }\n  }\n\n  /**\n   * Can activate guard.\n   * @param context NestJS execution context.\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    await this.initializeContext(context);\n\n    // If Don't validate or verified\n    if (!this.getHasAuthorization(context)) return true;\n\n    // get `Authorization` token validate type\n    const type = this.getHasAuthorizationType(context);\n\n    if (\n      !this.canActivelyTokenHandler(context, type || HasTokenExpiredType.AUTH)\n    ) {\n      throw new Error(UNAUTHORIZED);\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationTokenEntity.html":{"url":"classes/AuthorizationTokenEntity.html","title":"class - AuthorizationTokenEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationTokenEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization-token/entities/authorization-token.entity.ts\n        \n\n            \n                Description\n            \n            \n                HTTP endpoint authorization entity.\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiredAt\n                            \n                            \n                                refreshExpiredAt\n                            \n                            \n                                token\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expiredAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Token expired date'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/entities/authorization-token.entity.ts:47\n                            \n                        \n\n                \n                    \n                        Token expired date.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshExpiredAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Token on refresh expired date'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/entities/authorization-token.entity.ts:55\n                            \n                        \n\n                \n                    \n                        Token on refresh expired date.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User API endpoit authorization token.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/entities/authorization-token.entity.ts:39\n                            \n                        \n\n                \n                    \n                        User API endpoit authorization token.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Logged Viewer entity'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/entities/authorization-token.entity.ts:31\n                            \n                        \n\n                \n                    \n                        Logged User\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Login user ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/entities/authorization-token.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Logged user id.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\nimport { Prisma, User } from '@prisma/client';\nimport { ViewerEntity } from 'src/user/entities/viewer.entity';\n/**\n * HTTP endpoint authorization entity.\n */\n@ObjectType({\n  description: 'HTTP endpoint authorization entity.',\n})\nexport class AuthorizationTokenEntity\n  implements\n    Prisma.AuthorizationTokenGetPayload {\n  /**\n   * Logged user id.\n   */\n  @Field((type) => ID, {\n    description: 'Login user ID',\n  })\n  userId: string;\n\n  /**\n   * Logged User\n   */\n  @Field((type) => ViewerEntity, {\n    description: 'Logged Viewer entity',\n  })\n  user: User;\n\n  /**\n   * User API endpoit authorization token.\n   */\n  @Field((type) => String, {\n    description: 'User API endpoit authorization token.',\n  })\n  token: string;\n\n  /**\n   * Token expired date.\n   */\n  @Field((type) => Date, {\n    description: 'Token expired date',\n  })\n  expiredAt: Date;\n\n  /**\n   * Token on refresh expired date.\n   */\n  @Field((type) => Date, {\n    description: 'Token on refresh expired date',\n  })\n  refreshExpiredAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationTokenEntityResolver.html":{"url":"classes/AuthorizationTokenEntityResolver.html","title":"class - AuthorizationTokenEntityResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationTokenEntityResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization-token/authorization-token.resolver.ts\n        \n\n            \n                Description\n            \n            \n                AuthorizationTokenEntity resolver.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authorizationToken\n                            \n                            \n                                    Async\n                                createAuthorizationToken\n                            \n                            \n                                refreshAuthorizationToken\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authorizationTokenService: AuthorizationTokenService, prisma: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/authorization-token/authorization-token.resolver.ts:29\n                            \n                        \n\n                \n                    \n                            Create Authorization resolver.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authorizationTokenService\n                                                  \n                                                        \n                                                                        AuthorizationTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authorization token service.\n\n                                                        \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            authorizationToken\n                        \n                        \n                    \n                \n            \n            \n                \nauthorizationToken(context: ExecutionContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {description: 'Query HTTP endpoint AuthorizationTokenEntity'})@Authorization({hasAuthorization: true, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/authorization-token/authorization-token.resolver.ts:72\n                \n            \n\n\n            \n                \n                    Query HTTP endpoint AuthorizationTokenEntity\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        App runner execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAuthorizationToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAuthorizationToken(args: CreateAuthorizationTokenArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Create AuthorizationTokenEntity'})\n                \n            \n\n            \n                \n                    Defined in src/authorization-token/authorization-token.resolver.ts:83\n                \n            \n\n\n            \n                \n                    Create AuthorizationTokenEntity\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                CreateAuthorizationTokenArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Create AuthorizationTokenEntity args.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            refreshAuthorizationToken\n                        \n                        \n                    \n                \n            \n            \n                \nrefreshAuthorizationToken(context: ExecutionContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Refresh HTTP endpoint authorization token entity.'})@Authorization({hasAuthorization: true, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/authorization-token/authorization-token.resolver.ts:127\n                \n            \n\n\n            \n                \n                    Refresh HTTP endpoint authorization token entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            user\n                        \n                        \n                    \n                \n            \n            \n                \nuser(token: Prisma.AuthorizationTokenGetPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Field(undefined)\n                \n            \n\n            \n                \n                    Defined in src/authorization-token/authorization-token.resolver.ts:45\n                \n            \n\n\n            \n                \n                    Resolve AuthorizationTokenEntity user field.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                Prisma.AuthorizationTokenGetPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        HTTP endpoint AuthorizationToken\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Args,\n  Field,\n  Mutation,\n  Parent,\n  Query,\n  Resolver,\n} from '@nestjs/graphql';\nimport { Prisma, PrismaClient } from '@prisma/client';\nimport { Authorization } from 'src/authorization.decorator';\nimport {\n  AUTHORIZATION_TOKEN_CREATE_USER_WHERE_ALLOW_ONE,\n  USER_NOT_FOUND,\n} from 'src/constants';\nimport { Context } from 'src/context.decorator';\nimport { ExecutionContext } from 'src/execution-context';\nimport { IDHelper } from 'src/helper';\nimport { ViewerEntity } from 'src/user/entities/viewer.entity';\nimport { UserSecurityCompareType } from 'src/user/enums';\nimport { AuthorizationTokenService } from './authorization-token.service';\nimport { CreateAuthorizationTokenArgs } from './dto/create-authorization-token.args';\nimport { AuthorizationTokenEntity } from './entities/authorization-token.entity';\nimport { HasTokenExpiredType } from './enums';\n\n/**\n * AuthorizationTokenEntity resolver.\n */\n@Resolver(() => AuthorizationTokenEntity)\nexport class AuthorizationTokenEntityResolver {\n  /**\n   * Create Authorization resolver.\n   * @param authorizationTokenService Authorization token service.\n   * @param prisma Prisma client.\n   */\n  constructor(\n    private readonly authorizationTokenService: AuthorizationTokenService,\n    private readonly prisma: PrismaClient,\n  ) {}\n\n  /**\n   * Resolve AuthorizationTokenEntity user field.\n   * @param token HTTP endpoint AuthorizationToken\n   */\n  @Field(() => ViewerEntity)\n  user(\n    @Parent()\n    token: Prisma.AuthorizationTokenGetPayload,\n  ) {\n    const { user } = token;\n    if (user) {\n      return user;\n    }\n\n    return this.prisma.user.findUnique({\n      where: { id: token.userId },\n    });\n  }\n\n  /**\n   * Query HTTP endpoint AuthorizationTokenEntity\n   * @param context App runner execution context.\n   */\n  @Query(() => AuthorizationTokenEntity, {\n    description: 'Query HTTP endpoint AuthorizationTokenEntity',\n  })\n  @Authorization({\n    hasAuthorization: true,\n    type: HasTokenExpiredType.AUTH,\n  })\n  authorizationToken(@Context() context: ExecutionContext) {\n    return context.authorizationToken;\n  }\n\n  /**\n   * Create AuthorizationTokenEntity\n   * @param args Create `AuthorizationTokenEntity` args.\n   */\n  @Mutation(() => AuthorizationTokenEntity, {\n    description: 'Create AuthorizationTokenEntity',\n  })\n  async createAuthorizationToken(\n    @Args({\n      type: () => CreateAuthorizationTokenArgs,\n    })\n    args: CreateAuthorizationTokenArgs,\n  ) {\n    const { type, user: where, security } = args;\n    if (Object.keys(where).length > 1) {\n      throw new Error(AUTHORIZATION_TOKEN_CREATE_USER_WHERE_ALLOW_ONE);\n    }\n\n    let user = await this.prisma.user.findUnique({\n      where,\n      rejectOnNotFound: false,\n    });\n    if (type === UserSecurityCompareType.SMS_CODE && !user && where.phone) {\n      user = await this.prisma.user.create({\n        data: {\n          id: IDHelper.id(64),\n          phone: where.phone,\n        },\n      });\n    } else if (!user) {\n      throw new Error(USER_NOT_FOUND);\n    }\n\n    return this.authorizationTokenService.createTokenWithSecurity(\n      user,\n      type,\n      security,\n    );\n  }\n\n  /**\n   * Refresh HTTP endpoint authorization token entity.\n   * @param client token query Prisma client.\n   */\n  @Mutation((returns) => AuthorizationTokenEntity, {\n    description: 'Refresh HTTP endpoint authorization token entity.',\n  })\n  @Authorization({\n    hasAuthorization: true,\n    type: HasTokenExpiredType.REFRESH,\n  })\n  refreshAuthorizationToken(@Context() context: ExecutionContext) {\n    return this.authorizationTokenService.refreshAuthorizationToken(\n      context.authorizationToken,\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthorizationTokenModule.html":{"url":"modules/AuthorizationTokenModule.html","title":"module - AuthorizationTokenModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthorizationTokenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthorizationTokenModule\n\n\n\ncluster_AuthorizationTokenModule_providers\n\n\n\ncluster_AuthorizationTokenModule_exports\n\n\n\ncluster_AuthorizationTokenModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthorizationTokenModule\n\nAuthorizationTokenModule\n\nAuthorizationTokenModule -->\n\nPrismaModule->AuthorizationTokenModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthorizationTokenModule -->\n\nUserModule->AuthorizationTokenModule\n\n\n\n\n\nAuthorizationTokenService \n\nAuthorizationTokenService \n\nAuthorizationTokenService  -->\n\nAuthorizationTokenModule->AuthorizationTokenService \n\n\n\n\n\nAuthorizationTokenService\n\nAuthorizationTokenService\n\nAuthorizationTokenModule -->\n\nAuthorizationTokenService->AuthorizationTokenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authorization-token/authorization-token.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Authorization token module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizationTokenService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizationTokenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma';\nimport { UserModule } from 'src/user/user.module';\nimport { AuthorizationTokenEntityResolver } from './authorization-token.resolver';\nimport { AuthorizationTokenService } from './authorization-token.service';\n\n/**\n * Authorization token module.\n */\n@Global()\n@Module({\n  imports: [PrismaModule, UserModule],\n  providers: [AuthorizationTokenService, AuthorizationTokenEntityResolver],\n  exports: [AuthorizationTokenService],\n})\nexport class AuthorizationTokenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizationTokenService.html":{"url":"injectables/AuthorizationTokenService.html","title":"injectable - AuthorizationTokenService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizationTokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization-token/authorization-token.service.ts\n        \n\n            \n                Description\n            \n            \n                Authorization token service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTokenWithSecurity\n                            \n                            \n                                    Async\n                                createUserAuthorizationToken\n                            \n                            \n                                    Async\n                                getTokenExpiredIn\n                            \n                            \n                                hasTokenExpired\n                            \n                            \n                                    Async\n                                refreshAuthorizationToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaClient, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/authorization-token/authorization-token.service.ts:25\n                            \n                        \n\n                \n                    \n                            Create Authotization token service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTokenWithSecurity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTokenWithSecurity(user: User, type: UserSecurityCompareType, security: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization-token/authorization-token.service.ts:121\n                \n            \n\n\n            \n                \n                    Create token with security.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Creathe token with user.\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                UserSecurityCompareType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        creat compare security type.\n\n                                    \n                                \n                                \n                                    security\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        security object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUserAuthorizationToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserAuthorizationToken(user: User | string)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization-token/authorization-token.service.ts:86\n                \n            \n\n\n            \n                \n                    Create authorization token object for user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Create authoprization token object user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTokenExpiredIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokenExpiredIn()\n                \n            \n\n\n            \n                \n                    Defined in src/authorization-token/authorization-token.service.ts:39\n                \n            \n\n\n            \n                \n                    Get token expired in validity period.\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasTokenExpired\n                        \n                        \n                    \n                \n            \n            \n                \nhasTokenExpired(token: AuthorizationToken, type: HasTokenExpiredType)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization-token/authorization-token.service.ts:69\n                \n            \n\n\n            \n                \n                    Has authorization token expired.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                AuthorizationToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    type\n                                    \n                                                HasTokenExpiredType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Validate type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            refreshAuthorizationToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshAuthorizationToken(authorizationToken: AuthorizationToken)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization-token/authorization-token.service.ts:145\n                \n            \n\n\n            \n                \n                    Refresh authorization token object to database.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    authorizationToken\n                                    \n                                                AuthorizationToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Await refresh authorization token object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthorizationToken, PrismaClient, User } from '@prisma/client';\nimport * as dayjs from 'dayjs';\nimport {\n  AUTHORIZATION_TOKEN_NOT_FOUND,\n  SECURITY_COMPARE_FAILED,\n} from 'src/constants';\nimport { IDHelper } from 'src/helper';\nimport { UserService } from 'src/user/user.service';\nimport { UserSecurityCompareType } from 'src/user/enums';\nimport {\n  AUTH_TOKEN_DEFAULT_EXPIRED_IN,\n  AUTH_TOKEN_DEFAULT_EXPIRED_UNIT,\n  AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_IN,\n  AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_UNIT,\n  AUTH_TOKEN_VVALIDITY_PERIOD_KEY,\n} from './constants';\nimport { HasTokenExpiredType } from './enums';\nimport { AuthorizationTokenValidityPeriod } from './types';\n\n/**\n * Authorization token service.\n */\n@Injectable()\nexport class AuthorizationTokenService {\n  /**\n   * Create Authotization token service.\n   * @param prisma Prisma client.\n   * @param userService User service.\n   */\n  constructor(\n    private readonly prisma: PrismaClient,\n    private readonly userService: UserService,\n  ) {}\n\n  /**\n   * Get token expired in validity period.\n   */\n  async getTokenExpiredIn(): Promise {\n    const setting = await this.prisma.setting.findUnique({\n      where: {\n        namespace_name: {\n          namespace: 'system',\n          name: AUTH_TOKEN_VVALIDITY_PERIOD_KEY,\n        },\n      },\n      rejectOnNotFound: false,\n    });\n    const { value = {} } = setting || {};\n    const { expiredIn = {}, refreshExpiredIn = {} } = value as any;\n\n    return {\n      expiredIn: {\n        value: expiredIn.value || AUTH_TOKEN_DEFAULT_EXPIRED_IN,\n        unit: expiredIn.unit || AUTH_TOKEN_DEFAULT_EXPIRED_UNIT,\n      },\n      refreshExpiredIn: {\n        value: refreshExpiredIn.value || AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_IN,\n        unit: refreshExpiredIn.unit || AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_UNIT,\n      },\n    };\n  }\n\n  /**\n   * Has authorization token expired.\n   * @param client `AuthotizationToken` query Prisma client.\n   * @param type Validate type.\n   */\n  hasTokenExpired(\n    token: AuthorizationToken,\n    type: HasTokenExpiredType,\n  ): boolean {\n    if (!token) return true;\n    const expiredAt =\n      type === HasTokenExpiredType.AUTH\n        ? token.expiredAt\n        : token.refreshExpiredAt;\n\n    return !expiredAt || expiredAt.getTime()  {\n    const setting = await this.getTokenExpiredIn();\n    const [token] = await this.prisma.$transaction([\n      this.prisma.authorizationToken.create({\n        data: {\n          userId: typeof user === 'string' ? user : user.id,\n          token: IDHelper.id(128),\n          expiredAt: dayjs()\n            .add(setting.expiredIn.value, setting.expiredIn.unit)\n            .toDate(),\n          refreshExpiredAt: dayjs()\n            .add(setting.refreshExpiredIn.value, setting.refreshExpiredIn.unit)\n            .toDate(),\n        },\n      }),\n      this.prisma.authorizationToken.deleteMany({\n        where: {\n          refreshExpiredAt: {\n            lte: dayjs().add(10, 'minutes').toDate(),\n          },\n        },\n      }),\n    ]);\n\n    return token;\n  }\n\n  /**\n   * Create token with security.\n   * @param user Creathe token with user.\n   * @param type creat compare security type.\n   * @param security security object.\n   */\n  async createTokenWithSecurity(\n    user: User,\n    type: UserSecurityCompareType,\n    security: string,\n  ) {\n    const compared = await this.userService.compareSecurity(\n      user,\n      type,\n      security,\n    );\n    if (compared) {\n      if (compared instanceof Function) {\n        compared();\n      }\n      return this.createUserAuthorizationToken(user);\n    }\n\n    throw new Error(SECURITY_COMPARE_FAILED);\n  }\n\n  /**\n   * Refresh authorization token object to database.\n   * @param authorizationToken Await refresh authorization token object.\n   */\n  async refreshAuthorizationToken(\n    authorizationToken: AuthorizationToken,\n  ): Promise {\n    const setting = await this.getTokenExpiredIn();\n    // If authorization token not found, throw `not found` error.\n    if (!authorizationToken) {\n      throw new Error(AUTHORIZATION_TOKEN_NOT_FOUND);\n\n      // If token is expired, update to new token.\n    } else if (authorizationToken.expiredAt.getTime()  fiveMinutesDate.getTime()) {\n      await this.prisma.authorizationToken.update({\n        where: { token: authorizationToken.token },\n        data: {\n          expiredAt: fiveMinutesDate,\n          refreshExpiredAt: new Date(),\n        },\n      });\n    }\n\n    return this.createUserAuthorizationToken(authorizationToken.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthorizationTokenValidityPeriod.html":{"url":"interfaces/AuthorizationTokenValidityPeriod.html","title":"interface - AuthorizationTokenValidityPeriod","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthorizationTokenValidityPeriod\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization-token/types.ts\n        \n\n            \n                Description\n            \n            \n                认证Token有效期\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        expiredIn\n                                \n                                \n                                        refreshExpiredIn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expiredIn\n                                    \n                                \n                                \n                                    \n                                        expiredIn:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    token 生命有效期\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshExpiredIn\n                                    \n                                \n                                \n                                    \n                                        refreshExpiredIn:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token 用作刷新生命周期\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UnitType } from 'dayjs';\n\n/**\n * 认证Token有效期\n */\nexport interface AuthorizationTokenValidityPeriod {\n  /**\n   * token 生命有效期\n   */\n  expiredIn: {\n    value: number;\n    unit: UnitType;\n  };\n\n  /**\n   * Token 用作刷新生命周期\n   */\n  refreshExpiredIn: {\n    value: number;\n    unit: UnitType;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthorizationTokenArgs.html":{"url":"classes/CreateAuthorizationTokenArgs.html","title":"class - CreateAuthorizationTokenArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthorizationTokenArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization-token/dto/create-authorization-token.args.ts\n        \n\n            \n                Description\n            \n            \n                Create authorization token args\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                security\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            security\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Create AuthorizationToken security value'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/dto/create-authorization-token.args.ts:32\n                            \n                        \n\n                \n                    \n                        Create AuthorizationToken security value\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserSecurityCompareType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Create AuthorizationToken security type'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/dto/create-authorization-token.args.ts:24\n                            \n                        \n\n                \n                    \n                        Create AuthorizationToken security type\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserWhereUniqueInput\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User find where unique input'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/dto/create-authorization-token.args.ts:16\n                            \n                        \n\n                \n                    \n                        User find where unique input\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field } from '@nestjs/graphql';\nimport { UserWhereUniqueInput } from 'src/user/dto';\nimport { UserSecurityCompareType } from 'src/user/enums';\n\n/**\n * Create authorization token args\n */\n@ArgsType()\nexport class CreateAuthorizationTokenArgs {\n  /**\n   * User find where unique input\n   */\n  @Field(() => UserWhereUniqueInput, {\n    description: 'User find where unique input',\n  })\n  user: UserWhereUniqueInput;\n\n  /**\n   * Create AuthorizationToken security type\n   */\n  @Field(() => UserSecurityCompareType, {\n    description: 'Create AuthorizationToken security type',\n  })\n  type: UserSecurityCompareType;\n\n  /**\n   * Create AuthorizationToken security value\n   */\n  @Field(() => String, {\n    description: 'Create AuthorizationToken security value',\n  })\n  security: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExecutionContext.html":{"url":"classes/ExecutionContext.html","title":"class - ExecutionContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExecutionContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/execution-context.ts\n        \n\n            \n                Description\n            \n            \n                Socfony execution context.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                authorizationToken\n                            \n                            \n                                    Public\n                                request\n                            \n                            \n                                    Public\n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                    Static\n                                getAuthorizationToken\n                            \n                            \n                                    Private\n                                    Static\n                                getHttpAuthorization\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor(request: Request, authorizationToken?: AuthorizationToken, user?: User)\n                    \n                \n                        \n                            \n                                Defined in src/execution-context.ts:7\n                            \n                        \n\n                \n                    \n                            Create a execution context.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Express request.\n\n                                                        \n                                                \n                                                \n                                                        authorizationToken\n                                                  \n                                                        \n                                                                        AuthorizationToken\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Authorization token\n\n                                                        \n                                                \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    User\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                User.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            authorizationToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AuthorizationToken\n\n                        \n                    \n                        \n                            \n                                    Defined in src/execution-context.ts:16\n                            \n                        \n\n                \n                    \n                        Authorization token\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Request\n\n                        \n                    \n                        \n                            \n                                    Defined in src/execution-context.ts:15\n                            \n                        \n\n                \n                    \n                        Express request.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     User\n\n                        \n                    \n                        \n                            \n                                    Defined in src/execution-context.ts:17\n                            \n                        \n\n                \n                    \n                        User.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(prismaClient: PrismaClient, request: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/execution-context.ts:24\n                \n            \n\n\n            \n                \n                    Create kernel context.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    prismaClient\n                                    \n                                            PrismaClient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Express request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            getAuthorizationToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthorizationToken(prismaClient: PrismaClient, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/execution-context.ts:73\n                \n            \n\n\n            \n                \n                    Get AuthorizationToken\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    prismaClient\n                                    \n                                            PrismaClient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Token string.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            getHttpAuthorization\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHttpAuthorization(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/execution-context.ts:54\n                \n            \n\n\n            \n                \n                    Get HTTP endpoint Authorization header value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Express request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Request } from 'express';\nimport { AuthorizationToken, Prisma, PrismaClient, User } from '@prisma/client';\n\n/**\n * Socfony execution context.\n */\nexport class ExecutionContext {\n  /**\n   * Create a execution context.\n   * @param request Express request.\n   * @param authorizationToken Authorization token\n   * @param user User.\n   */\n  private constructor(\n    public request: Request,\n    public authorizationToken?: AuthorizationToken,\n    public user?: User,\n  ) {}\n\n  /**\n   * Create kernel context.\n   * @param request Express request.\n   */\n  static async create(\n    prismaClient: PrismaClient,\n    request: Request,\n  ): Promise {\n    const token = this.getHttpAuthorization(request);\n    if (\n      request.context &&\n      request.context.authorizationToken?.token === token\n    ) {\n      return request.context;\n    }\n\n    const authorizationToken = await this.getAuthorizationToken(\n      prismaClient,\n      token,\n    );\n    const context = new ExecutionContext(\n      request,\n      authorizationToken,\n      authorizationToken?.user,\n    );\n    context.request.context = request.context = context;\n\n    return context;\n  }\n\n  /**\n   * Get HTTP endpoint `Authorization` header value.\n   * @param request Express request.\n   */\n  private static getHttpAuthorization(request: Request): string {\n    const key = 'Authorization';\n    if (request.header instanceof Function) {\n      return request.header(key);\n    }\n\n    const headers = request.headers;\n    let token = headers[key.toLowerCase()];\n    if (!token || !token.length) {\n      token = headers[key];\n    }\n\n    return Array.isArray(token) ? token.pop() : token;\n  }\n\n  /**\n   * Get `AuthorizationToken`\n   * @param token Token string.\n   */\n  private static getAuthorizationToken(\n    prismaClient: PrismaClient,\n    token: string,\n  ): Promise> {\n    if (token)\n      return prismaClient.authorizationToken.findUnique({\n        where: { token: token },\n        include: { user: true },\n        rejectOnNotFound: false,\n      });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MomentAudioMedia.html":{"url":"classes/MomentAudioMedia.html","title":"class - MomentAudioMedia","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MomentAudioMedia\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/moment/entities/media.entity.ts\n        \n\n            \n                Description\n            \n            \n                Audio media.\n\n            \n\n            \n                Extends\n            \n            \n                        MomentMediaCommon\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                audio\n                            \n                            \n                                    Optional\n                                cover\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            audio\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Audio path'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/media.entity.ts:78\n                            \n                        \n\n                \n                    \n                        Media video path.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            cover\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Audio cover', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/media.entity.ts:72\n                            \n                        \n\n                \n                    \n                        Media cover path.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MomentMediaType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Media type.'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         MomentMediaCommon\n\n                                \n                            \n                        \n                            \n                                    Defined in         MomentMediaCommon:36\n\n                            \n                        \n\n                \n                    \n                        Media type.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  createUnionType,\n  Field,\n  InterfaceType,\n  ObjectType,\n  registerEnumType,\n} from '@nestjs/graphql';\nimport { MEDIA_TYPE_DONT_SUPPORTED } from 'src/constants';\n\n/**\n * Media type.\n */\nexport enum MomentMediaType {\n  VIDEO,\n  IMAGE,\n  AUDIO,\n}\nregisterEnumType(MomentMediaType, {\n  name: 'MomentMediaType',\n  description: 'Media type.',\n});\n\n/**\n * Media common.\n */\n@InterfaceType({\n  description: 'Media common',\n})\nexport class MomentMediaCommon {\n  /**\n   * Media type.\n   */\n  @Field(() => MomentMediaType, {\n    description: 'Media type.',\n  })\n  type: MomentMediaType;\n}\n\n/**\n * Video media.\n */\n@ObjectType({\n  implements: [MomentMediaCommon],\n  description: 'Video media',\n})\nexport class MomentVideoMedia extends MomentMediaCommon {\n  /**\n   * Media cover path.\n   */\n  @Field(() => String, { description: 'Video cover' })\n  cover: string;\n\n  /**\n   * Media video path.\n   */\n  @Field(() => String, { description: 'Video path' })\n  video: string;\n}\n\n/**\n * Audio media.\n */\n@ObjectType({\n  implements: [MomentMediaCommon],\n  description: 'Audio media.',\n})\nexport class MomentAudioMedia extends MomentMediaCommon {\n  /**\n   * Media cover path.\n   */\n  @Field(() => String, { description: 'Audio cover', nullable: true })\n  cover?: string;\n\n  /**\n   * Media video path.\n   */\n  @Field(() => String, { description: 'Audio path' })\n  audio: string;\n}\n\n/**\n * Image media.\n */\n@ObjectType({\n  implements: [MomentMediaCommon],\n  description: 'Image media.',\n})\nexport class MomentImageMedia extends MomentMediaCommon {\n  @Field(() => [String], { description: 'Images' })\n  images: string[];\n}\n\n/**\n * Moment media union type.\n */\nexport const MomentMedia = createUnionType({\n  name: 'MomentMedia',\n  types: () => [MomentAudioMedia, MomentImageMedia, MomentVideoMedia],\n  description: 'Moment media.',\n  resolveType(value: MomentMediaCommon) {\n    switch (value?.type) {\n      case MomentMediaType.AUDIO:\n        return MomentAudioMedia;\n      case MomentMediaType.IMAGE:\n        return MomentImageMedia;\n      case MomentMediaType.VIDEO:\n        return MomentVideoMedia;\n      default:\n        throw new Error(MEDIA_TYPE_DONT_SUPPORTED);\n    }\n  },\n});\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MomentEntity.html":{"url":"classes/MomentEntity.html","title":"class - MomentEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MomentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/moment/entities/moment.entity.ts\n        \n\n            \n                Description\n            \n            \n                Moment entity.\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                id\n                            \n                            \n                                media\n                            \n                            \n                                owner\n                            \n                            \n                                ownerId\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Moment content'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/moment.entity.ts:35\n                            \n                        \n\n                \n                    \n                        Moment text content\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Moment created at'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/moment.entity.ts:47\n                            \n                        \n\n                \n                    \n                        Moment created at\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Moment deleted at'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/moment.entity.ts:53\n                            \n                        \n\n                \n                    \n                        Moment deleted at\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'The moment ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/moment.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Moment ID\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            media\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Prisma.JsonValue\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Moment media'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/moment.entity.ts:41\n                            \n                        \n\n                \n                    \n                        Moment media\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            owner\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'The moment owner'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/moment.entity.ts:65\n                            \n                        \n\n                \n                    \n                        Moment owner\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ownerId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Moment owner ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/moment.entity.ts:59\n                            \n                        \n\n                \n                    \n                        Moment owner ID\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Moment title', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/moment.entity.ts:29\n                            \n                        \n\n                \n                    \n                        Moment title\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, GraphQLISODateTime, ID, ObjectType } from '@nestjs/graphql';\nimport { Prisma, User } from '@prisma/client';\nimport { UserUnion } from 'src/user/entities/user.union';\nimport { MomentMedia } from './media.entity';\n\n/**\n * Moment entity.\n */\n@ObjectType({\n  description: 'Moment entity',\n})\nexport class MomentEntity\n  implements\n    Prisma.MomentGetPayload {\n  /**\n   * Moment ID\n   */\n  @Field(() => ID, { description: 'The moment ID' })\n  id: string;\n\n  /**\n   * Moment title\n   */\n  @Field(() => String, { description: 'Moment title', nullable: true })\n  title: string;\n\n  /**\n   * Moment text content\n   */\n  @Field(() => String, { description: 'Moment content' })\n  content: string;\n\n  /**\n   * Moment media\n   */\n  @Field(() => MomentMedia, { description: 'Moment media' })\n  media: Prisma.JsonValue;\n\n  /**\n   * Moment created at\n   */\n  @Field(() => GraphQLISODateTime, { description: 'Moment created at' })\n  createdAt: Date;\n\n  /**\n   * Moment deleted at\n   */\n  @Field(() => GraphQLISODateTime, { description: 'Moment deleted at' })\n  deletedAt: Date;\n\n  /**\n   * Moment owner ID\n   */\n  @Field(() => ID, { description: 'Moment owner ID' })\n  ownerId: string;\n\n  /**\n   * Moment owner\n   */\n  @Field(() => UserUnion, { description: 'The moment owner' })\n  owner: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MomentImageMedia.html":{"url":"classes/MomentImageMedia.html","title":"class - MomentImageMedia","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MomentImageMedia\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/moment/entities/media.entity.ts\n        \n\n            \n                Description\n            \n            \n                Image media.\n\n            \n\n            \n                Extends\n            \n            \n                        MomentMediaCommon\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                images\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            images\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Images'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/media.entity.ts:90\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MomentMediaType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Media type.'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         MomentMediaCommon\n\n                                \n                            \n                        \n                            \n                                    Defined in         MomentMediaCommon:36\n\n                            \n                        \n\n                \n                    \n                        Media type.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  createUnionType,\n  Field,\n  InterfaceType,\n  ObjectType,\n  registerEnumType,\n} from '@nestjs/graphql';\nimport { MEDIA_TYPE_DONT_SUPPORTED } from 'src/constants';\n\n/**\n * Media type.\n */\nexport enum MomentMediaType {\n  VIDEO,\n  IMAGE,\n  AUDIO,\n}\nregisterEnumType(MomentMediaType, {\n  name: 'MomentMediaType',\n  description: 'Media type.',\n});\n\n/**\n * Media common.\n */\n@InterfaceType({\n  description: 'Media common',\n})\nexport class MomentMediaCommon {\n  /**\n   * Media type.\n   */\n  @Field(() => MomentMediaType, {\n    description: 'Media type.',\n  })\n  type: MomentMediaType;\n}\n\n/**\n * Video media.\n */\n@ObjectType({\n  implements: [MomentMediaCommon],\n  description: 'Video media',\n})\nexport class MomentVideoMedia extends MomentMediaCommon {\n  /**\n   * Media cover path.\n   */\n  @Field(() => String, { description: 'Video cover' })\n  cover: string;\n\n  /**\n   * Media video path.\n   */\n  @Field(() => String, { description: 'Video path' })\n  video: string;\n}\n\n/**\n * Audio media.\n */\n@ObjectType({\n  implements: [MomentMediaCommon],\n  description: 'Audio media.',\n})\nexport class MomentAudioMedia extends MomentMediaCommon {\n  /**\n   * Media cover path.\n   */\n  @Field(() => String, { description: 'Audio cover', nullable: true })\n  cover?: string;\n\n  /**\n   * Media video path.\n   */\n  @Field(() => String, { description: 'Audio path' })\n  audio: string;\n}\n\n/**\n * Image media.\n */\n@ObjectType({\n  implements: [MomentMediaCommon],\n  description: 'Image media.',\n})\nexport class MomentImageMedia extends MomentMediaCommon {\n  @Field(() => [String], { description: 'Images' })\n  images: string[];\n}\n\n/**\n * Moment media union type.\n */\nexport const MomentMedia = createUnionType({\n  name: 'MomentMedia',\n  types: () => [MomentAudioMedia, MomentImageMedia, MomentVideoMedia],\n  description: 'Moment media.',\n  resolveType(value: MomentMediaCommon) {\n    switch (value?.type) {\n      case MomentMediaType.AUDIO:\n        return MomentAudioMedia;\n      case MomentMediaType.IMAGE:\n        return MomentImageMedia;\n      case MomentMediaType.VIDEO:\n        return MomentVideoMedia;\n      default:\n        throw new Error(MEDIA_TYPE_DONT_SUPPORTED);\n    }\n  },\n});\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MomentMediaCommon.html":{"url":"classes/MomentMediaCommon.html","title":"class - MomentMediaCommon","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MomentMediaCommon\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/moment/entities/media.entity.ts\n        \n\n            \n                Description\n            \n            \n                Media common.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MomentMediaType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Media type.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/media.entity.ts:36\n                            \n                        \n\n                \n                    \n                        Media type.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  createUnionType,\n  Field,\n  InterfaceType,\n  ObjectType,\n  registerEnumType,\n} from '@nestjs/graphql';\nimport { MEDIA_TYPE_DONT_SUPPORTED } from 'src/constants';\n\n/**\n * Media type.\n */\nexport enum MomentMediaType {\n  VIDEO,\n  IMAGE,\n  AUDIO,\n}\nregisterEnumType(MomentMediaType, {\n  name: 'MomentMediaType',\n  description: 'Media type.',\n});\n\n/**\n * Media common.\n */\n@InterfaceType({\n  description: 'Media common',\n})\nexport class MomentMediaCommon {\n  /**\n   * Media type.\n   */\n  @Field(() => MomentMediaType, {\n    description: 'Media type.',\n  })\n  type: MomentMediaType;\n}\n\n/**\n * Video media.\n */\n@ObjectType({\n  implements: [MomentMediaCommon],\n  description: 'Video media',\n})\nexport class MomentVideoMedia extends MomentMediaCommon {\n  /**\n   * Media cover path.\n   */\n  @Field(() => String, { description: 'Video cover' })\n  cover: string;\n\n  /**\n   * Media video path.\n   */\n  @Field(() => String, { description: 'Video path' })\n  video: string;\n}\n\n/**\n * Audio media.\n */\n@ObjectType({\n  implements: [MomentMediaCommon],\n  description: 'Audio media.',\n})\nexport class MomentAudioMedia extends MomentMediaCommon {\n  /**\n   * Media cover path.\n   */\n  @Field(() => String, { description: 'Audio cover', nullable: true })\n  cover?: string;\n\n  /**\n   * Media video path.\n   */\n  @Field(() => String, { description: 'Audio path' })\n  audio: string;\n}\n\n/**\n * Image media.\n */\n@ObjectType({\n  implements: [MomentMediaCommon],\n  description: 'Image media.',\n})\nexport class MomentImageMedia extends MomentMediaCommon {\n  @Field(() => [String], { description: 'Images' })\n  images: string[];\n}\n\n/**\n * Moment media union type.\n */\nexport const MomentMedia = createUnionType({\n  name: 'MomentMedia',\n  types: () => [MomentAudioMedia, MomentImageMedia, MomentVideoMedia],\n  description: 'Moment media.',\n  resolveType(value: MomentMediaCommon) {\n    switch (value?.type) {\n      case MomentMediaType.AUDIO:\n        return MomentAudioMedia;\n      case MomentMediaType.IMAGE:\n        return MomentImageMedia;\n      case MomentMediaType.VIDEO:\n        return MomentVideoMedia;\n      default:\n        throw new Error(MEDIA_TYPE_DONT_SUPPORTED);\n    }\n  },\n});\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MomentModule.html":{"url":"modules/MomentModule.html","title":"module - MomentModule","body":"\n                   \n\n\n\n\n    Modules\n    MomentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MomentModule\n\n\n\ncluster_MomentModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nMomentModule\n\nMomentModule\n\nMomentModule -->\n\nPrismaModule->MomentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/moment/moment.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma';\n\n@Module({\n  imports: [PrismaModule],\n})\nexport class MomentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MomentVideoMedia.html":{"url":"classes/MomentVideoMedia.html","title":"class - MomentVideoMedia","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MomentVideoMedia\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/moment/entities/media.entity.ts\n        \n\n            \n                Description\n            \n            \n                Video media.\n\n            \n\n            \n                Extends\n            \n            \n                        MomentMediaCommon\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cover\n                            \n                            \n                                video\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cover\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Video cover'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/media.entity.ts:51\n                            \n                        \n\n                \n                    \n                        Media cover path.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            video\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Video path'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/moment/entities/media.entity.ts:57\n                            \n                        \n\n                \n                    \n                        Media video path.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MomentMediaType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Media type.'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         MomentMediaCommon\n\n                                \n                            \n                        \n                            \n                                    Defined in         MomentMediaCommon:36\n\n                            \n                        \n\n                \n                    \n                        Media type.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  createUnionType,\n  Field,\n  InterfaceType,\n  ObjectType,\n  registerEnumType,\n} from '@nestjs/graphql';\nimport { MEDIA_TYPE_DONT_SUPPORTED } from 'src/constants';\n\n/**\n * Media type.\n */\nexport enum MomentMediaType {\n  VIDEO,\n  IMAGE,\n  AUDIO,\n}\nregisterEnumType(MomentMediaType, {\n  name: 'MomentMediaType',\n  description: 'Media type.',\n});\n\n/**\n * Media common.\n */\n@InterfaceType({\n  description: 'Media common',\n})\nexport class MomentMediaCommon {\n  /**\n   * Media type.\n   */\n  @Field(() => MomentMediaType, {\n    description: 'Media type.',\n  })\n  type: MomentMediaType;\n}\n\n/**\n * Video media.\n */\n@ObjectType({\n  implements: [MomentMediaCommon],\n  description: 'Video media',\n})\nexport class MomentVideoMedia extends MomentMediaCommon {\n  /**\n   * Media cover path.\n   */\n  @Field(() => String, { description: 'Video cover' })\n  cover: string;\n\n  /**\n   * Media video path.\n   */\n  @Field(() => String, { description: 'Video path' })\n  video: string;\n}\n\n/**\n * Audio media.\n */\n@ObjectType({\n  implements: [MomentMediaCommon],\n  description: 'Audio media.',\n})\nexport class MomentAudioMedia extends MomentMediaCommon {\n  /**\n   * Media cover path.\n   */\n  @Field(() => String, { description: 'Audio cover', nullable: true })\n  cover?: string;\n\n  /**\n   * Media video path.\n   */\n  @Field(() => String, { description: 'Audio path' })\n  audio: string;\n}\n\n/**\n * Image media.\n */\n@ObjectType({\n  implements: [MomentMediaCommon],\n  description: 'Image media.',\n})\nexport class MomentImageMedia extends MomentMediaCommon {\n  @Field(() => [String], { description: 'Images' })\n  images: string[];\n}\n\n/**\n * Moment media union type.\n */\nexport const MomentMedia = createUnionType({\n  name: 'MomentMedia',\n  types: () => [MomentAudioMedia, MomentImageMedia, MomentVideoMedia],\n  description: 'Moment media.',\n  resolveType(value: MomentMediaCommon) {\n    switch (value?.type) {\n      case MomentMediaType.AUDIO:\n        return MomentAudioMedia;\n      case MomentMediaType.IMAGE:\n        return MomentImageMedia;\n      case MomentMediaType.VIDEO:\n        return MomentVideoMedia;\n      default:\n        throw new Error(MEDIA_TYPE_DONT_SUPPORTED);\n    }\n  },\n});\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Prisma module.\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import {\n  ClassProvider,\n  Global,\n  Logger,\n  Module,\n  OnModuleDestroy,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\nimport { PrismaLoggerMiddleware } from './middleware';\n\n/**\n * Prisma class provider\n */\nconst client: ClassProvider = {\n  provide: PrismaClient,\n  useClass: class\n    extends PrismaClient\n    implements OnModuleInit, OnModuleDestroy {\n    private readonly logger = new Logger('Prisma');\n\n    /**\n     * Prisma client constructor\n     */\n    constructor() {\n      super({\n        datasources: {\n          database: { url: process.env.DATABASE_URL },\n        },\n      });\n    }\n\n    /**\n     * NestJS module init hook callback.\n     */\n    async onModuleInit() {\n      // Prisma connect database.\n      await this.$connect();\n\n      // Set Prisma client global logger middleware.\n      this.$use(PrismaLoggerMiddleware(this.logger));\n    }\n\n    /**\n     * NestJS module destory hook callback.\n     */\n    async onModuleDestroy() {\n      // Prisma disconnect database.\n      await this.$disconnect();\n    }\n  },\n};\n\n/**\n * Prisma module.\n */\n@Global()\n@Module({\n  providers: [client],\n  exports: [client],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SecurityModule.html":{"url":"modules/SecurityModule.html","title":"module - SecurityModule","body":"\n                   \n\n\n\n\n    Modules\n    SecurityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SecurityModule\n\n\n\ncluster_SecurityModule_imports\n\n\n\ncluster_SecurityModule_exports\n\n\n\ncluster_SecurityModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nSecurityModule\n\nSecurityModule\n\nSecurityModule -->\n\nPrismaModule->SecurityModule\n\n\n\n\n\nTencentCloudModule\n\nTencentCloudModule\n\nSecurityModule -->\n\nTencentCloudModule->SecurityModule\n\n\n\n\n\nSecuritySmsService \n\nSecuritySmsService \n\nSecuritySmsService  -->\n\nSecurityModule->SecuritySmsService \n\n\n\n\n\nSecuritySmsService\n\nSecuritySmsService\n\nSecurityModule -->\n\nSecuritySmsService->SecurityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/security/security.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Security module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SecuritySmsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            TencentCloudModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SecuritySmsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma';\nimport { TencentCloudModule } from 'src/tencent-cloud';\nimport { SecuritySmsResolver } from './security-sms.resolver';\nimport { SecuritySmsService } from './security-sms.service';\n\n/**\n * Security module.\n */\n@Module({\n  imports: [TencentCloudModule, PrismaModule],\n  providers: [SecuritySmsService, SecuritySmsResolver],\n  exports: [SecuritySmsService],\n})\nexport class SecurityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SecuritySmsResolver.html":{"url":"classes/SecuritySmsResolver.html","title":"class - SecuritySmsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SecuritySmsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/security-sms.resolver.ts\n        \n\n            \n                Description\n            \n            \n                Security SMS resolver.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createSecurity\n                            \n                            \n                                    Async\n                                createViewerSecurity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(securitySmsService: SecuritySmsService)\n                    \n                \n                        \n                            \n                                Defined in src/security/security-sms.resolver.ts:13\n                            \n                        \n\n                \n                    \n                            Create the resolver.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        securitySmsService\n                                                  \n                                                        \n                                                                        SecuritySmsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Secyrity SMS service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createSecurity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createSecurity(phone: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Create a security SMS code for phone number'})\n                \n            \n\n            \n                \n                    Defined in src/security/security-sms.resolver.ts:27\n                \n            \n\n\n            \n                \n                    Create a security SMS code for phone number.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Need create Security SMS code phone number.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createViewerSecurity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createViewerSecurity(context: ExecutionContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Create the viewer security SMS code'})@Authorization({hasAuthorization: true, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/security/security-sms.resolver.ts:47\n                \n            \n\n\n            \n                \n                    Create the viewer security SMS code.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Socfony app execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, GraphQLISODateTime, Mutation, Resolver } from '@nestjs/graphql';\nimport { HasTokenExpiredType } from 'src/authorization-token/enums';\nimport { Authorization } from 'src/authorization.decorator';\nimport { USER_NOT_SET_PHONE } from 'src/constants';\nimport { Context } from 'src/context.decorator';\nimport { ExecutionContext } from 'src/execution-context';\nimport { SecuritySmsService } from './security-sms.service';\n\n/**\n * Security SMS resolver.\n */\n@Resolver()\nexport class SecuritySmsResolver {\n  /**\n   * Create the resolver.\n   * @param securitySmsService Secyrity SMS service.\n   */\n  constructor(private readonly securitySmsService: SecuritySmsService) {}\n\n  /**\n   * Create a security SMS code for phone number.\n   * @param phone Need create Security SMS code phone number.\n   */\n  @Mutation(() => GraphQLISODateTime, {\n    description: 'Create a security SMS code for phone number',\n  })\n  async createSecurity(\n    @Args({\n      name: 'phone',\n      description: 'Need send code phone number',\n      type: () => String,\n    })\n    phone: string,\n  ) {\n    const { expiredAt } = await this.securitySmsService.send(phone);\n    return expiredAt;\n  }\n\n  /**\n   * Create the viewer security SMS code.\n   * @param context Socfony app execution context.\n   */\n  @Mutation(() => GraphQLISODateTime, {\n    description: 'Create the viewer security SMS code',\n  })\n  @Authorization({ hasAuthorization: true, type: HasTokenExpiredType.AUTH })\n  async createViewerSecurity(@Context() context: ExecutionContext) {\n    const { phone } = context.user || {};\n    if (!phone) {\n      throw new Error(USER_NOT_SET_PHONE);\n    }\n\n    return await this.createSecurity(phone);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecuritySmsService.html":{"url":"injectables/SecuritySmsService.html","title":"injectable - SecuritySmsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SecuritySmsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/security-sms.service.ts\n        \n\n            \n                Description\n            \n            \n                Security SMS service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compareCode\n                            \n                            \n                                getOptions\n                            \n                            \n                                    Async\n                                send\n                            \n                            \n                                    Async\n                                updateCodeToUsed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tencentCloudSmsService: TencentCloudSmsService, prisma: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/security/security-sms.service.ts:11\n                            \n                        \n\n                \n                    \n                            Create the service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        tencentCloudSmsService\n                                                  \n                                                        \n                                                                        TencentCloudSmsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Tencent Cloud SMS service.\n\n                                                        \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            compareCode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    compareCode(phone: string, code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/security/security-sms.service.ts:85\n                \n            \n\n\n            \n                \n                    Compase phone security code.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        phone number.\n\n                                    \n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The sent phone security SMS code.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOptions\n                        \n                        \n                    \n                \n            \n            \n                \ngetOptions(hasChina: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/security/security-sms.service.ts:26\n                \n            \n\n\n            \n                \n                    Get SMS options.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hasChina\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Has china.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { expiredIn: any; templateID: any; veriables: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            send\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    send(phone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/security/security-sms.service.ts:49\n                \n            \n\n\n            \n                \n                    Send a SMS code to phone.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Send phone number.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateCodeToUsed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCodeToUsed(security: SecuritySmsCode)\n                \n            \n\n\n            \n                \n                    Defined in src/security/security-sms.service.ts:113\n                \n            \n\n\n            \n                \n                    Update security to used.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    security\n                                    \n                                            SecuritySmsCode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Security code.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaClient, SecuritySmsCode } from '@prisma/client';\nimport * as dayjs from 'dayjs';\nimport { IDHelper } from 'src/helper';\nimport { TencentCloudSmsService } from 'src/tencent-cloud/sms';\n\n/**\n * Security SMS service.\n */\n@Injectable()\nexport class SecuritySmsService {\n  /**\n   * Create the service.\n   * @param tencentCloudSmsService Tencent Cloud SMS service.\n   * @param prisma Prisma client.\n   */\n  constructor(\n    private readonly tencentCloudSmsService: TencentCloudSmsService,\n    private readonly prisma: PrismaClient,\n  ) {}\n\n  /**\n   * Get SMS options.\n   * @param hasChina Has china.\n   */\n  getOptions(hasChina: boolean) {\n    const expiredIn = Number.parseInt(\n      process.env.TENCENT_CLOUD_SMS_EXPIRED_IN || '300',\n    );\n    if (hasChina) {\n      return {\n        expiredIn,\n        templateID: process.env.TENCENT_CLOUD_SMS_CHINA_TEMPLATE_ID,\n        veriables: process.env.TENCENT_CLOUD_SMS_CHINA_VERIABLES,\n      };\n    }\n\n    return {\n      expiredIn,\n      templateID: process.env.TENCENT_CLOUD_SMS_OTHER_TEMPLATE_ID,\n      veriables: process.env.TENCENT_CLOUD_SMS_OTHER_VERIABLES,\n    };\n  }\n\n  /**\n   * Send a SMS code to phone.\n   * @param phone Send phone number.\n   */\n  async send(phone: string) {\n    const hasChina = phone.startsWith('+86');\n    const options = this.getOptions(hasChina);\n    const code = IDHelper.numeral(6);\n    const expiredAt = dayjs().add(options.expiredIn, 'seconds').toDate();\n    const paramsSet = options.veriables\n      .split(',')\n      .map((item) =>\n        item\n          .replace('#code#', code)\n          .replace('#expired#', (options.expiredIn / 60).toString()),\n      );\n\n    const security = await this.prisma.securitySmsCode.create({\n      data: {\n        id: IDHelper.id(64),\n        phone,\n        code,\n        expiredAt,\n      },\n    });\n\n    this.tencentCloudSmsService.send({\n      PhoneNumberSet: [phone],\n      TemplateID: options.templateID,\n      TemplateParamSet: paramsSet,\n    });\n\n    return security;\n  }\n\n  /**\n   * Compase phone security code.\n   * @param phone phone number.\n   * @param code The sent phone security SMS code.\n   */\n  async compareCode(\n    phone: string,\n    code: string,\n  ): Promise {\n    if (!phone || !code) {\n      return false;\n    }\n\n    const security = await this.prisma.securitySmsCode.findFirst({\n      where: { phone, code },\n      orderBy: { createdAt: 'desc' },\n      rejectOnNotFound: false,\n    });\n    if (\n      security &&\n      !security.usedAt &&\n      security.expiredAt.getTime() > Date.now()\n    ) {\n      return security;\n    }\n\n    return false;\n  }\n\n  /**\n   * Update security to used.\n   * @param security Security code.\n   */\n  async updateCodeToUsed(security: SecuritySmsCode) {\n    return await this.prisma.securitySmsCode.update({\n      where: { id: security.id },\n      data: { usedAt: new Date() },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SocfonyConfig.html":{"url":"interfaces/SocfonyConfig.html","title":"interface - SocfonyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SocfonyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.config.ts\n        \n\n            \n                Description\n            \n            \n                Socfony app config.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        endpoint\n                                \n                                \n                                        isProduction\n                                \n                                \n                                        port\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    GraphQL endpoint\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isProduction\n                                    \n                                \n                                \n                                    \n                                        isProduction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Is production.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                    \n                                \n                                \n                                    \n                                        port:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    App runner port\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { config as dontEnvConfig } from 'dotenv';\n\n/**\n * Socfony app config.\n */\nexport interface SocfonyConfig {\n  /**\n   * Is production.\n   */\n  isProduction: boolean;\n\n  /**\n   * App runner port\n   */\n  port: string | number;\n\n  /**\n   * GraphQL endpoint\n   */\n  endpoint: string;\n}\n\n/**\n * Load Socfony ENV config file.\n * @param path ENV file path.\n */\nexport function loadConfig(path?: string) {\n  const logger = new Logger('Socfony');\n  const { error } = dontEnvConfig({ path });\n  if (error) {\n    logger.error(error.message);\n    process.exit(1);\n  }\n\n  logger.log(`Loaded \"${path || '.env'}\" dot env config file.`);\n}\n\n/**\n * Get app config.\n * @returns {@like SocfonyConfig}\n */\nexport function getConfig(): SocfonyConfig {\n  return {\n    isProduction: process.env.NODE_ENV === 'production',\n    port: process.env.CLIENT_SERVER_PORT || 3000,\n    endpoint: process.env.CLIENT_GRAPHQL_ENDPOINT || '/',\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TencentCloudCosCredentials.html":{"url":"classes/TencentCloudCosCredentials.html","title":"class - TencentCloudCosCredentials","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TencentCloudCosCredentials\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/cos/entities/cos.entity.ts\n        \n\n            \n                Description\n            \n            \n                Tencent CLoud COS credential\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization\n                            \n                            \n                                bucket\n                            \n                            \n                                region\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authorization\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TencentCloudStsFederationToken\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud STS authorization token'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/cos/entities/cos.entity.ts:17\n                            \n                        \n\n                \n                    \n                        Tencent Cloud STS authorization token\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bucket\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud COS bucket'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/cos/entities/cos.entity.ts:25\n                            \n                        \n\n                \n                    \n                        Tencent Cloud COS bucket\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            region\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud COS bucket region'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/cos/entities/cos.entity.ts:33\n                            \n                        \n\n                \n                    \n                        Tencent Cloud COS bucket region\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { TencentCloudStsFederationToken } from '../../sts';\n\n/**\n * Tencent CLoud COS credential\n */\n@ObjectType({\n  description: 'Tencent CLoud COS credential',\n})\nexport class TencentCloudCosCredentials {\n  /**\n   * Tencent Cloud STS authorization token\n   */\n  @Field(() => TencentCloudStsFederationToken, {\n    description: 'Tencent Cloud STS authorization token',\n  })\n  authorization: TencentCloudStsFederationToken;\n\n  /**\n   * Tencent Cloud COS bucket\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud COS bucket',\n  })\n  bucket: string;\n\n  /**\n   * Tencent Cloud COS bucket region\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud COS bucket region',\n  })\n  region: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TencentCloudCosResolver.html":{"url":"classes/TencentCloudCosResolver.html","title":"class - TencentCloudCosResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TencentCloudCosResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/cos/cos.resolver.ts\n        \n\n            \n                Description\n            \n            \n                Tencent Cloud COS credentials resolver.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authorization\n                            \n                            \n                                    Async\n                                createCosTemporaryReadCredential\n                            \n                            \n                                    Async\n                                createCosTemporaryWriteCredential\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cosService: TencentCloudCosService)\n                    \n                \n                        \n                            \n                                Defined in src/tencent-cloud/cos/cos.resolver.ts:43\n                            \n                        \n\n                \n                    \n                            Create the resolver.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        cosService\n                                                  \n                                                        \n                                                                        TencentCloudCosService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Tencent Cloud COS service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            authorization\n                        \n                        \n                    \n                \n            \n            \n                \nauthorization(undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField(undefined)\n                \n            \n\n            \n                \n                    Defined in src/tencent-cloud/cos/cos.resolver.ts:55\n                \n            \n\n\n            \n                \n                    Resolve Tencent Cloud STS federation token.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCosTemporaryReadCredential\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCosTemporaryReadCredential()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Create Tencent Cloud COS read credential'})\n                \n            \n\n            \n                \n                    Defined in src/tencent-cloud/cos/cos.resolver.ts:72\n                \n            \n\n\n            \n                \n                    Create Tencent Cloud COS read credential\n\n\n                    \n                        Returns :     Promise<>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCosTemporaryWriteCredential\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCosTemporaryWriteCredential(type: AllowUploadFileType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Create Tencent Cloud COS write credential'})@AuthorizationWith()\n                \n            \n\n            \n                \n                    Defined in src/tencent-cloud/cos/cos.resolver.ts:90\n                \n            \n\n\n            \n                \n                    Create Tencent Cloud COS write credential\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                AllowUploadFileType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        AllowUploadFileType item.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Args,\n  Mutation,\n  Parent,\n  registerEnumType,\n  ResolveField,\n  Resolver,\n} from '@nestjs/graphql';\nimport { AuthorizationWith } from 'src/authorization.decorator';\nimport { IDHelper } from 'src/helper';\nimport { TencentCloudStsFederationToken } from '../sts';\nimport { TencentCloudCosCredentials } from './entities/cos.entity';\nimport { TencentCloudCosService } from './soc.service';\n\n/**\n * Allow upload File MIME-type.\n */\nexport enum AllowUploadFileType {\n  // Images\n  JPG = '.jpg',\n  PNG = '.png',\n  GIF = '.gif',\n  // Video\n  MP4 = '.mp4',\n  OGG = '.ogg',\n  // Audio\n  MP3 = '.mp3',\n  WAV = '.wav',\n}\n\n/**\n * Register `AllowUploadFileType` to GraphQL schema.\n */\nregisterEnumType(AllowUploadFileType, {\n  name: 'AllowUploadFileType',\n  description: 'Allow upload File MIME-type',\n});\n\n/**\n * Tencent Cloud COS credentials resolver.\n */\n@Resolver(() => TencentCloudCosCredentials)\nexport class TencentCloudCosResolver {\n  /**\n   * Create the resolver.\n   * @param cosService Tencent Cloud COS service.\n   */\n  constructor(private readonly cosService: TencentCloudCosService) {}\n\n  /**\n   * Resolve Tencent Cloud STS federation token.\n   * @param param SOcfony runner execution context.\n   */\n  @ResolveField(() => TencentCloudStsFederationToken)\n  authorization(\n    @Parent()\n    {\n      authorization,\n    }: {\n      authorization: () => Promise;\n    },\n  ) {\n    return authorization();\n  }\n\n  /**\n   * Create Tencent Cloud COS read credential\n   */\n  @Mutation(() => TencentCloudCosCredentials, {\n    description: 'Create Tencent Cloud COS read credential',\n  })\n  async createCosTemporaryReadCredential(): Promise & {\n      authorization: () => Promise;\n    }\n  > {\n    return Object.assign({}, this.cosService.options, {\n      authorization: () => this.cosService.createTemporaryReadCredential(),\n    });\n  }\n\n  /**\n   * Create Tencent Cloud COS write credential\n   * @param type `AllowUploadFileType` item.\n   */\n  @Mutation(() => TencentCloudCosCredentials, {\n    description: 'Create Tencent Cloud COS write credential',\n  })\n  @AuthorizationWith()\n  async createCosTemporaryWriteCredential(\n    @Args({\n      name: 'type',\n      type: () => AllowUploadFileType,\n      description: 'create resource type.',\n    })\n    type: AllowUploadFileType,\n  ): Promise & {\n      authorization: () => Promise;\n    }\n  > {\n    return Object.assign({}, this.cosService.options, {\n      authorization: () =>\n        this.cosService.createTemporaryWriteCredential(IDHelper.id(64) + type),\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TencentCloudCosService.html":{"url":"injectables/TencentCloudCosService.html","title":"injectable - TencentCloudCosService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TencentCloudCosService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/cos/soc.service.ts\n        \n\n            \n                Description\n            \n            \n                Tencent Cloud COS service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTemporaryReadCredential\n                            \n                            \n                                    Async\n                                createTemporaryWriteCredential\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                                \n                                    temporaryCredentialDurationSeconds\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sts: TencentCloudStsService)\n                    \n                \n                        \n                            \n                                Defined in src/tencent-cloud/cos/soc.service.ts:9\n                            \n                        \n\n                \n                    \n                            Create the COS service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sts\n                                                  \n                                                        \n                                                                        TencentCloudStsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Tencent Cloud STS service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTemporaryReadCredential\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTemporaryReadCredential()\n                \n            \n\n\n            \n                \n                    Defined in src/tencent-cloud/cos/soc.service.ts:36\n                \n            \n\n\n            \n                \n                    Create Tencent Cloud COS temporary read credential.\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTemporaryWriteCredential\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTemporaryWriteCredential(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tencent-cloud/cos/soc.service.ts:64\n                \n            \n\n\n            \n                \n                    Create Tencent Cloud COS temporary write credential.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tencent Cloud COS object key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/tencent-cloud/cos/soc.service.ts:19\n                                \n                            \n                    \n                        \n                                Get COS options.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        temporaryCredentialDurationSeconds\n                    \n                \n\n                \n                    \n                        gettemporaryCredentialDurationSeconds()\n                    \n                \n                            \n                                \n                                    Defined in src/tencent-cloud/cos/soc.service.ts:29\n                                \n                            \n                    \n                        \n                                get temporary credential duration seconds.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { IDHelper } from 'src/helper';\nimport { TencentCloudStsService } from '../sts';\n\n/**\n * Tencent Cloud COS service.\n */\n@Injectable()\nexport class TencentCloudCosService {\n  /**\n   * Create the COS service.\n   * @param sts Tencent Cloud STS service.\n   */\n  constructor(private readonly sts: TencentCloudStsService) {}\n\n  /**\n   * Get COS options.\n   */\n  get options() {\n    return {\n      bucket: process.env.TENCENT_CLOUD_COS_BUCKET,\n      region: process.env.TENCENT_CLOUD_COS_REGION,\n    };\n  }\n\n  /**\n   * get temporary credential duration seconds.\n   */\n  get temporaryCredentialDurationSeconds() {\n    return 7200;\n  }\n\n  /**\n   * Create Tencent Cloud COS temporary read credential.\n   */\n  async createTemporaryReadCredential() {\n    const { bucket, region } = this.options;\n    const stsClient = this.sts.createClient(region);\n    const [_, uid] = bucket.split('-');\n    return await stsClient.GetFederationToken({\n      Name: IDHelper.alphabet(32),\n      DurationSeconds: this.temporaryCredentialDurationSeconds,\n      Policy: JSON.stringify({\n        version: '2.0',\n        statement: [\n          {\n            effect: 'allow',\n            action: [\n              'name/cos:GetObject',\n              'name/cos:HeadObject',\n              'name/cos:OptionsObject',\n            ],\n            resource: [`qcs::cos:${region}:uid/${uid}:${bucket}/*`],\n          },\n        ],\n      }),\n    });\n  }\n\n  /**\n   * Create Tencent Cloud COS temporary write credential.\n   * @param name Tencent Cloud COS object key.\n   */\n  async createTemporaryWriteCredential(name: string) {\n    const { bucket, region } = this.options;\n    const stsClient = this.sts.createClient(region);\n    const [_, uid] = bucket.split('-');\n    return await stsClient.GetFederationToken({\n      Name: IDHelper.alphabet(32),\n      DurationSeconds: this.temporaryCredentialDurationSeconds,\n      Policy: JSON.stringify({\n        version: '2.0',\n        statement: [\n          {\n            effect: 'allow',\n            action: [\n              //简单上传操作\n              'name/cos:PutObject',\n              //表单上传对象\n              'name/cos:PostObject',\n              //分块上传：初始化分块操作\n              'name/cos:InitiateMultipartUpload',\n              //分块上传：List 进行中的分块上传\n              'name/cos:ListMultipartUploads',\n              //分块上传：List 已上传分块操作\n              'name/cos:ListParts',\n              //分块上传：上传分块块操作\n              'name/cos:UploadPart',\n              //分块上传：完成所有分块上传操作\n              'name/cos:CompleteMultipartUpload',\n              //取消分块上传操作\n              'name/cos:AbortMultipartUpload',\n            ],\n            resource: [`qcs::cos:${region}:uid/${uid}:${bucket}/${name}`],\n          },\n        ],\n      }),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TencentCloudModule.html":{"url":"modules/TencentCloudModule.html","title":"module - TencentCloudModule","body":"\n                   \n\n\n\n\n    Modules\n    TencentCloudModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TencentCloudModule\n\n\n\ncluster_TencentCloudModule_exports\n\n\n\ncluster_TencentCloudModule_providers\n\n\n\n\nTencentCloudCosService \n\nTencentCloudCosService \n\n\n\nTencentCloudSmsService \n\nTencentCloudSmsService \n\n\n\nTencentCloudStsService \n\nTencentCloudStsService \n\n\n\nTencentCloudModule\n\nTencentCloudModule\n\nTencentCloudCosService  -->\n\nTencentCloudModule->TencentCloudCosService \n\n\n\nTencentCloudSmsService  -->\n\nTencentCloudModule->TencentCloudSmsService \n\n\n\nTencentCloudStsService  -->\n\nTencentCloudModule->TencentCloudStsService \n\n\n\n\n\nTencentCloudCosService\n\nTencentCloudCosService\n\nTencentCloudModule -->\n\nTencentCloudCosService->TencentCloudModule\n\n\n\n\n\nTencentCloudSmsService\n\nTencentCloudSmsService\n\nTencentCloudModule -->\n\nTencentCloudSmsService->TencentCloudModule\n\n\n\n\n\nTencentCloudStsService\n\nTencentCloudStsService\n\nTencentCloudModule -->\n\nTencentCloudStsService->TencentCloudModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tencent-cloud/tencent-cloud.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Tencent Cloud module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TencentCloudCosService\n                        \n                        \n                            TencentCloudSmsService\n                        \n                        \n                            TencentCloudStsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TencentCloudCosService\n                        \n                        \n                            TencentCloudSmsService\n                        \n                        \n                            TencentCloudStsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TencentCloudCosService } from './cos';\nimport { TencentCloudCosResolver } from './cos/cos.resolver';\nimport { TencentCloudSmsService } from './sms';\nimport { TencentCloudStsService } from './sts';\n\n/**\n * Tencent Cloud module.\n */\n@Module({\n  providers: [\n    TencentCloudStsService,\n    TencentCloudCosService,\n    TencentCloudSmsService,\n\n    // Resolvers\n    TencentCloudCosResolver,\n  ],\n  exports: [\n    TencentCloudStsService,\n    TencentCloudCosService,\n    TencentCloudSmsService,\n  ],\n})\nexport class TencentCloudModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TencentCloudSmsService.html":{"url":"injectables/TencentCloudSmsService.html","title":"injectable - TencentCloudSmsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TencentCloudSmsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/sms/sms.service.ts\n        \n\n            \n                Description\n            \n            \n                Tencent Cloud SMS service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createClient\n                            \n                            \n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    baseOptions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createClient\n                        \n                        \n                    \n                \n            \n            \n                \ncreateClient(region: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tencent-cloud/sms/sms.service.ts:29\n                \n            \n\n\n            \n                \n                    Create Tencent Cloud SMS client.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    region\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'ap-guangzhou'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            send\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    send(params: Pick, region: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tencent-cloud/sms/sms.service.ts:45\n                \n            \n\n\n            \n                \n                    Send SMS.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                Pick\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Send SMS params.\n\n                                    \n                                \n                                \n                                    region\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'ap-guangzhou'\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        baseOptions\n                    \n                \n\n                \n                    \n                        getbaseOptions()\n                    \n                \n                            \n                                \n                                    Defined in src/tencent-cloud/sms/sms.service.ts:14\n                                \n                            \n                    \n                        \n                                Get SMS base options.\n\n\n                                \n                                    Returns :         Pick\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Client } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sms/v20190711/sms_client';\nimport { SendSmsRequest } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sms/v20190711/sms_models';\nimport { getCredential } from '../common';\n\n/**\n * Tencent Cloud SMS service.\n */\n@Injectable()\nexport class TencentCloudSmsService {\n  /**\n   * Get SMS base options.\n   */\n  get baseOptions(): Pick {\n    return {\n      SmsSdkAppid: process.env.TENCENT_CLOUD_SMS_APP_ID,\n      Sign: process.env.TENCENT_CLOUD_SMS_SIGN,\n      ExtendCode: process.env.TENCENT_CLOUD_SMS_EXTEND_CODE,\n      SenderId: process.env.TENCENT_CLOUD_SMS_SENDER_ID,\n    };\n  }\n\n  /**\n   * Create Tencent Cloud SMS client.\n   */\n  createClient(region: string = 'ap-guangzhou'): Client {\n    return new Client({\n      credential: getCredential(),\n      region,\n      profile: {\n        httpProfile: {\n          endpoint: 'sms.tencentcloudapi.com',\n        },\n      },\n    });\n  }\n\n  /**\n   * Send SMS.\n   * @param params Send SMS params.\n   */\n  async send(\n    params: Pick,\n    region: string = 'ap-guangzhou',\n  ) {\n    const client = this.createClient(region);\n    const request = Object.assign({}, this.baseOptions, params);\n    return await client.SendSms(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TencentCloudStsCredentials.html":{"url":"classes/TencentCloudStsCredentials.html","title":"class - TencentCloudStsCredentials","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TencentCloudStsCredentials\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/sts/entities/sts.entity.ts\n        \n\n            \n                Description\n            \n            \n                Tencent Cloud STS credentials.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Credentials\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                TmpSecretId\n                            \n                            \n                                TmpSecretKey\n                            \n                            \n                                Token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TmpSecretId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud credentials secrect id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/sts/entities/sts.entity.ts:26\n                            \n                        \n\n                \n                    \n                        Tencent Cloud credentials secrect id\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TmpSecretKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud credentials secrect key'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/sts/entities/sts.entity.ts:34\n                            \n                        \n\n                \n                    \n                        Tencent Cloud credentials secrect key\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud credentials token'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/sts/entities/sts.entity.ts:18\n                            \n                        \n\n                \n                    \n                        Tencent Cloud credentials token\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { GetFederationTokenResponse } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sts/v20180813/sts_models';\nimport { Credentials } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sts/v20180813/sts_models';\n\n/**\n * Tencent Cloud STS credentials.\n */\n@ObjectType({\n  description: 'Tencent Cloud STS credentials.',\n})\nexport class TencentCloudStsCredentials implements Credentials {\n  /**\n   * Tencent Cloud credentials token\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials token',\n  })\n  Token: string;\n\n  /**\n   * Tencent Cloud credentials secrect id\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials secrect id',\n  })\n  TmpSecretId: string;\n\n  /**\n   * Tencent Cloud credentials secrect key\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials secrect key',\n  })\n  TmpSecretKey: string;\n}\n\n/**\n * Tencent Clous STS federation token\n */\n@ObjectType({\n  description: 'Tencent Clous STS federation token',\n})\nexport class TencentCloudStsFederationToken\n  implements GetFederationTokenResponse {\n  /**\n   * Tencent Cloud credentials\n   */\n  @Field(() => TencentCloudStsCredentials, {\n    description: 'Tencent Cloud credentials',\n    nullable: true,\n  })\n  Credentials?: TencentCloudStsCredentials;\n\n  /**\n   * Tencent Cloud credentials expired Unix time\n   */\n  @Field(() => Int, {\n    description: 'Tencent Cloud credentials expired Unix time.',\n    nullable: true,\n  })\n  ExpiredTime?: number;\n\n  /**\n   * Tencent Cloud credentials expired ISO8601 date\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials expired ISO8601 date.',\n    nullable: true,\n  })\n  Expiration?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TencentCloudStsFederationToken.html":{"url":"classes/TencentCloudStsFederationToken.html","title":"class - TencentCloudStsFederationToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TencentCloudStsFederationToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/sts/entities/sts.entity.ts\n        \n\n            \n                Description\n            \n            \n                Tencent Clous STS federation token\n\n            \n\n\n            \n                Implements\n            \n            \n                        GetFederationTokenResponse\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                Credentials\n                            \n                            \n                                    Optional\n                                Expiration\n                            \n                            \n                                    Optional\n                                ExpiredTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            Credentials\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TencentCloudStsCredentials\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud credentials', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/sts/entities/sts.entity.ts:52\n                            \n                        \n\n                \n                    \n                        Tencent Cloud credentials\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            Expiration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud credentials expired ISO8601 date.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/sts/entities/sts.entity.ts:70\n                            \n                        \n\n                \n                    \n                        Tencent Cloud credentials expired ISO8601 date\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            ExpiredTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud credentials expired Unix time.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/sts/entities/sts.entity.ts:61\n                            \n                        \n\n                \n                    \n                        Tencent Cloud credentials expired Unix time\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { GetFederationTokenResponse } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sts/v20180813/sts_models';\nimport { Credentials } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sts/v20180813/sts_models';\n\n/**\n * Tencent Cloud STS credentials.\n */\n@ObjectType({\n  description: 'Tencent Cloud STS credentials.',\n})\nexport class TencentCloudStsCredentials implements Credentials {\n  /**\n   * Tencent Cloud credentials token\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials token',\n  })\n  Token: string;\n\n  /**\n   * Tencent Cloud credentials secrect id\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials secrect id',\n  })\n  TmpSecretId: string;\n\n  /**\n   * Tencent Cloud credentials secrect key\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials secrect key',\n  })\n  TmpSecretKey: string;\n}\n\n/**\n * Tencent Clous STS federation token\n */\n@ObjectType({\n  description: 'Tencent Clous STS federation token',\n})\nexport class TencentCloudStsFederationToken\n  implements GetFederationTokenResponse {\n  /**\n   * Tencent Cloud credentials\n   */\n  @Field(() => TencentCloudStsCredentials, {\n    description: 'Tencent Cloud credentials',\n    nullable: true,\n  })\n  Credentials?: TencentCloudStsCredentials;\n\n  /**\n   * Tencent Cloud credentials expired Unix time\n   */\n  @Field(() => Int, {\n    description: 'Tencent Cloud credentials expired Unix time.',\n    nullable: true,\n  })\n  ExpiredTime?: number;\n\n  /**\n   * Tencent Cloud credentials expired ISO8601 date\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials expired ISO8601 date.',\n    nullable: true,\n  })\n  Expiration?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TencentCloudStsService.html":{"url":"injectables/TencentCloudStsService.html","title":"injectable - TencentCloudStsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TencentCloudStsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/sts/sts.service.ts\n        \n\n            \n                Description\n            \n            \n                Tencent Cloud STS service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createClient\n                        \n                        \n                    \n                \n            \n            \n                \ncreateClient(region: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tencent-cloud/sts/sts.service.ts:14\n                \n            \n\n\n            \n                \n                    Create STS client for region.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    region\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'ap-guangzhou'\n                                    \n\n                                    \n                                        server region.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Client } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sts/v20180813/sts_client';\nimport { getCredential } from '../common';\n\n/**\n * Tencent Cloud STS service.\n */\n@Injectable()\nexport class TencentCloudStsService {\n  /**\n   * Create STS client for region.\n   * @param region server region.\n   */\n  createClient(region: string = 'ap-guangzhou'): Client {\n    return new Client({\n      credential: getCredential(),\n      region,\n      profile: {\n        httpProfile: {\n          endpoint: 'sts.tencentcloudapi.com',\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateViewerArgs.html":{"url":"classes/UpdateViewerArgs.html","title":"class - UpdateViewerArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateViewerArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-viewer.args.ts\n        \n\n            \n                Description\n            \n            \n                Update viewer args.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                    Optional\n                                newPhoneSecurity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserUpdateInput\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User update input'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/update-viewer.args.ts:20\n                            \n                        \n\n                \n                    \n                        User update input\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            newPhoneSecurity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true, description: 'Update phone need set new phone security code'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/update-viewer.args.ts:29\n                            \n                        \n\n                \n                    \n                        Update phone need set new phone security code\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, PickType } from '@nestjs/graphql';\nimport { CreateAuthorizationTokenArgs } from 'src/authorization-token/dto/create-authorization-token.args';\nimport { UserUpdateInput } from './user-update.input';\n\n/**\n * Update viewer args.\n */\n@ArgsType()\nexport class UpdateViewerArgs extends PickType(\n  CreateAuthorizationTokenArgs,\n  ['security', 'type'] as const,\n  ArgsType,\n) {\n  /**\n   * User update input\n   */\n  @Field(() => UserUpdateInput, {\n    description: 'User update input',\n  })\n  data: UserUpdateInput;\n\n  /**\n   * Update phone need set new phone security code\n   */\n  @Field(() => String, {\n    nullable: true,\n    description: 'Update phone need set new phone security code',\n  })\n  newPhoneSecurity?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n            \n                Description\n            \n            \n                User entity.\n\n            \n\n            \n                Extends\n            \n            \n                        UserInterface\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                login\n                            \n                            \n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User registered date at.'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:44\n\n                            \n                        \n\n                \n                    \n                        User registered date at.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User ID'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:27\n\n                            \n                        \n\n                \n                    \n                        User ID\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true, description: 'User login name'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:36\n\n                            \n                        \n\n                \n                    \n                        User login name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     UserProfile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'The user profile'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:52\n\n                            \n                        \n\n                \n                    \n                        User profile.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ObjectType } from '@nestjs/graphql';\nimport { UserInterface } from './user.interface';\n\n/**\n * User entity.\n */\n@ObjectType({\n  implements: [UserInterface],\n  description: 'User entity',\n})\nexport class UserEntity extends UserInterface {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInterface.html":{"url":"classes/UserInterface.html","title":"class - UserInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.interface.ts\n        \n\n            \n                Description\n            \n            \n                User interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                login\n                            \n                            \n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User registered date at.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.interface.ts:44\n                            \n                        \n\n                \n                    \n                        User registered date at.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.interface.ts:27\n                            \n                        \n\n                \n                    \n                        User ID\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true, description: 'User login name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.interface.ts:36\n                            \n                        \n\n                \n                    \n                        User login name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     UserProfile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'The user profile'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.interface.ts:52\n                            \n                        \n\n                \n                    \n                        User profile.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, GraphQLISODateTime, ID, InterfaceType } from '@nestjs/graphql';\nimport { Prisma, UserProfile } from '@prisma/client';\nimport { UserProfileEntity } from '../profile/entities/profile.entity';\n\n/**\n * User interface.\n */\n@InterfaceType({\n  description: 'User interface.',\n})\nexport class UserInterface\n  implements\n    Omit,\n      'phone' | 'email' | 'password'\n    > {\n  /**\n   * User ID\n   */\n  @Field((type) => ID, {\n    description: 'User ID',\n  })\n  id: string;\n\n  /**\n   * User login name\n   */\n  @Field((type) => String, {\n    nullable: true,\n    description: 'User login name',\n  })\n  login: string;\n\n  /**\n   * User registered date at.\n   */\n  @Field((type) => GraphQLISODateTime, {\n    description: 'User registered date at.',\n  })\n  createdAt: Date;\n\n  /**\n   * User profile.\n   */\n  @Field((type) => UserProfileEntity, {\n    description: 'The user profile',\n  })\n  profile: UserProfile;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInterfaceResolver.html":{"url":"classes/UserInterfaceResolver.html","title":"class - UserInterfaceResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInterfaceResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-interface.resolver.ts\n        \n\n            \n                Description\n            \n            \n                GraphQL user interface resolver.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userProfileService: UserProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-interface.resolver.ts:11\n                            \n                        \n\n                \n                    \n                            Create GraphQL user interface resolver\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userProfileService\n                                                  \n                                                        \n                                                                        UserProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User profile service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            profile\n                        \n                        \n                    \n                \n            \n            \n                \nprofile(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/user-interface.resolver.ts:23\n                \n            \n\n\n            \n                \n                    Resolve user profile field.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parent context user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parent, ResolveField, Resolver } from '@nestjs/graphql';\nimport { User } from '@prisma/client';\nimport { UserInterface } from './entities/user.interface';\nimport { UserProfileEntity } from './profile/entities/profile.entity';\nimport { UserProfileService } from './profile/profile.service';\n\n/**\n * GraphQL user interface resolver.\n */\n@Resolver(() => UserInterface)\nexport class UserInterfaceResolver {\n  /**\n   * Create GraphQL user interface resolver\n   * @param userProfileService User profile service.\n   */\n  constructor(private readonly userProfileService: UserProfileService) {}\n\n  /**\n   * Resolve user profile field.\n   * @param user Parent context user.\n   */\n  @ResolveField(() => UserProfileEntity)\n  profile(@Parent() user: User) {\n    return this.userProfileService.resolveProfile(user);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nSecurityModule\n\nSecurityModule\n\nUserModule -->\n\nSecurityModule->UserModule\n\n\n\n\n\nUserProfileModule\n\nUserProfileModule\n\nUserModule -->\n\nUserProfileModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n        \n            Description\n        \n        \n            User module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            SecurityModule\n                        \n                        \n                            UserProfileModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma';\nimport { SecurityModule } from 'src/security/security.module';\nimport { UserProfileModule } from './profile/profile.module';\nimport { UserInterfaceResolver } from './user-interface.resolver';\nimport { UserService } from './user.service';\nimport { ViewerResolver } from './viewer.resolver';\n\n/**\n * User module.\n */\n@Module({\n  imports: [PrismaModule, UserProfileModule, SecurityModule],\n  providers: [UserService, UserInterfaceResolver, ViewerResolver],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileEntity.html":{"url":"classes/UserProfileEntity.html","title":"class - UserProfileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/profile/entities/profile.entity.ts\n        \n\n            \n                Description\n            \n            \n                User profile entity.\n\n            \n\n\n            \n                Implements\n            \n            \n                            UserProfileEntity\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                location\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User avatar storage path.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/profile/entities/profile.entity.ts:34\n                            \n                        \n\n                \n                    \n                        User avatar storage path\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bio\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User bio.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/profile/entities/profile.entity.ts:43\n                            \n                        \n\n                \n                    \n                        User bio\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            location\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User location string.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/profile/entities/profile.entity.ts:52\n                            \n                        \n\n                \n                    \n                        User location string\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User name.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/profile/entities/profile.entity.ts:25\n                            \n                        \n\n                \n                    \n                        User name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User profile updated at.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/profile/entities/profile.entity.ts:61\n                            \n                        \n\n                \n                    \n                        User profile updated at\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Profile owner ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/profile/entities/profile.entity.ts:16\n                            \n                        \n\n                \n                    \n                        Profile owner ID\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, GraphQLISODateTime, ID, ObjectType } from '@nestjs/graphql';\n\n/**\n * User profile entity.\n */\n@ObjectType({\n  description: 'User profile entity',\n})\nexport class UserProfileEntity implements UserProfileEntity {\n  /**\n   * Profile owner ID\n   */\n  @Field(() => ID, {\n    description: 'Profile owner ID',\n  })\n  userId: string;\n\n  /**\n   * User name\n   */\n  @Field((type) => String, {\n    description: 'User name.',\n    nullable: true,\n  })\n  name: string;\n\n  /**\n   * User avatar storage path\n   */\n  @Field((type) => String, {\n    description: 'User avatar storage path.',\n    nullable: true,\n  })\n  avatar: string;\n\n  /**\n   * User bio\n   */\n  @Field((type) => String, {\n    description: 'User bio.',\n    nullable: true,\n  })\n  bio: string;\n\n  /**\n   * User location string\n   */\n  @Field((type) => String, {\n    description: 'User location string.',\n    nullable: true,\n  })\n  location: string;\n\n  /**\n   * User profile updated at\n   */\n  @Field((type) => GraphQLISODateTime, {\n    description: 'User profile updated at.',\n    nullable: true,\n  })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserProfileModule.html":{"url":"modules/UserProfileModule.html","title":"module - UserProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    UserProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserProfileModule\n\n\n\ncluster_UserProfileModule_providers\n\n\n\ncluster_UserProfileModule_imports\n\n\n\ncluster_UserProfileModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserProfileModule\n\nUserProfileModule\n\nUserProfileModule -->\n\nPrismaModule->UserProfileModule\n\n\n\n\n\nUserProfileService \n\nUserProfileService \n\nUserProfileService  -->\n\nUserProfileModule->UserProfileService \n\n\n\n\n\nUserProfileService\n\nUserProfileService\n\nUserProfileModule -->\n\nUserProfileService->UserProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/profile/profile.module.ts\n        \n\n\n        \n            Description\n        \n        \n            User profile module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserProfileService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserProfileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma';\nimport { UserProfileResolver } from './profile.resolver';\nimport { UserProfileService } from './profile.service';\n\n/**\n * User profile module.\n */\n@Module({\n  imports: [PrismaModule],\n  providers: [UserProfileService, UserProfileResolver],\n  exports: [UserProfileService],\n})\nexport class UserProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileResolver.html":{"url":"classes/UserProfileResolver.html","title":"class - UserProfileResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/profile/profile.resolver.ts\n        \n\n            \n                Description\n            \n            \n                User prifle entity resolver.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                updateViewerProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileService: UserProfileService, prismaClient: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/user/profile/profile.resolver.ts:13\n                            \n                        \n\n                \n                    \n                            Create user prifle entity resolver\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        UserProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User profile service.\n\n                                                        \n                                                \n                                                \n                                                        prismaClient\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateViewerProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateViewerProfile(context: ExecutionContext, data: UserProfileUpdateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Update viewer profile'})@AuthorizationWith()\n                \n            \n\n            \n                \n                    Defined in src/user/profile/profile.resolver.ts:33\n                \n            \n\n\n            \n                \n                    Update viewer profile.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Socfony execution context.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UserProfileUpdateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User profile update input.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Context, Mutation, Resolver } from '@nestjs/graphql';\nimport { PrismaClient } from '@prisma/client';\nimport { AuthorizationWith } from 'src/authorization.decorator';\nimport { ExecutionContext } from 'src/execution-context';\nimport { UserProfileUpdateInput } from './dto/profile-update.input';\nimport { UserProfileEntity } from './entities/profile.entity';\nimport { UserProfileService } from './profile.service';\n\n/**\n * User prifle entity resolver.\n */\n@Resolver(() => UserProfileEntity)\nexport class UserProfileResolver {\n  /**\n   * Create user prifle entity resolver\n   * @param profileService User profile service.\n   * @param prismaClient Prisma client.\n   */\n  constructor(\n    private readonly profileService: UserProfileService,\n    private readonly prismaClient: PrismaClient,\n  ) {}\n\n  /**\n   * Update viewer profile.\n   * @param context Socfony execution context.\n   * @param data User profile update input.\n   */\n  @Mutation(() => UserProfileEntity, {\n    description: 'Update viewer profile',\n  })\n  @AuthorizationWith()\n  async updateViewerProfile(\n    @Context() context: ExecutionContext,\n    @Args({\n      name: 'data',\n      type: () => UserProfileUpdateInput,\n      description: 'Viewer profile update data.',\n    })\n    data: UserProfileUpdateInput,\n  ) {\n    const profile = await this.profileService.resolveProfile(context.user);\n    return await this.prismaClient.userProfile.update({\n      where: { userId: profile.userId },\n      data,\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserProfileService.html":{"url":"injectables/UserProfileService.html","title":"injectable - UserProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/profile/profile.service.ts\n        \n\n            \n                Description\n            \n            \n                User profile service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolveProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/user/profile/profile.service.ts:8\n                            \n                        \n\n                \n                    \n                            Create the user profile service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resolveProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resolveProfile(user: User | Prisma.UserGetPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/profile/profile.service.ts:19\n                \n            \n\n\n            \n                \n                    Resolve user profile.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User | Prisma.UserGetPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        need resolve profile user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma, PrismaClient, User, UserProfile } from '@prisma/client';\n\n/**\n * User profile service.\n */\n@Injectable()\nexport class UserProfileService {\n  /**\n   * Create the user profile service.\n   * @param prisma Prisma client.\n   */\n  constructor(private readonly prisma: PrismaClient) {}\n\n  /**\n   * Resolve user profile.\n   * @param user need resolve profile user.\n   */\n  async resolveProfile(\n    user:\n      | User\n      | Prisma.UserGetPayload,\n  ): Promise {\n    let { profile } = user as Prisma.UserGetPayload;\n    if (profile) {\n      return profile;\n    }\n    profile = await this.prisma.userProfile.findUnique({\n      where: { userId: user.id },\n      rejectOnNotFound: false,\n    });\n    if (profile) {\n      return profile;\n    }\n\n    return await this.prisma.userProfile.create({\n      data: { userId: user.id },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileUpdateInput.html":{"url":"classes/UserProfileUpdateInput.html","title":"class - UserProfileUpdateInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileUpdateInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/profile/dto/profile-update.input.ts\n        \n\n            \n                Description\n            \n            \n                User profile update input\n\n            \n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Prisma } from '@prisma/client';\nimport { UserProfileEntity } from '../entities/profile.entity';\n\n/**\n * User profile update input\n */\n@InputType({\n  description: 'User profile update input',\n})\nexport class UserProfileUpdateInput\n  extends OmitType(\n    PartialType(UserProfileEntity),\n    ['updatedAt', 'userId'] as const,\n    InputType,\n  )\n  implements Omit {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.resolver.ts\n        \n\n            \n                Description\n            \n            \n                User entity resolver\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaClient: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.resolver.ts:12\n                            \n                        \n\n                \n                    \n                            Create user entity resolver.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        prismaClient\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            user\n                        \n                        \n                    \n                \n            \n            \n                \nuser(where: UserWhereUniqueInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {description: 'query where.'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.resolver.ts:26\n                \n            \n\n\n            \n                \n                    Query a user where unique\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                                UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Query a user where unique\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Query, Resolver } from '@nestjs/graphql';\nimport { PrismaClient } from '@prisma/client';\nimport { USER_NOT_FOUND } from 'src/constants';\nimport { UserWhereUniqueInput } from './dto';\nimport { UserEntity } from './entities/user.entity';\nimport { UserUnion } from './entities/user.union';\n\n/**\n * User entity resolver\n */\n@Resolver(() => UserEntity)\nexport class UserResolver {\n  /**\n   * Create user entity resolver.\n   * @param prismaClient Prisma client.\n   */\n  constructor(private readonly prismaClient: PrismaClient) {}\n\n  /**\n   * Query a user where unique\n   * @param where Query a user where unique\n   */\n  @Query(() => UserUnion, {\n    description: 'query where.',\n  })\n  user(\n    @Args({\n      name: 'where',\n      type: () => UserWhereUniqueInput,\n      description: 'query where',\n    })\n    where: UserWhereUniqueInput,\n  ) {\n    return this.prismaClient.user.findUnique({\n      where,\n      rejectOnNotFound: () => new Error(USER_NOT_FOUND),\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n            \n                Description\n            \n            \n                User service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                compareSecurity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(securitySmsService: SecuritySmsService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            Create user service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        securitySmsService\n                                                  \n                                                        \n                                                                        SecuritySmsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Security SMS service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comparePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(user: User, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:23\n                \n            \n\n\n            \n                \n                    Compore user password.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Need compare password user.\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        input password.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            compareSecurity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    compareSecurity(user: User, type: UserSecurityCompareType, security: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:34\n                \n            \n\n\n            \n                \n                    Compare secuity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Need compare user.\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                UserSecurityCompareType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        compare type.\n\n                                    \n                                \n                                \n                                    security\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Security object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { User } from '@prisma/client';\nimport { PasswordHelper } from 'src/helper';\nimport { SecuritySmsService } from 'src/security/security-sms.service';\nimport { UserSecurityCompareType } from './enums';\n\n/**\n * User service.\n */\n@Injectable()\nexport class UserService {\n  /**\n   * Create user service.\n   * @param securitySmsService Security SMS service.\n   */\n  constructor(private readonly securitySmsService: SecuritySmsService) {}\n\n  /**\n   * Compore user password.\n   * @param user Need compare password user.\n   * @param password input password.\n   */\n  async comparePassword(user: User, password: string): Promise {\n    if (!user?.password) return false;\n    return await PasswordHelper.compare(password, user.password);\n  }\n\n  /**\n   * Compare secuity.\n   * @param user Need compare user.\n   * @param type compare type.\n   * @param security Security object.\n   */\n  async compareSecurity(\n    user: User,\n    type: UserSecurityCompareType,\n    security: string,\n  ): Promise {\n    switch (type) {\n      case UserSecurityCompareType.PASSWORD:\n        return await this.comparePassword(user, security);\n      case UserSecurityCompareType.SMS_CODE:\n        const value = await this.securitySmsService.compareCode(\n          user.phone,\n          security,\n        );\n        if (value) {\n          return () => this.securitySmsService.updateCodeToUsed(value);\n        }\n        return false;\n      default:\n        return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserUpdateInput.html":{"url":"classes/UserUpdateInput.html","title":"class - UserUpdateInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserUpdateInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user-update.input.ts\n        \n\n            \n                Description\n            \n            \n                User update input.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Pick\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User new password', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-update.input.ts:25\n                            \n                        \n\n                \n                    \n                        User new password.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, PartialType, PickType } from '@nestjs/graphql';\nimport { Prisma } from '@prisma/client';\nimport { ViewerEntity } from '../entities/viewer.entity';\n\n/**\n * User update input.\n */\n@InputType({\n  description: 'User update input',\n})\nexport class UserUpdateInput\n  extends PartialType(\n    PickType(ViewerEntity, ['email', 'login', 'phone']),\n    InputType,\n  )\n  implements\n    Pick {\n  /**\n   * User new password.\n   */\n  @Field(() => String, {\n    description: 'User new password',\n    nullable: true,\n  })\n  password?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWhereUniqueInput.html":{"url":"classes/UserWhereUniqueInput.html","title":"class - UserWhereUniqueInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWhereUniqueInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user-where-unique.input.ts\n        \n\n            \n                Description\n            \n            \n                User where inique input\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, InputType, PartialType, PickType } from '@nestjs/graphql';\nimport { Prisma } from '@prisma/client';\nimport { ViewerEntity } from '../entities/viewer.entity';\n\n/**\n * User where inique input\n */\n@InputType({\n  description: 'User where inique input',\n})\nexport class UserWhereUniqueInput\n  extends PickType(\n    PartialType(ViewerEntity),\n    ['id', 'login', 'email', 'phone'] as const,\n    InputType,\n  )\n  implements Prisma.UserWhereUniqueInput {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ViewerEntity.html":{"url":"classes/ViewerEntity.html","title":"class - ViewerEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ViewerEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/viewer.entity.ts\n        \n\n            \n                Description\n            \n            \n                Viewer entity.\n\n            \n\n            \n                Extends\n            \n            \n                        UserInterface\n            \n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                phone\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                login\n                            \n                            \n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true, description: 'User bound E-Mail address.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/viewer.entity.ts:22\n                            \n                        \n\n                \n                    \n                        User bound E-Mail address.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true, description: 'User bound Phone full number.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/viewer.entity.ts:31\n                            \n                        \n\n                \n                    \n                        User bound Phone full number.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User registered date at.'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:44\n\n                            \n                        \n\n                \n                    \n                        User registered date at.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User ID'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:27\n\n                            \n                        \n\n                \n                    \n                        User ID\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true, description: 'User login name'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:36\n\n                            \n                        \n\n                \n                    \n                        User login name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     UserProfile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'The user profile'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:52\n\n                            \n                        \n\n                \n                    \n                        User profile.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { User } from '@prisma/client';\nimport { UserInterface } from './user.interface';\n\n/**\n * Viewer entity.\n */\n@ObjectType({\n  implements: [UserInterface],\n  description: 'Viewer entity.',\n})\nexport class ViewerEntity\n  extends UserInterface\n  implements Omit {\n  /**\n   * User bound E-Mail address.\n   */\n  @Field((type) => String, {\n    nullable: true,\n    description: 'User bound E-Mail address.',\n  })\n  email: string;\n\n  /**\n   * User bound Phone full number.\n   */\n  @Field((type) => String, {\n    nullable: true,\n    description: 'User bound Phone full number.',\n  })\n  phone: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ViewerResolver.html":{"url":"classes/ViewerResolver.html","title":"class - ViewerResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ViewerResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/viewer.resolver.ts\n        \n\n            \n                Description\n            \n            \n                Viewer entity resolver.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                phone\n                            \n                            \n                                    Async\n                                updateViewer\n                            \n                            \n                                viewer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, prismaClient: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/user/viewer.resolver.ts:38\n                            \n                        \n\n                \n                    \n                            Create viewer entity resolver.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User service.\n\n                                                        \n                                                \n                                                \n                                                        prismaClient\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            email\n                        \n                        \n                    \n                \n            \n            \n                \nemail(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/viewer.resolver.ts:68\n                \n            \n\n\n            \n                \n                    Resolve viewer email field.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parent context user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            phone\n                        \n                        \n                    \n                \n            \n            \n                \nphone(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/viewer.resolver.ts:54\n                \n            \n\n\n            \n                \n                    Resolver viewer phone field.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parent context user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateViewer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateViewer(context: ExecutionContext, args: UpdateViewerArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Update viewer'})@AuthorizationWith()\n                \n            \n\n            \n                \n                    Defined in src/user/viewer.resolver.ts:98\n                \n            \n\n\n            \n                \n                    Update viewer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Scofony exection context\n\n                                    \n                                \n                                \n                                    args\n                                    \n                                                UpdateViewerArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Update viewer args.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            viewer\n                        \n                        \n                    \n                \n            \n            \n                \nviewer(context: ExecutionContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {description: 'Query the HTTP endpoint Authorization user.'})@AuthorizationWith()\n                \n            \n\n            \n                \n                    Defined in src/user/viewer.resolver.ts:85\n                \n            \n\n\n            \n                \n                    Query the HTTP endpoint Authorization user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Socfony execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Args,\n  Mutation,\n  Parent,\n  Query,\n  ResolveField,\n  Resolver,\n} from '@nestjs/graphql';\nimport { PrismaClient, User } from '@prisma/client';\nimport { AuthorizationWith } from 'src/authorization.decorator';\nimport {\n  SECURITY_COMPARE_FAILED,\n  USER_EMAIL_FIELD_EXISTED,\n  USER_LOGIN_FIELD_EXISTED,\n  USER_PHONE_FIELD_EXISTED,\n} from 'src/constants';\nimport { Context } from 'src/context.decorator';\nimport { ExecutionContext } from 'src/execution-context';\nimport { PasswordHelper } from 'src/helper';\nimport { UpdateViewerArgs } from './dto/update-viewer.args';\nimport { ViewerEntity } from './entities/viewer.entity';\nimport { UserSecurityCompareType } from './enums';\nimport { UserService } from './user.service';\n\n/**\n * User error codes.\n */\nconst constants = {\n  USER_LOGIN_FIELD_EXISTED,\n  USER_PHONE_FIELD_EXISTED,\n  USER_EMAIL_FIELD_EXISTED,\n};\n\n/**\n * Viewer entity resolver.\n */\n@Resolver(() => ViewerEntity)\nexport class ViewerResolver {\n  /**\n   * Create viewer entity resolver.\n   * @param userService User service.\n   * @param prismaClient Prisma client.\n   */\n  constructor(\n    private readonly userService: UserService,\n    private readonly prismaClient: PrismaClient,\n  ) {}\n\n  /**\n   * Resolver viewer phone field.\n   * @param user Parent context user.\n   */\n  @ResolveField(() => String)\n  phone(@Parent() user: User) {\n    const { phone } = user;\n    if (phone) {\n      return phone.replace(/(.*)\\d{4}(\\d{4})/, '$1****$2');\n    }\n\n    return phone;\n  }\n\n  /**\n   * Resolve viewer email field.\n   * @param user Parent context user.\n   */\n  @ResolveField(() => String)\n  email(@Parent() user: User) {\n    const { email } = user;\n    if (email) {\n      return email.replace(/^(\\w{1}).*?(\\w{1}?)\\@(.*)$/, '$1***$2@$3');\n    }\n\n    return email;\n  }\n\n  /**\n   * Query the HTTP endpoint Authorization user.\n   * @param context Socfony execution context.\n   */\n  @Query(() => ViewerEntity, {\n    description: 'Query the HTTP endpoint Authorization user.',\n  })\n  @AuthorizationWith()\n  viewer(@Context() context: ExecutionContext) {\n    return context.user;\n  }\n\n  /**\n   * Update viewer.\n   * @param context Scofony exection context\n   * @param args Update viewer args.\n   */\n  @Mutation(() => ViewerEntity, {\n    description: 'Update viewer',\n  })\n  @AuthorizationWith()\n  async updateViewer(\n    @Context() context: ExecutionContext,\n    @Args({\n      type: () => UpdateViewerArgs,\n      description: 'Update viewer args.',\n    })\n    args: UpdateViewerArgs,\n  ) {\n    const { data, security, type, newPhoneSecurity } = args;\n    const { user } = context;\n    for await (const key of Object.keys(data)) {\n      // Convert to password hash\n      if (key === 'password') {\n        data[key] = await PasswordHelper.hash(data[key]);\n        continue;\n      }\n\n      // Check whether the unique field is used by other users\n      const other = await this.prismaClient.user.findUnique({\n        where: { [key]: data[key] },\n        rejectOnNotFound: false,\n      });\n      if (other && other.id !== user.id) {\n        throw new Error(constants[`USER_${key.toUpperCase()}_FIELD_EXISTED`]);\n      }\n\n      // Check whether the new mobile phone number verification code matches\n      if (key === 'phone' && data[key] !== user.phone) {\n        const compared = await this.userService.compareSecurity(\n          Object.assign({}, user, { phone: data[key] }),\n          UserSecurityCompareType.SMS_CODE,\n          newPhoneSecurity,\n        );\n        if (compared) {\n          if (compared instanceof Function) {\n            compared();\n          }\n          continue;\n        }\n\n        throw new Error(SECURITY_COMPARE_FAILED);\n      }\n    }\n    const compared = await this.userService.compareSecurity(\n      user,\n      type,\n      security,\n    );\n    if (compared) {\n      if (compared instanceof Function) {\n        compared();\n      }\n      return (context.user = await this.prismaClient.user.update({\n        where: { id: user.id },\n        data,\n      }));\n    }\n\n    throw new Error(SECURITY_COMPARE_FAILED);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.config.ts\n            \n            interface\n            SocfonyConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app.config.ts\n            \n            function\n            getConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.config.ts\n            \n            function\n            loadConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/authorization-token.resolver.ts\n            \n            class\n            AuthorizationTokenEntityResolver\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/authorization-token/authorization-token.service.ts\n            \n            injectable\n            AuthorizationTokenService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_METADATA_HAS_AUTHORIZATION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_METADATA_HAS_AUTHORIZATION_TYPE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_TOKEN_DEFAULT_EXPIRED_IN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_TOKEN_DEFAULT_EXPIRED_UNIT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_IN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_UNIT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_TOKEN_VVALIDITY_PERIOD_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/dto/create-authorization-token.args.ts\n            \n            class\n            CreateAuthorizationTokenArgs\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/authorization-token/entities/authorization-token.entity.ts\n            \n            class\n            AuthorizationTokenEntity\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/authorization-token/types.ts\n            \n            interface\n            AuthorizationTokenValidityPeriod\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/authorization.decorator.ts\n            \n            interface\n            AuthDecoratorOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/authorization.decorator.ts\n            \n            function\n            Authorization\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization.decorator.ts\n            \n            variable\n            AuthorizationWith\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization.decorator.ts\n            \n            variable\n            AuthorizationWithout\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization.guard.ts\n            \n            guard\n            AuthorizationGuard\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            AUTHORIZATION_TOKEN_CREATE_USER_WHERE_ALLOW_ONE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            AUTHORIZATION_TOKEN_NOT_FOUND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            MEDIA_TYPE_DONT_SUPPORTED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            SECURITY_COMPARE_FAILED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            UNAUTHORIZED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            USER_EMAIL_FIELD_EXISTED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            USER_LOGIN_FIELD_EXISTED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            USER_NOT_FOUND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            USER_NOT_SET_PHONE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            USER_PHONE_FIELD_EXISTED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/context.decorator.ts\n            \n            variable\n            Context\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/execution-context.ts\n            \n            class\n            ExecutionContext\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/helper/id.helper.ts\n            \n            variable\n            alphabet\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper/id.helper.ts\n            \n            variable\n            custom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper/id.helper.ts\n            \n            variable\n            id\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper/id.helper.ts\n            \n            variable\n            numeral\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper/id.helper.ts\n            \n            variable\n            readability\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper/password.helper.ts\n            \n            function\n            compare\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper/password.helper.ts\n            \n            function\n            hash\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/moment/entities/media.entity.ts\n            \n            class\n            MomentAudioMedia\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/moment/entities/media.entity.ts\n            \n            class\n            MomentImageMedia\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/moment/entities/media.entity.ts\n            \n            class\n            MomentMediaCommon\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/moment/entities/media.entity.ts\n            \n            class\n            MomentVideoMedia\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/moment/entities/media.entity.ts\n            \n            variable\n            MomentMedia\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/moment/entities/moment.entity.ts\n            \n            class\n            MomentEntity\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/prisma/middleware/logger.middleware.ts\n            \n            function\n            PrismaLoggerMiddleware\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.module.ts\n            \n            variable\n            client\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/security/security-sms.resolver.ts\n            \n            class\n            SecuritySmsResolver\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/security/security-sms.service.ts\n            \n            injectable\n            SecuritySmsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tencent-cloud/common/index.ts\n            \n            function\n            getCredential\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tencent-cloud/cos/cos.resolver.ts\n            \n            class\n            TencentCloudCosResolver\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/tencent-cloud/cos/entities/cos.entity.ts\n            \n            class\n            TencentCloudCosCredentials\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/tencent-cloud/cos/soc.service.ts\n            \n            injectable\n            TencentCloudCosService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/tencent-cloud/sms/sms.service.ts\n            \n            injectable\n            TencentCloudSmsService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/tencent-cloud/sts/entities/sts.entity.ts\n            \n            class\n            TencentCloudStsCredentials\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/tencent-cloud/sts/entities/sts.entity.ts\n            \n            class\n            TencentCloudStsFederationToken\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/tencent-cloud/sts/sts.service.ts\n            \n            injectable\n            TencentCloudStsService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/dto/update-viewer.args.ts\n            \n            class\n            UpdateViewerArgs\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/dto/user-update.input.ts\n            \n            class\n            UserUpdateInput\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/dto/user-where-unique.input.ts\n            \n            class\n            UserWhereUniqueInput\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/user/entities/user.interface.ts\n            \n            class\n            UserInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/user/entities/user.union.ts\n            \n            function\n            resolveType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.union.ts\n            \n            variable\n            UserUnion\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/entities/viewer.entity.ts\n            \n            class\n            ViewerEntity\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/user/profile/dto/profile-update.input.ts\n            \n            class\n            UserProfileUpdateInput\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/profile/entities/profile.entity.ts\n            \n            class\n            UserProfileEntity\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/user/profile/profile.resolver.ts\n            \n            class\n            UserProfileResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/profile/profile.service.ts\n            \n            injectable\n            UserProfileService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/user-interface.resolver.ts\n            \n            class\n            UserInterfaceResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/user/viewer.resolver.ts\n            \n            class\n            ViewerResolver\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/user/viewer.resolver.ts\n            \n            variable\n            constants\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.6.12\n        \n            @nestjs/core : ^7.6.12\n        \n            @nestjs/graphql : ^7.9.9\n        \n            @nestjs/platform-express : ^7.6.12\n        \n            @prisma/client : ^2.17.0\n        \n            apollo-server-express : ^2.21.0\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.2\n        \n            class-validator : ^0.13.1\n        \n            dayjs : ^1.10.4\n        \n            dotenv : ^8.2.0\n        \n            express : ^4.17.1\n        \n            graphql : ^15.5.0\n        \n            nanoid : ^3.1.20\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^6.6.3\n        \n            tencentcloud-sdk-nodejs : ^4.0.65\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AllowUploadFileType   (src/.../cos.resolver.ts)\n                        \n                        \n                            HasTokenExpiredType   (src/.../enums.ts)\n                        \n                        \n                            MomentMediaType   (src/.../media.entity.ts)\n                        \n                        \n                            UserSecurityCompareType   (src/.../enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tencent-cloud/cos/cos.resolver.ts\n    \n        \n            \n                \n                    \n                        \n                        AllowUploadFileType\n                    \n                \n                    \n                        \n                            Allow upload File MIME-type.\n\n                        \n                    \n                        \n                            \n                                 JPG\n                            \n                        \n                        \n                            \n                                Value : .jpg\n                            \n                        \n                        \n                            \n                                 PNG\n                            \n                        \n                        \n                            \n                                Value : .png\n                            \n                        \n                        \n                            \n                                 GIF\n                            \n                        \n                        \n                            \n                                Value : .gif\n                            \n                        \n                        \n                            \n                                 MP4\n                            \n                        \n                        \n                            \n                                Value : .mp4\n                            \n                        \n                        \n                            \n                                 OGG\n                            \n                        \n                        \n                            \n                                Value : .ogg\n                            \n                        \n                        \n                            \n                                 MP3\n                            \n                        \n                        \n                            \n                                Value : .mp3\n                            \n                        \n                        \n                            \n                                 WAV\n                            \n                        \n                        \n                            \n                                Value : .wav\n                            \n                        \n            \n        \n\n    src/authorization-token/enums.ts\n    \n        \n            \n                \n                    \n                        \n                        HasTokenExpiredType\n                    \n                \n                    \n                        \n                            AuthorizationToken has expired type.\n\n                        \n                    \n                        \n                            \n                                 AUTH\n                            \n                        \n                        \n                            \n                                 REFRESH\n                            \n                        \n            \n        \n\n    src/moment/entities/media.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        MomentMediaType\n                    \n                \n                    \n                        \n                            Media type.\n\n                        \n                    \n                        \n                            \n                                 VIDEO\n                            \n                        \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                 AUDIO\n                            \n                        \n            \n        \n\n    src/user/enums.ts\n    \n        \n            \n                \n                    \n                        \n                        UserSecurityCompareType\n                    \n                \n                    \n                        \n                            User security compare type.\n\n                        \n                    \n                        \n                            \n                                 PASSWORD\n                            \n                        \n                        \n                            \n                                 SMS_CODE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Authorization   (src/.../authorization.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            compare   (src/.../password.helper.ts)\n                        \n                        \n                            getConfig   (src/.../app.config.ts)\n                        \n                        \n                            getCredential   (src/.../index.ts)\n                        \n                        \n                            hash   (src/.../password.helper.ts)\n                        \n                        \n                            loadConfig   (src/.../app.config.ts)\n                        \n                        \n                            PrismaLoggerMiddleware   (src/.../logger.middleware.ts)\n                        \n                        \n                            resolveType   (src/.../user.union.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/authorization.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Authorization\n                        \n                        \n                    \n                \n            \n            \n                \nAuthorization(options?)\n                \n            \n\n\n\n\n            \n                \n                    Need validate HTTP endpoint Authorization token decorator.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Create SOcfony bootstrap.\n\n\n                \n            \n        \n    \n    src/helper/password.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            compare\n                        \n                        \n                    \n                \n            \n            \n                \ncompare(password, encrypted)\n                \n            \n\n\n\n\n            \n                \n                    Compare password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        password text.\n\n                                    \n                                \n                                \n                                    encrypted\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        encrpyted password text.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hash\n                        \n                        \n                    \n                \n            \n            \n                \nhash(password)\n                \n            \n\n\n\n\n            \n                \n                    Create a password encrpyted hash text.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        password text.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getConfig\n                        \n                        \n                    \n                \n            \n            \n                \ngetConfig()\n                \n            \n\n\n\n\n            \n                \n                    Get app config.\n\n\n                    \n                    \n                    \n                        Returns :         SocfonyConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadConfig\n                        \n                        \n                    \n                \n            \n            \n                \nloadConfig(path?)\n                \n            \n\n\n\n\n            \n                \n                    Load Socfony ENV config file.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        ENV file path.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/tencent-cloud/common/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getCredential\n                        \n                        \n                    \n                \n            \n            \n                \ngetCredential()\n                \n            \n\n\n\n\n            \n                \n                    Get Tencent Cloud common credential.\n\n\n                    \n                        Returns :     Credential\n\n                    \n                \n            \n        \n    \n    src/prisma/middleware/logger.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            PrismaLoggerMiddleware\n                        \n                        \n                    \n                \n            \n            \n                \nPrismaLoggerMiddleware(logger)\n                \n            \n\n\n\n\n            \n                \n                    Create Prisma logger middleware helper.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    logger\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Logger\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Prisma.Middleware\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/user/entities/user.union.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            resolveType\n                        \n                        \n                    \n                \n            \n            \n                \nresolveType(value, context)\n                \n            \n\n\n\n\n            \n                \n                    resolve UserUnion real type\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User object.\n\n                                    \n                                \n                                \n                                    context\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Application context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSocfony\nSocfony is a full-stack open source software that builds full-platform application with social networking as the core. Socfony plugin mechanism allows more developers or teams to write more functions for it, can help you solve the complexity of developing full-platform software.\n\n\n\n\nEcosystem\n\n\n\nProject\nStatus\nDescription\n\n\n\n\nSocfony App\n\nSocfony App with Flutter\n\n\n\nDocumentation\nNo document has been written yet.\nLicense\nSocfony is BSD-3-Clause licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nBSD 3-Clause License\nCopyright (c) 2021, Byte Gem\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\nNeither the name of the copyright holder nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthorizationTokenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MomentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SecurityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TencentCloudModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthorizationTokenModule\n\n\n\ncluster_AuthorizationTokenModule_exports\n\n\n\ncluster_AuthorizationTokenModule_providers\n\n\n\ncluster_MomentModule\n\n\n\ncluster_SecurityModule\n\n\n\ncluster_SecurityModule_exports\n\n\n\ncluster_SecurityModule_providers\n\n\n\ncluster_TencentCloudModule\n\n\n\ncluster_TencentCloudModule_exports\n\n\n\ncluster_TencentCloudModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserProfileModule\n\n\n\ncluster_UserProfileModule_exports\n\n\n\ncluster_UserProfileModule_providers\n\n\n\n\nAuthorizationTokenModule\n\nAuthorizationTokenModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthorizationTokenModule->AppModule\n\n\n\n\n\nAuthorizationTokenService \n\nAuthorizationTokenService \n\nAuthorizationTokenService  -->\n\nAuthorizationTokenModule->AuthorizationTokenService \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthorizationTokenModule -->\n\nPrismaModule->AuthorizationTokenModule\n\n\n\n\n\nSecurityModule\n\nSecurityModule\n\nSecurityModule -->\n\nPrismaModule->SecurityModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nMomentModule\n\nMomentModule\n\nMomentModule -->\n\nPrismaModule->MomentModule\n\n\n\n\n\nUserProfileModule\n\nUserProfileModule\n\nUserProfileModule -->\n\nPrismaModule->UserProfileModule\n\n\n\nUserModule -->\n\nSecurityModule->UserModule\n\n\n\nAppModule -->\n\nSecurityModule->AppModule\n\n\n\n\n\nSecuritySmsService \n\nSecuritySmsService \n\nSecuritySmsService  -->\n\nSecurityModule->SecuritySmsService \n\n\n\n\n\nTencentCloudModule\n\nTencentCloudModule\n\nSecurityModule -->\n\nTencentCloudModule->SecurityModule\n\n\n\nAppModule -->\n\nTencentCloudModule->AppModule\n\n\n\n\n\nTencentCloudCosService \n\nTencentCloudCosService \n\nTencentCloudCosService  -->\n\nTencentCloudModule->TencentCloudCosService \n\n\n\n\n\nTencentCloudSmsService \n\nTencentCloudSmsService \n\nTencentCloudSmsService  -->\n\nTencentCloudModule->TencentCloudSmsService \n\n\n\n\n\nTencentCloudStsService \n\nTencentCloudStsService \n\nTencentCloudStsService  -->\n\nTencentCloudModule->TencentCloudStsService \n\n\n\nAuthorizationTokenModule -->\n\nUserModule->AuthorizationTokenModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthorizationTokenService\n\nAuthorizationTokenService\n\nAuthorizationTokenModule -->\n\nAuthorizationTokenService->AuthorizationTokenModule\n\n\n\n\n\nSecuritySmsService\n\nSecuritySmsService\n\nSecurityModule -->\n\nSecuritySmsService->SecurityModule\n\n\n\n\n\nTencentCloudCosService\n\nTencentCloudCosService\n\nTencentCloudModule -->\n\nTencentCloudCosService->TencentCloudModule\n\n\n\n\n\nTencentCloudSmsService\n\nTencentCloudSmsService\n\nTencentCloudModule -->\n\nTencentCloudSmsService->TencentCloudModule\n\n\n\n\n\nTencentCloudStsService\n\nTencentCloudStsService\n\nTencentCloudModule -->\n\nTencentCloudStsService->TencentCloudModule\n\n\n\nUserModule -->\n\nUserProfileModule->UserModule\n\n\n\n\n\nUserProfileService \n\nUserProfileService \n\nUserProfileService  -->\n\nUserProfileModule->UserProfileService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserProfileService\n\nUserProfileService\n\nUserProfileModule -->\n\nUserProfileService->UserProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    26 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            alphabet   (src/.../id.helper.ts)\n                        \n                        \n                            AUTH_METADATA_HAS_AUTHORIZATION   (src/.../constants.ts)\n                        \n                        \n                            AUTH_METADATA_HAS_AUTHORIZATION_TYPE   (src/.../constants.ts)\n                        \n                        \n                            AUTH_TOKEN_DEFAULT_EXPIRED_IN   (src/.../constants.ts)\n                        \n                        \n                            AUTH_TOKEN_DEFAULT_EXPIRED_UNIT   (src/.../constants.ts)\n                        \n                        \n                            AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_IN   (src/.../constants.ts)\n                        \n                        \n                            AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_UNIT   (src/.../constants.ts)\n                        \n                        \n                            AUTH_TOKEN_VVALIDITY_PERIOD_KEY   (src/.../constants.ts)\n                        \n                        \n                            AUTHORIZATION_TOKEN_CREATE_USER_WHERE_ALLOW_ONE   (src/.../constants.ts)\n                        \n                        \n                            AUTHORIZATION_TOKEN_NOT_FOUND   (src/.../constants.ts)\n                        \n                        \n                            AuthorizationWith   (src/.../authorization.decorator.ts)\n                        \n                        \n                            AuthorizationWithout   (src/.../authorization.decorator.ts)\n                        \n                        \n                            client   (src/.../prisma.module.ts)\n                        \n                        \n                            constants   (src/.../viewer.resolver.ts)\n                        \n                        \n                            Context   (src/.../context.decorator.ts)\n                        \n                        \n                            custom   (src/.../id.helper.ts)\n                        \n                        \n                            id   (src/.../id.helper.ts)\n                        \n                        \n                            MEDIA_TYPE_DONT_SUPPORTED   (src/.../constants.ts)\n                        \n                        \n                            MomentMedia   (src/.../media.entity.ts)\n                        \n                        \n                            numeral   (src/.../id.helper.ts)\n                        \n                        \n                            readability   (src/.../id.helper.ts)\n                        \n                        \n                            SECURITY_COMPARE_FAILED   (src/.../constants.ts)\n                        \n                        \n                            UNAUTHORIZED   (src/.../constants.ts)\n                        \n                        \n                            USER_EMAIL_FIELD_EXISTED   (src/.../constants.ts)\n                        \n                        \n                            USER_LOGIN_FIELD_EXISTED   (src/.../constants.ts)\n                        \n                        \n                            USER_NOT_FOUND   (src/.../constants.ts)\n                        \n                        \n                            USER_NOT_SET_PHONE   (src/.../constants.ts)\n                        \n                        \n                            USER_PHONE_FIELD_EXISTED   (src/.../constants.ts)\n                        \n                        \n                               (src/.../main.ts)\n                        \n                        \n                            UserUnion   (src/.../user.union.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helper/id.helper.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            alphabet\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (size: number): string =>\n    customAlphabet('qwertyuiopasdfghjklzxcvbnm', size)()\n                        \n                    \n\n                \n                    \n                        Generate alphabet(a-z) ID.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            custom\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (alphabet: string, size: number) =>\n    customAlphabet(alphabet, size)()\n                        \n                    \n\n                \n                    \n                        Generate a custom alphabet ID.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (size: number): string => nanoid(size)\n                        \n                    \n\n                \n                    \n                        Generate secure URL-friendly unique ID\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numeral\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (size: number): string =>\n    customAlphabet('0123456789', size)()\n                        \n                    \n\n                \n                    \n                        Generate numeral ID.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            readability\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (size: number): string =>\n    customAlphabet('23456789qwertyupasdfghjklzxcvbnm', size)()\n                        \n                    \n\n                \n                    \n                        Generate readability(23456789qwertyupasdfghjklzxcvbnm) ID.\n\n                    \n                \n\n            \n        \n\n    src/authorization-token/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_METADATA_HAS_AUTHORIZATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'metadata has authorization'\n                        \n                    \n\n                \n                    \n                        metadata has authorization\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_METADATA_HAS_AUTHORIZATION_TYPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'metadata has authorization type'\n                        \n                    \n\n                \n                    \n                        metadata has authorization type\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_TOKEN_DEFAULT_EXPIRED_IN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n\n                \n                    \n                        token default expired in.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_TOKEN_DEFAULT_EXPIRED_UNIT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'days'\n                        \n                    \n\n                \n                    \n                        token default expired in unit type.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_IN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n\n                \n                    \n                        token default refresh expired in.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_UNIT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'months'\n                        \n                    \n\n                \n                    \n                        token default refresh expired in unit type.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_TOKEN_VVALIDITY_PERIOD_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'auth token validity period key'\n                        \n                    \n\n                \n                    \n                        auth token validity period key\n\n                    \n                \n\n            \n        \n\n    src/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AUTHORIZATION_TOKEN_CREATE_USER_WHERE_ALLOW_ONE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'AUTHORIZATION_TOKEN_CREATE_USER_WHERE_ALLOW_ONE'\n                        \n                    \n\n                \n                    \n                        Authorization Token create user where allow one\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTHORIZATION_TOKEN_NOT_FOUND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'AUTHORIZATION_TOKEN_NOT_FOUND'\n                        \n                    \n\n                \n                    \n                        Authorization Token Not Found\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MEDIA_TYPE_DONT_SUPPORTED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'MEDIA_TYPE_DONT_SUPPORTED'\n                        \n                    \n\n                \n                    \n                        Don't supported media type.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SECURITY_COMPARE_FAILED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'SECURITY_COMPARE_FAILED'\n                        \n                    \n\n                \n                    \n                        security code validate error\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UNAUTHORIZED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'UNAUTHORIZED'\n                        \n                    \n\n                \n                    \n                        User unauthorized\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_EMAIL_FIELD_EXISTED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'USER_EMAIL_FIELD_EXISTED'\n                        \n                    \n\n                \n                    \n                        user email existed.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_LOGIN_FIELD_EXISTED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'USER_LOGIN_FIELD_EXISTED'\n                        \n                    \n\n                \n                    \n                        User login existed\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_NOT_FOUND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'USER_NOT_FOUND'\n                        \n                    \n\n                \n                    \n                        User not found\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_NOT_SET_PHONE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'USER_NOT_SET_PHONE'\n                        \n                    \n\n                \n                    \n                        User not set phone.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_PHONE_FIELD_EXISTED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'USER_PHONE_FIELD_EXISTED'\n                        \n                    \n\n                \n                    \n                        user phone existed.\n\n                    \n                \n\n            \n        \n\n    src/authorization.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AuthorizationWith\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () =>\n  Authorization({\n    hasAuthorization: true,\n    type: HasTokenExpiredType.AUTH,\n  })\n                        \n                    \n\n                \n                    \n                        Http auth validate token.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AuthorizationWithout\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () =>\n  Authorization({\n    hasAuthorization: false,\n    type: HasTokenExpiredType.AUTH,\n  })\n                        \n                    \n\n                \n                    \n                        Http auth, without validate token.\n\n                    \n                \n\n            \n        \n\n    src/prisma/prisma.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            client\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ClassProvider\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  provide: PrismaClient,\n  useClass: class\n    extends PrismaClient\n    implements OnModuleInit, OnModuleDestroy {\n    private readonly logger = new Logger('Prisma');\n\n    /**\n     * Prisma client constructor\n     */\n    constructor() {\n      super({\n        datasources: {\n          database: { url: process.env.DATABASE_URL },\n        },\n      });\n    }\n\n    /**\n     * NestJS module init hook callback.\n     */\n    async onModuleInit() {\n      // Prisma connect database.\n      await this.$connect();\n\n      // Set Prisma client global logger middleware.\n      this.$use(PrismaLoggerMiddleware(this.logger));\n    }\n\n    /**\n     * NestJS module destory hook callback.\n     */\n    async onModuleDestroy() {\n      // Prisma disconnect database.\n      await this.$disconnect();\n    }\n  },\n}\n                        \n                    \n\n                \n                    \n                        Prisma class provider\n\n                    \n                \n\n            \n        \n\n    src/user/viewer.resolver.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            constants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  USER_LOGIN_FIELD_EXISTED,\n  USER_PHONE_FIELD_EXISTED,\n  USER_EMAIL_FIELD_EXISTED,\n}\n                        \n                    \n\n                \n                    \n                        User error codes.\n\n                    \n                \n\n            \n        \n\n    src/context.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(function (\n  _data: unknown,\n  context: ExecutionContext,\n): IContext {\n  if (context.getType() === 'graphql') {\n    return GqlExecutionContext.create(context).getContext();\n  }\n\n  return context.switchToHttp().getRequest().context;\n})\n                        \n                    \n\n                \n                    \n                        Get Socfony execution context decorator.\n\n                    \n                \n\n            \n        \n\n    src/moment/entities/media.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MomentMedia\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createUnionType({\n  name: 'MomentMedia',\n  types: () => [MomentAudioMedia, MomentImageMedia, MomentVideoMedia],\n  description: 'Moment media.',\n  resolveType(value: MomentMediaCommon) {\n    switch (value?.type) {\n      case MomentMediaType.AUDIO:\n        return MomentAudioMedia;\n      case MomentMediaType.IMAGE:\n        return MomentImageMedia;\n      case MomentMediaType.VIDEO:\n        return MomentVideoMedia;\n      default:\n        throw new Error(MEDIA_TYPE_DONT_SUPPORTED);\n    }\n  },\n})\n                        \n                    \n\n                \n                    \n                        Moment media union type.\n\n                    \n                \n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.argv\n                        \n                    \n\n                \n                    \n                        Get Socfony ENV filename\n\n                    \n                \n\n            \n        \n\n    src/user/entities/user.union.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserUnion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createUnionType({\n  name: 'userUnion',\n  types: () => [UserEntity, ViewerEntity],\n  resolveType,\n  description: 'User union type.',\n})\n                        \n                    \n\n                \n                    \n                        User union type.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
