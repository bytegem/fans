var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.115,1,2.447]],["body/modules/AppModule.html",[0,1.969,1,4.877,2,1.629,3,1.734,4,1.984,5,1.984,6,1.734,7,2.502,8,1.852,9,3.146,10,3.146,11,4.077,12,0.022,13,3.126,14,3.766,15,3.766,16,3.766,17,2.681,18,1.984,19,1.852,20,0.228,21,0.176,22,0.15,23,3.686,24,0.15,25,4.979,26,2.885,27,3.537,28,0.435,29,3.41,30,1.03,31,1.629,32,1.734,33,1.951,34,1.03,35,3.686,36,0.777,37,3.686,38,3.41,39,3.686,40,1.089,41,2.136,42,3.686,43,3.686,44,4.979,45,2.79,46,3.124,47,3.146,48,2.209,49,0.921,50,1.532,51,1.444,52,3.686,53,3.686,54,3.686,55,1.03,56,2.136,57,1.245,58,3.686,59,1.151,60,3.686,61,4.979,62,3.686,63,2.524,64,3.686,65,4.979,66,3.686,67,2.79,68,2.79,69,0.228,70,0.184,71,0.011,72,0.015,73,0.011]],["title/interfaces/AuthDecoratorOptions.html",[74,1.681,75,2.704]],["body/interfaces/AuthDecoratorOptions.html",[12,0.022,20,0.235,21,0.181,22,0.155,24,0.155,28,0.378,30,1.06,40,2.055,46,2.381,47,3.239,55,1.419,56,3.316,57,0.949,59,1.185,69,0.378,71,0.011,72,0.015,73,0.011,74,1.786,75,4.332,76,2.599,77,2.599,78,4.625,79,4.332,80,0.382,81,1.676,82,1.444,83,4.489,84,0.706,85,3.59,86,2.274,87,3.541,88,5.078,89,5.078,90,3.796,91,2.599,92,3.478,93,3.239,94,2.873,95,2.734,96,4.112,97,3.07,98,1.786,99,1.707,100,3.239,101,3.796,102,3.796,103,2.199,104,3.239,105,3.796,106,3.796,107,3.796,108,3.316,109,3.796,110,2.199,111,2.873,112,2.873,113,1.786]],["title/guards/AuthorizationGuard.html",[46,2.241,114,2.447]],["body/guards/AuthorizationGuard.html",[12,0.022,20,0.145,21,0.111,22,0.096,24,0.244,28,0.386,30,0.654,31,3.042,32,3.133,33,2.793,34,1.002,36,0.493,40,1.845,41,1.356,45,1.771,46,2.249,48,2.339,49,0.585,55,1.218,57,1.492,59,1.119,69,0.145,70,0.117,71,0.007,72,0.011,73,0.007,80,0.235,82,1.367,84,0.689,85,2.249,86,2.098,87,2.831,91,2.456,92,2.456,93,1.997,94,1.771,95,1.93,96,3.745,97,1.176,99,1.745,108,1.356,114,3.807,115,2.34,116,1.997,117,1.119,118,1.835,119,4.887,120,4.359,121,3.586,122,3.586,123,3.586,124,3.586,125,1.119,126,2.34,127,6.121,128,3.214,129,0.959,130,2.34,131,0.948,132,1.709,133,1.22,134,4.88,135,3.06,136,1.252,137,1.326,138,3.586,139,2.34,140,3.586,141,1.553,142,1.93,143,2.34,144,2.34,145,3.586,146,3.586,147,3.586,148,2.34,149,3.586,150,3.586,151,2.34,152,3.586,153,2.34,154,3.586,155,1.584,156,3.586,157,2.34,158,1.802,159,3.721,160,1.119,161,2.34,162,2.34,163,1.771,164,1.602,165,1.771,166,1.771,167,1.468,168,0.865,169,2.051,170,1.439,171,3.06,172,1.356,173,1.997,174,1.997,175,3.586,176,3.586,177,2.078,178,0.672,179,2.34,180,2.34,181,1.252,182,2.34,183,2.34,184,2.34,185,2.34,186,2.34,187,2.34,188,2.34,189,2.34,190,2.34,191,1.468,192,0.73,193,2.34]],["title/classes/AuthorizationTokenEntity.html",[70,0.178,194,2.447]],["body/classes/AuthorizationTokenEntity.html",[12,0.022,20,0.205,21,0.158,22,0.136,24,0.282,28,0.33,34,0.928,36,0.7,40,1.908,49,0.83,69,0.205,70,0.166,71,0.01,72,0.014,73,0.01,80,0.334,81,1.53,84,0.612,86,2.329,97,2.683,98,2.513,100,4.932,129,1.007,168,1.714,178,1.328,194,3.175,195,0.742,196,2.618,197,5.374,198,2.835,199,3.054,200,3.657,201,4.557,202,3.094,203,3.301,204,1.698,205,2.382,206,3.819,207,3.322,208,3.625,209,3.322,210,1.357,211,5.779,212,3.322,213,6.296,214,2.686,215,3.322,216,2.496,217,2.328,218,3.322,219,1.16,220,2.496,221,2.181,222,2.835,223,2.835,224,4.163]],["title/classes/AuthorizationTokenEntityResolver.html",[70,0.178,225,2.447]],["body/classes/AuthorizationTokenEntityResolver.html",[12,0.022,20,0.142,21,0.11,22,0.094,24,0.258,26,2.053,28,0.402,31,2.543,32,1.667,33,2.387,34,1.66,36,0.485,40,1.921,41,3.201,48,1.899,49,0.576,55,0.99,57,1.308,59,1.513,69,0.142,70,0.115,71,0.007,72,0.01,73,0.007,80,0.232,82,1.236,83,2.426,84,0.655,86,2.09,87,1.334,97,3.126,98,2.927,99,1.543,108,1.334,113,1.084,117,1.106,118,1.425,125,1.106,128,3.098,129,0.867,131,1.57,132,1.545,133,1.103,136,1.237,137,1.792,141,1.354,158,2.776,165,1.743,169,1.667,170,1.17,177,2.808,178,1.232,181,1.237,191,2.222,192,1.106,194,4.651,195,0.514,196,2.297,199,2.169,204,1.354,205,0.902,208,3.04,217,1.31,219,1.693,221,1.667,222,1.966,223,3.684,225,2.426,226,1.966,227,4.317,228,3.023,229,2.303,230,2.303,231,2.303,232,1.743,233,3.941,234,2.303,235,3.023,236,2.303,237,2.682,238,2.303,239,3.282,240,2.222,241,2.303,242,2.985,243,2.303,244,2.303,245,2.303,246,2.303,247,2.303,248,2.053,249,2.222,250,2.426,251,1.445,252,1.743,253,1.577,254,1.445,255,1.743,256,1.334,257,1.445,258,1.24,259,1.334,260,1.743,261,2.303,262,1.966,263,2.303,264,2.303,265,1.577,266,3.543,267,2.303,268,2.303,269,3.543,270,1.473,271,2.303,272,1.743,273,2.303,274,1.24,275,1.743,276,3.543,277,2.303,278,1.157,279,1.966,280,1.018,281,1.966,282,2.303,283,2.303,284,2.303,285,2.303,286,2.303]],["title/modules/AuthorizationTokenModule.html",[0,1.115,11,2.241]],["body/modules/AuthorizationTokenModule.html",[0,2.078,2,1.925,3,2.05,4,2.345,5,2.345,6,2.05,7,3.074,8,3.074,11,4.5,12,0.022,13,3.203,16,3.944,17,2.992,18,2.345,19,2.189,20,0.269,21,0.208,22,0.178,24,0.178,27,3.486,28,0.412,29,3.806,30,1.217,40,1.903,41,2.524,69,0.269,70,0.217,71,0.013,72,0.016,73,0.013,86,1.835,128,3.883,165,3.298,196,1.811,225,3.806,287,3.718,288,4.357,289,3.718,290,3.718,291,4.357,292,2.984,293,4.357,294,4.357]],["title/injectables/AuthorizationTokenService.html",[128,1.923,160,1.115]],["body/injectables/AuthorizationTokenService.html",[12,0.022,20,0.129,21,0.1,22,0.085,24,0.217,28,0.374,30,0.584,34,1.484,40,1.788,41,3.218,48,1.803,49,0.523,55,1.607,57,1.327,59,0.653,69,0.129,70,0.104,71,0.006,72,0.01,73,0.006,80,0.211,82,1.182,84,0.677,85,2.062,86,2.312,87,2.666,96,2.062,99,1.607,103,1.212,108,1.212,113,0.984,117,1.026,118,2.038,125,1.026,128,1.77,129,0.88,131,1.403,132,1.477,133,1.119,136,1.855,137,1.702,141,1.398,142,2.693,160,1.026,167,1.312,169,1.547,170,1.085,177,3.577,178,1.26,181,2.009,191,2.547,192,1.437,196,2.309,200,3.152,201,3.466,202,1.212,203,0.984,206,2.898,208,2.887,210,1.185,228,3.466,233,1.433,254,1.312,257,1.312,258,1.126,259,2.666,260,1.583,265,1.433,270,2.567,274,1.126,278,1.652,295,1.051,296,1.785,297,4.061,298,3.287,299,4.602,300,4.061,301,1.785,302,3.097,303,2.092,304,3.287,305,2.092,306,2.092,307,3.287,308,3.287,309,2.062,310,3.609,311,2.092,312,2.092,313,2.092,314,2.092,315,2.806,316,2.806,317,2.092,318,2.092,319,2.092,320,2.092,321,2.488,322,3.152,323,1.583,324,1.433,325,2.092,326,2.488,327,2.488,328,2.488,329,2.488,330,2.488,331,1.433,332,1.785,333,4.602,334,2.092,335,2.092,336,2.092,337,2.092,338,2.033,339,2.488,340,2.806,341,2.092,342,2.488,343,2.092,344,2.092,345,2.092,346,2.092,347,2.092,348,2.092,349,2.092,350,3.287,351,2.092,352,2.092,353,2.092,354,1.583,355,2.092,356,2.092,357,2.092,358,3.287,359,2.092,360,2.092,361,2.092,362,2.092,363,2.092,364,2.092,365,3.928,366,1.785,367,1.583,368,2.092,369,1.785,370,2.806,371,1.433,372,2.092,373,1.126,374,2.092,375,2.092,376,2.092,377,2.092,378,2.092,379,2.092]],["title/interfaces/AuthorizationTokenValidityPeriod.html",[74,1.681,331,2.447]],["body/interfaces/AuthorizationTokenValidityPeriod.html",[12,0.022,20,0.294,21,0.227,22,0.194,24,0.194,28,0.294,69,0.294,71,0.014,72,0.017,73,0.014,74,2.238,76,3.258,80,0.479,81,1.939,84,0.7,86,2.298,196,1.978,322,3.258,331,4.022,338,2.595,339,5.035,340,5.677,342,4.445,380,4.06,381,5.677,382,6.37,383,2.763]],["title/classes/CreateAuthorizationTokenArgs.html",[70,0.178,239,2.241]],["body/classes/CreateAuthorizationTokenArgs.html",[12,0.022,20,0.237,21,0.183,22,0.156,24,0.274,28,0.356,36,0.808,40,1.941,69,0.237,70,0.191,71,0.011,72,0.015,73,0.011,80,0.386,81,1.688,84,0.702,86,1.688,129,0.953,131,1.843,177,3.95,178,1.257,195,0.856,196,2.551,204,1.607,205,2.254,210,1.284,219,2.143,239,3.207,242,2.569,259,3.555,260,2.902,270,2.923,338,2.711,384,4.644,385,3.272,386,3.833,387,3.833,388,3.849,389,6.135,390,4.202,391,3.303,392,3.833,393,4.363,394,3.833]],["title/classes/ExecutionContext.html",[31,1.578,70,0.178]],["body/classes/ExecutionContext.html",[12,0.022,20,0.166,21,0.128,22,0.11,24,0.228,28,0.246,31,2.095,32,2.466,33,2.492,34,0.751,40,1.731,48,2.603,49,0.672,55,1.563,57,1.399,59,0.839,69,0.166,70,0.134,71,0.008,72,0.012,73,0.008,80,0.27,81,1.314,82,1.471,84,0.61,86,2.307,97,2,98,1.873,99,1.637,103,1.557,113,1.265,117,1.243,118,1.565,125,1.243,129,1.005,131,1.603,132,1.548,133,1.105,141,1.324,142,2.822,155,1.759,163,5.468,164,4.265,169,2.93,177,3.955,178,1.279,181,0.939,192,0.839,195,0.6,210,1.354,256,3.608,274,1.447,338,1.759,367,2.035,395,2.294,396,6.36,397,6.36,398,4.741,399,3.981,400,2.688,401,2.688,402,3.397,403,2.688,404,2.688,405,2.688,406,2.688,407,2.688,408,3.981,409,2.688,410,2.688,411,3.981,412,2.688,413,3.981,414,2.688,415,4.741,416,2.688,417,2.688,418,2.688,419,2.688,420,1.557,421,2.688,422,2.688,423,2.688,424,2.688,425,2.688,426,2.688,427,2.688,428,2.688,429,2.688,430,2.688,431,2.688]],["title/modules/PrismaModule.html",[0,1.115,13,1.681]],["body/modules/PrismaModule.html",[0,2.091,2,1.81,7,2.058,8,2.058,12,0.022,13,2.513,20,0.253,21,0.195,22,0.167,24,0.167,28,0.367,29,4.069,30,1.144,34,1.905,48,2.328,49,1.024,55,1.144,67,3.1,68,3.1,69,0.253,70,0.297,71,0.012,72,0.016,73,0.012,118,1.763,125,1.667,134,4.042,137,2.415,168,1.514,169,1.927,170,1.352,181,1.865,192,1.279,321,4.498,432,3.1,433,4.558,434,4.069,435,5.071,436,5.071,437,3.1,438,4.042,439,3.496,440,2.058,441,3.496,442,3.496,443,3.496,444,3.496,445,3.496,446,3.496,447,4.558,448,4.558,449,3.496,450,3.496,451,3.1,452,3.496,453,3.496,454,3.496,455,3.496]],["title/modules/SecurityModule.html",[0,1.115,14,2.07]],["body/modules/SecurityModule.html",[0,2.086,2,1.947,3,2.074,4,2.372,5,2.372,6,2.074,7,3.091,8,3.091,12,0.022,13,3.213,14,4.164,15,3.956,17,3.013,18,2.372,19,2.214,20,0.272,21,0.21,22,0.18,24,0.18,27,3.511,28,0.413,30,1.231,51,1.727,69,0.272,70,0.22,71,0.013,72,0.016,73,0.013,270,2.691,292,3.018,456,3.761,457,4.407,458,3.761,459,3.761,460,3.889,461,4.407,462,1.629,463,3.834,464,4.407,465,3.336]],["title/classes/SecuritySmsResolver.html",[70,0.178,463,2.447]],["body/classes/SecuritySmsResolver.html",[12,0.022,20,0.187,21,0.144,22,0.124,24,0.268,26,2.515,28,0.389,31,2.45,32,2.043,33,2.465,36,0.638,40,1.282,55,1.213,57,1.085,59,1.355,69,0.187,70,0.151,71,0.009,72,0.013,73,0.009,80,0.305,82,1.199,83,2.074,84,0.615,87,1.754,94,2.292,95,2.733,99,1.418,108,1.754,117,1.355,118,2.017,125,0.945,129,0.841,131,1.797,132,1.499,133,1.169,136,1.516,141,1.213,155,1.918,158,3.069,170,1,181,1.516,191,1.899,192,0.945,195,0.676,196,1.259,200,2.973,204,1.213,210,1.238,214,3.213,235,2.584,240,2.723,242,2.181,249,3.184,251,1.899,254,1.899,255,2.292,256,1.754,270,2.852,280,3.031,383,2.961,460,3.387,463,2.973,465,2.292,466,3.797,467,2.584,468,4.337,469,5.076,470,4.341,471,2.584,472,3.028,473,4.341,474,3.028,475,3.853,476,3.028,477,3.028,478,3.028,479,3.028,480,3.842,481,2.292,482,1.63,483,2.292,484,3.028,485,3.028,486,2.584,487,3.028,488,3.028]],["title/injectables/SecuritySmsService.html",[160,1.115,460,1.923]],["body/injectables/SecuritySmsService.html",[12,0.022,20,0.155,21,0.12,22,0.103,24,0.233,28,0.336,30,0.703,34,1.597,48,1.987,49,0.629,50,1.575,51,1.484,55,1.706,56,2.64,57,1.483,69,0.155,70,0.126,71,0.007,72,0.011,73,0.007,80,0.253,82,1.285,84,0.547,85,2.858,99,1.658,113,2.144,117,1.183,118,2.062,125,1.183,129,0.901,131,1.001,132,1.607,133,1.147,136,1.997,137,1.401,141,1.417,142,2.039,160,1.183,169,1.782,170,1.25,181,1.591,192,0.785,200,2.594,203,1.183,210,1.395,217,1.401,257,1.578,258,1.354,270,2.846,274,1.354,278,1.903,279,2.146,280,3.059,295,1.264,322,2.594,339,3.839,373,2.039,383,2.386,460,2.039,462,0.93,466,3.915,468,3.993,475,3.966,483,4.327,489,2.146,490,4.556,491,3.233,492,3.788,493,2.515,494,3.437,495,2.515,496,2.515,497,2.515,498,3.788,499,3.788,500,3.788,501,2.515,502,5.071,503,3.788,504,5.071,505,4.556,506,3.788,507,2.515,508,3.788,509,5.071,510,2.515,511,2.867,512,2.515,513,2.515,514,2.515,515,2.515,516,2.515,517,2.515,518,2.515,519,2.515,520,2.515,521,2.515,522,2.515,523,2.515,524,2.515,525,3.788,526,2.515,527,2.515,528,2.515,529,2.146,530,2.515,531,2.515,532,2.515,533,2.515,534,2.515,535,2.515,536,2.515,537,2.515,538,2.515,539,2.515,540,2.515,541,1.722,542,2.515,543,2.515,544,2.515,545,2.515,546,2.515,547,2.515,548,2.515]],["title/interfaces/SocfonyConfig.html",[74,1.681,549,2.447]],["body/interfaces/SocfonyConfig.html",[12,0.022,20,0.239,21,0.185,22,0.251,24,0.158,26,3.715,28,0.318,30,1.082,38,2.652,55,1.438,57,0.968,63,4.219,69,0.357,71,0.011,72,0.015,73,0.011,74,1.822,76,2.652,80,0.39,81,1.699,84,0.582,85,3.626,98,3.166,99,1.082,103,2.982,141,1.082,155,2.554,172,2.982,192,1.209,210,1.502,237,3.896,371,3.525,383,2.72,434,3.525,549,4.219,550,2.931,551,5.626,552,6.412,553,6.727,554,5.78,555,5.146,556,3.305,557,3.305,558,4.663,559,3.305,560,3.872,561,3.872,562,3.872,563,3.872,564,3.872,565,3.872,566,3.872,567,3.872,568,3.872]],["title/classes/TencentCloudCosCredentials.html",[70,0.178,569,2.447]],["body/classes/TencentCloudCosCredentials.html",[12,0.022,20,0.237,21,0.182,22,0.156,24,0.278,28,0.316,36,0.806,40,1.981,50,2.989,51,2.817,69,0.237,70,0.191,71,0.011,72,0.015,73,0.011,80,0.385,81,1.685,84,0.578,86,2.024,129,0.952,195,0.854,204,1.605,205,2.251,210,1.467,219,2.141,220,2.748,462,2.267,569,3.496,570,3.265,571,4.813,572,3.329,573,5.998,574,4.594,575,3.552,576,3.438,577,3.826,578,3.826,579,3.826]],["title/classes/TencentCloudCosResolver.html",[70,0.178,580,2.447]],["body/classes/TencentCloudCosResolver.html",[12,0.022,20,0.163,21,0.125,22,0.191,24,0.258,28,0.359,32,1.239,33,1.031,36,0.555,40,1.901,50,2.805,51,2.644,57,1.17,69,0.242,70,0.131,71,0.008,72,0.012,73,0.008,80,0.265,82,1.106,84,0.679,86,1.294,99,1.449,110,2.271,117,1.224,118,1.92,125,0.822,129,0.86,131,1.727,132,1.383,133,1.169,136,1.369,141,1.308,142,3.243,155,1.163,158,2.922,170,0.869,172,1.525,195,0.588,204,1.308,237,1.993,240,2.459,242,1.969,248,2.271,249,2.938,250,2.684,251,1.651,257,1.651,258,1.417,381,3.345,462,2.051,482,1.417,529,3.345,569,3.553,571,4.53,572,3.49,575,2.271,576,2.521,580,2.684,581,1.993,582,2.967,583,5.188,584,4.683,585,2.632,586,3.006,587,2.632,588,4.683,589,2.632,590,1.993,591,2.632,592,2.967,593,4.428,594,2.632,595,2.632,596,5.398,597,3.927,598,2.632,599,2.632,600,2.632,601,2.967,602,2.632,603,2.632,604,2.684,605,3.345,606,3.345,607,2.632,608,2.632,609,3.345,610,3.345,611,3.345,612,2.632,613,3.345,614,3.345,615,2.632,616,3.345,617,3.345,618,2.632,619,2.632,620,2.632,621,2.967,622,3.919,623,2.632,624,2.247,625,2.632]],["title/injectables/TencentCloudCosService.html",[160,1.115,586,2.07]],["body/injectables/TencentCloudCosService.html",[12,0.022,20,0.182,21,0.14,22,0.12,24,0.204,28,0.309,30,0.821,50,2.747,51,2.589,55,1.69,56,3.362,57,1.367,69,0.182,70,0.147,71,0.009,72,0.013,73,0.009,80,0.296,82,1.004,84,0.428,99,1.187,117,1.327,118,1.997,125,0.918,129,0.961,131,1.598,132,1.255,133,1.275,136,2.112,141,1.187,160,1.327,170,0.97,181,1.484,210,1.114,257,1.844,258,1.582,295,1.477,310,2.666,420,2.462,462,2.236,482,1.582,491,2.509,571,4.632,572,3.504,573,4.26,574,3.419,576,3.256,586,2.462,593,3.627,597,3.217,604,2.911,624,3.627,626,2.509,627,5.469,628,4.25,629,3.627,630,4.992,631,2.939,632,3.169,633,2.939,634,2.939,635,6.048,636,4.25,637,2.939,638,2.939,639,2.939,640,2.939,641,4.25,642,4.25,643,2.939,644,2.939,645,2.939,646,4.25,647,4.25,648,4.25,649,4.25,650,4.25,651,4.25,652,4.25,653,4.25,654,4.25,655,4.25,656,4.25,657,4.25,658,4.25,659,4.25,660,4.25,661,4.25,662,4.25,663,2.939,664,2.939,665,2.939,666,2.939,667,2.939,668,2.939,669,2.939,670,3.627,671,2.939,672,2.939,673,2.939,674,2.939,675,2.939,676,2.939]],["title/modules/TencentCloudModule.html",[0,1.115,15,2.07]],["body/modules/TencentCloudModule.html",[0,2.057,2,1.861,3,1.982,4,2.268,5,2.268,6,1.982,7,3.026,8,3.026,12,0.022,15,4.18,17,2.928,18,2.268,19,2.117,20,0.26,21,0.201,22,0.172,24,0.172,28,0.407,30,1.177,50,2.261,51,2.131,69,0.26,70,0.21,71,0.012,72,0.016,73,0.012,462,1.558,468,2.643,494,4.16,571,2.885,576,2.268,580,3.725,586,4.16,632,4.16,677,3.596,678,3.596,679,3.596,680,4.213,681,4.213,682,4.213,683,4.213]],["title/injectables/TencentCloudSmsService.html",[160,1.115,494,2.07]],["body/injectables/TencentCloudSmsService.html",[12,0.022,20,0.218,21,0.168,22,0.144,24,0.197,28,0.366,30,0.984,50,2.464,51,2.322,55,1.349,56,2.798,57,1.377,69,0.218,70,0.176,71,0.01,72,0.014,73,0.01,80,0.355,82,1.141,84,0.486,98,1.658,99,0.984,117,1.507,118,1.819,129,0.913,131,1.276,132,1.426,133,1.018,136,1.686,137,2.428,141,1.539,160,1.507,163,2.667,181,1.231,192,1.1,210,1.431,295,1.77,338,2.133,462,2.191,468,4.305,483,4.97,494,2.798,572,2.041,574,4.252,621,2.667,629,4.121,684,3.007,685,4.121,686,5.509,687,4.121,688,3.523,689,3.307,690,5.058,691,5.058,692,3.523,693,5.299,694,3.523,695,6.412,696,3.523,697,3.523,698,4.828,699,3.029,700,3.029,701,3.523,702,3.523,703,3.523,704,3.307,705,2.667,706,3.523,707,3.523,708,3.523,709,3.523,710,3.523,711,3.523,712,3.523,713,3.523,714,1.465,715,3.007,716,3.523,717,3.523,718,3.523,719,3.523]],["title/classes/TencentCloudStsCredentials.html",[70,0.178,720,2.447]],["body/classes/TencentCloudStsCredentials.html",[12,0.022,20,0.195,21,0.15,22,0.129,24,0.28,28,0.321,36,0.665,50,3.002,51,2.814,59,1.622,69,0.277,70,0.223,71,0.009,72,0.013,73,0.009,80,0.318,81,1.477,84,0.523,86,2.185,129,0.861,168,1.921,195,0.705,203,2.105,204,1.451,205,2.036,206,3.274,210,1.515,217,2.089,219,2.225,220,2.797,383,1.486,420,3.274,462,2.089,575,1.829,576,3.211,582,5.492,592,3.386,699,2.806,700,2.806,720,3.87,721,2.39,722,4.434,723,4.434,724,5.554,725,3.157,726,3.157,727,3.157,728,3.818,729,3.818,730,3.818,731,3.818,732,2.61,733,3.818,734,3.818,735,2.695,736,3.818,737,2.695]],["title/classes/TencentCloudStsFederationToken.html",[70,0.178,575,2.07]],["body/classes/TencentCloudStsFederationToken.html",[12,0.022,20,0.19,21,0.147,22,0.126,24,0.279,28,0.317,36,0.649,50,2.995,51,2.797,59,1.918,69,0.272,70,0.219,71,0.009,72,0.013,73,0.009,80,0.31,81,1.451,82,1.452,84,0.516,86,2.029,129,0.849,168,1.895,195,0.688,203,2.63,204,1.432,205,2.008,206,3.747,210,1.469,217,1.626,219,2.209,220,2.759,383,2.069,420,2.547,462,2.067,575,2.547,576,3.182,582,5.479,592,3.88,699,2.758,700,2.758,720,3.828,721,2.332,722,2.63,723,2.63,724,4.77,728,3.752,729,4.374,730,3.752,731,4.374,732,3.087,733,4.77,734,4.77,735,4.374,736,4.77,737,4.374,738,3.081,739,3.081,740,3.081]],["title/injectables/TencentCloudStsService.html",[160,1.115,632,2.07]],["body/injectables/TencentCloudStsService.html",[12,0.022,20,0.27,21,0.208,22,0.178,24,0.227,28,0.379,30,1.22,50,2.314,51,2.181,57,1.091,69,0.27,70,0.218,71,0.013,72,0.016,73,0.013,80,0.439,82,1.032,84,0.439,98,2.055,99,1.22,117,1.737,129,0.723,131,1.471,132,1.29,133,0.92,136,1.944,137,2.519,141,1.22,160,1.737,192,1.363,210,1.367,295,2.194,338,1.929,462,2.058,572,2.53,574,4.741,576,3.472,632,3.224,685,4.75,687,4.75,689,2.991,690,4.75,691,4.75,699,2.739,700,2.739,704,3.811,705,3.305,714,1.815,715,3.727,741,3.727,742,4.367,743,4.75,744,4.367,745,4.367]],["title/classes/UpdateViewerArgs.html",[70,0.178,746,2.447]],["body/classes/UpdateViewerArgs.html",[12,0.022,20,0.246,21,0.189,22,0.162,24,0.264,28,0.362,36,0.838,40,1.174,55,1.111,59,1.635,69,0.246,70,0.199,71,0.012,72,0.015,73,0.012,80,0.4,81,1.729,82,1.238,84,0.589,95,3.351,129,0.868,178,1.212,192,1.943,195,0.888,196,1.653,204,1.463,205,2.052,210,1.308,214,3.035,219,2.046,239,3.286,242,2.632,262,3.394,270,2.689,278,2.943,280,3.036,373,3.778,384,3.01,391,3.351,393,4.999,440,1.998,451,4.712,475,3.607,732,2.632,746,3.587,747,4.999,748,3.394,749,4.999,750,4.263,751,3.977,752,3.977,753,3.965,754,3.394]],["title/classes/UserEntity.html",[70,0.178,755,2.241]],["body/classes/UserEntity.html",[12,0.022,20,0.265,21,0.204,22,0.175,24,0.277,28,0.34,36,0.904,59,1.339,69,0.265,70,0.214,71,0.013,72,0.016,73,0.013,80,0.432,81,1.816,84,0.645,129,1.062,133,1.159,168,1.586,178,1.341,195,0.957,199,3.052,203,2.858,204,1.79,205,2.51,210,1.228,216,3.449,217,2.369,220,2.962,440,2.764,541,3.768,714,2.664,732,2.155,755,3.451,756,3.66,757,4.045,758,4.164,759,5.468,760,3.66,761,3.66,762,3.66,763,2.937,764,3.66,765,3.66]],["title/classes/UserInterface.html",[70,0.178,757,2.07]],["body/classes/UserInterface.html",[12,0.022,20,0.228,21,0.176,22,0.151,24,0.283,28,0.349,34,1.032,36,0.778,49,0.923,59,1.557,69,0.228,70,0.184,71,0.011,72,0.015,73,0.011,74,2.656,80,0.372,81,1.646,84,0.608,129,1.001,133,1.274,168,1.843,178,1.36,195,0.824,203,3.06,204,1.688,205,2.368,210,1.409,216,3.579,217,2.533,219,1.29,224,4.139,280,1.632,480,3.774,541,3.865,714,2.764,732,2.505,757,2.889,758,4.574,763,3.865,766,3.152,767,3.774,768,3.693,769,3.693,770,3.693,771,3.693,772,4.986,773,2.684,774,3.152,775,2.14,776,2.14]],["title/classes/UserInterfaceResolver.html",[70,0.178,777,2.447]],["body/classes/UserInterfaceResolver.html",[12,0.022,20,0.247,21,0.191,22,0.163,24,0.24,28,0.401,33,2.061,36,0.843,49,1,57,1,69,0.247,70,0.2,71,0.012,72,0.015,73,0.012,74,2.936,80,0.403,82,1.243,84,0.529,99,1.469,117,1.642,125,1.249,129,0.871,131,1.39,132,1.553,133,1.109,136,1.837,141,1.118,158,3.343,170,1.321,172,3.615,178,1.363,195,0.893,204,1.118,219,1.837,248,3.047,250,4.024,482,2.154,590,3.029,601,3.981,714,2.766,757,3.047,773,2.831,774,3.415,777,3.602,778,5.014,779,3.415,780,4.002,781,3.651,782,4.002,783,4.002,784,4.002,785,4.002,786,4.002,787,4.002,788,4.002]],["title/modules/UserModule.html",[0,1.115,16,2.07]],["body/modules/UserModule.html",[0,2.061,2,1.874,3,1.996,4,2.283,5,2.283,6,1.996,7,3.036,8,3.036,12,0.022,13,3.181,14,3.916,16,4.184,17,2.94,18,2.283,19,2.131,20,0.262,21,0.202,22,0.173,24,0.173,27,3.426,28,0.425,30,1.185,69,0.262,70,0.212,71,0.012,72,0.016,73,0.012,178,1.132,292,2.905,302,3.869,777,3.741,789,3.62,790,3.62,791,3.62,792,3.62,793,4.24,794,4.241,795,4.241,796,4.241,797,4.241,798,3.62,799,3.741,800,4.241]],["title/classes/UserProfileEntity.html",[70,0.178,773,1.923]],["body/classes/UserProfileEntity.html",[12,0.022,20,0.2,21,0.154,22,0.132,24,0.285,28,0.2,36,0.681,59,2.105,63,3.911,69,0.2,70,0.161,71,0.01,72,0.013,73,0.01,80,0.325,81,1.501,84,0.628,129,1.034,133,1.351,168,1.682,178,1.356,195,0.722,199,2.644,202,3.049,203,2.14,204,1.744,205,2.446,210,1.591,217,2.308,219,1.588,220,2.448,224,4.121,480,3.442,714,2.835,732,3.389,773,3.074,801,2.758,802,6.412,803,6.412,804,6.412,805,4.491,806,5.71,807,3.232,808,3.232,809,3.232,810,3.232,811,5.71,812,3.232,813,5.71,814,3.232]],["title/modules/UserProfileModule.html",[0,1.115,793,2.241]],["body/modules/UserProfileModule.html",[0,2.106,2,2.012,3,2.143,4,2.451,5,2.451,6,2.143,7,3.138,8,3.138,12,0.022,13,3.24,17,3.076,18,2.451,19,2.288,20,0.281,21,0.217,22,0.186,24,0.186,27,3.585,28,0.405,30,1.272,69,0.281,70,0.227,71,0.013,72,0.017,73,0.013,178,1.071,292,3.119,714,2.376,781,3.906,793,4.472,815,3.886,816,3.886,817,4.553,818,3.886,819,4.553,820,3.914,821,4.553,822,3.886]],["title/classes/UserProfileResolver.html",[70,0.178,820,2.447]],["body/classes/UserProfileResolver.html",[12,0.022,20,0.21,21,0.162,22,0.139,24,0.259,28,0.402,31,2.581,32,2.219,33,2.598,34,1.317,36,0.718,48,2.598,49,0.851,55,0.951,57,0.851,69,0.21,70,0.17,71,0.01,72,0.014,73,0.01,80,0.343,82,1.114,84,0.544,99,1.632,110,2.732,117,1.472,118,1.786,125,1.472,129,0.781,131,1.246,132,1.393,133,1.14,136,1.647,137,1.744,141,0.951,155,2.084,158,3.188,169,2.219,170,1.557,178,1.242,181,1.647,195,0.76,199,2.935,202,1.972,204,0.951,214,3.553,240,2.136,242,2.369,249,2.958,251,2.136,256,1.972,278,3.269,373,3.502,391,2.539,714,2.799,754,2.905,773,2.913,781,3.144,820,3.23,822,2.905,823,2.905,824,5.84,825,5.41,826,3.404,827,3.404,828,5.41,829,3.404,830,4.2,831,3.404,832,3.404,833,3.404,834,2.905,835,3.404,836,3.404,837,3.404]],["title/injectables/UserProfileService.html",[160,1.115,781,1.923]],["body/injectables/UserProfileService.html",[12,0.022,20,0.239,21,0.185,22,0.158,24,0.236,28,0.318,30,1.082,34,1.842,48,2.414,49,0.968,57,1.445,69,0.239,70,0.193,71,0.011,72,0.015,73,0.011,80,0.39,82,1.216,84,0.518,95,2.771,99,1.438,113,1.822,117,1.607,118,1.908,125,1.209,129,0.853,131,1.36,132,1.52,133,1.085,136,2.151,137,1.903,141,1.082,142,2.771,160,1.607,170,1.278,178,1.354,181,1.797,202,2.982,248,3.569,274,2.085,278,1.946,295,1.946,301,3.305,354,3.896,482,2.085,714,2.98,763,2.652,781,2.771,838,3.305,839,5.78,840,3.872,841,3.872,842,6.16,843,3.872,844,3.872,845,3.872]],["title/classes/UserProfileUpdateInput.html",[70,0.178,830,2.447]],["body/classes/UserProfileUpdateInput.html",[12,0.022,20,0.304,21,0.234,22,0.201,24,0.245,28,0.4,34,1.373,36,1.036,49,1.229,55,1.373,69,0.304,70,0.245,71,0.014,72,0.018,73,0.014,168,2.215,178,1.211,195,1.097,202,2.848,373,3.479,391,3.479,440,2.47,714,2.687,767,4.535,773,2.646,805,4.195,830,4.103,834,4.195,846,4.195,847,3.721,848,4.892,849,5.991,850,3.721,851,4.916]],["title/classes/UserResolver.html",[70,0.178,852,2.704]],["body/classes/UserResolver.html",[12,0.022,20,0.241,21,0.186,22,0.159,24,0.27,28,0.408,34,1.444,36,0.821,48,2.64,49,0.974,57,0.974,69,0.241,70,0.194,71,0.011,72,0.015,73,0.011,80,0.392,82,1.221,84,0.583,99,1.444,117,1.613,125,1.216,129,0.856,131,1.366,132,1.526,133,1.222,137,1.911,141,1.088,158,3.318,170,1.286,178,1.321,192,1.216,195,0.87,199,3.102,204,1.088,232,2.949,233,4.743,242,2.596,253,2.668,254,2.444,274,2.097,281,3.325,388,4.031,390,4.229,482,2.097,755,3.241,852,3.911,853,3.325,854,3.896,855,3.896,856,3.896,857,3.896,858,3.896,859,3.896,860,3.539,861,3.896,862,3.325]],["title/injectables/UserService.html",[160,1.115,302,1.923]],["body/injectables/UserService.html",[12,0.022,20,0.204,21,0.157,22,0.134,24,0.235,28,0.375,30,0.92,49,0.823,55,0.92,57,1.569,69,0.204,70,0.164,71,0.01,72,0.014,73,0.01,80,0.331,82,1.256,84,0.681,95,3.099,99,1.754,113,2.501,117,1.439,118,2.073,125,1.028,129,0.881,131,1.218,132,1.57,133,1.12,136,2.193,141,1.287,142,3.099,160,1.439,170,1.087,178,1.355,181,1.856,210,1.402,258,1.773,259,3.336,265,2.255,270,2.815,275,2.493,295,1.655,302,2.481,309,4.126,310,2.891,338,2.036,391,2.481,460,3.47,465,2.493,466,2.255,468,2.891,471,2.811,482,1.773,689,2.255,776,3.923,863,2.811,864,4.608,865,5.315,866,3.293,867,4.608,868,3.293,869,4.608,870,3.293,871,3.293,872,4.608,873,2.811,874,3.293,875,3.293,876,3.293,877,3.293,878,4.608,879,3.293,880,3.293,881,3.293,882,2.811,883,3.293]],["title/classes/UserUpdateInput.html",[70,0.178,750,2.447]],["body/classes/UserUpdateInput.html",[12,0.022,20,0.274,21,0.211,22,0.181,24,0.265,28,0.381,34,1.237,36,0.933,49,1.107,59,1.753,69,0.274,70,0.221,71,0.013,72,0.017,73,0.013,80,0.446,81,1.853,82,1.326,84,0.446,129,0.734,168,2.076,178,1.301,192,2.024,195,0.988,204,1.237,205,1.735,210,1.376,216,2.383,219,1.961,221,2.083,280,1.956,373,3.319,391,3.319,440,2.224,693,4.791,732,2.821,750,3.845,753,3.351,775,2.565,776,4.023,847,3.351,848,4.667,850,4.25,884,4.25,885,4.427,886,3.351,887,4.427]],["title/classes/UserWhereUniqueInput.html",[70,0.178,388,2.241]],["body/classes/UserWhereUniqueInput.html",[12,0.022,20,0.304,21,0.234,22,0.201,24,0.245,28,0.4,34,1.373,36,1.036,49,1.229,55,1.373,69,0.304,70,0.245,71,0.014,72,0.018,73,0.014,168,2.215,178,1.211,195,1.097,216,2.646,217,2.215,219,1.717,221,2.313,280,2.172,388,3.759,391,3.479,440,2.47,753,4.535,775,2.848,848,4.892,850,3.721,884,3.721,886,3.721,888,4.195,889,6.463,890,4.916,891,4.916]],["title/classes/ViewerEntity.html",[70,0.178,221,1.681]],["body/classes/ViewerEntity.html",[12,0.022,20,0.215,21,0.166,22,0.142,24,0.28,28,0.339,36,0.734,49,0.871,59,1.931,69,0.215,70,0.174,71,0.01,72,0.014,73,0.01,80,0.351,81,1.582,84,0.643,129,1.059,133,1.01,168,2.025,178,1.342,195,0.778,199,2.752,203,2.577,204,1.786,205,2.504,210,1.489,214,3.174,216,3.176,217,2.181,219,1.217,220,2.58,221,2.255,224,3.282,280,2.893,383,2.776,440,2.408,541,3.282,714,2.452,732,3.107,757,3.864,758,3.628,759,5.035,760,2.974,761,2.974,762,2.974,763,2.387,764,2.974,765,2.974,767,3.628,775,3.174,892,2.974,893,6.669,894,5.899,895,5.899,896,5.899,897,3.485,898,5.035,899,3.485]],["title/classes/ViewerResolver.html",[70,0.178,799,2.447]],["body/classes/ViewerResolver.html",[12,0.022,20,0.131,21,0.101,22,0.087,24,0.253,28,0.383,31,2.468,32,1.566,33,2.625,34,0.93,36,0.448,40,1.371,48,2.266,49,0.531,55,1.661,57,1.336,69,0.131,70,0.106,71,0.006,72,0.01,73,0.006,80,0.214,82,1.191,84,0.582,97,2.332,98,2.184,99,1.561,103,1.928,110,2.376,113,1,117,1.039,118,1.354,125,1.039,129,0.835,131,0.879,132,1.488,133,1.062,136,1.162,137,1.23,141,1.297,155,1.47,158,2.906,167,1.333,169,1.566,170,1.098,178,1.314,181,1.867,191,2.573,192,1.449,195,0.474,199,2.332,204,1.297,210,0.743,214,3.821,217,0.785,219,1.76,221,2.184,232,1.608,233,3.66,240,1.333,242,3.056,248,1.928,249,2.087,250,3.451,251,1.333,254,1.333,255,1.608,256,1.231,258,1.144,259,1.231,265,1.455,270,1.383,274,1.144,275,1.608,278,1.672,280,2.687,302,3.008,324,1.455,354,2.519,365,4.936,366,2.84,367,2.519,369,2.84,371,1.455,373,3.008,383,1,390,1.455,420,2.689,475,1.231,486,2.84,511,1.608,590,2.519,601,3.104,621,1.608,746,3.451,749,2.84,775,3.237,776,1.928,798,1.813,799,2.279,862,1.813,873,1.813,882,1.813,886,1.608,900,1.608,901,4.101,902,2.124,903,2.124,904,2.124,905,2.124,906,2.124,907,2.124,908,2.124,909,2.124,910,2.124,911,3.327,912,3.327,913,2.124,914,2.124,915,2.124,916,2.519,917,2.519,918,2.519,919,2.124,920,2.124,921,1.813,922,2.124,923,2.124,924,2.124,925,2.124,926,2.124,927,2.124,928,2.124,929,2.124,930,2.124,931,1.608,932,4.641,933,2.124,934,3.327,935,3.327,936,2.84,937,2.124,938,2.124,939,2.124,940,2.124,941,2.124,942,2.124,943,2.124]],["title/coverage.html",[944,4.16]],["body/coverage.html",[6,1.147,12,0.022,22,0.1,31,1.077,33,0.955,38,1.67,40,1.093,41,2.144,46,1.529,70,0.347,71,0.007,72,0.011,73,0.007,74,2.104,75,1.845,77,3.419,84,0.245,91,1.67,92,1.67,103,3.588,110,1.413,112,1.845,114,1.67,116,2.081,128,1.313,137,0.901,160,1.833,166,1.845,167,1.529,192,0.761,194,1.67,196,2.705,197,2.081,198,2.081,217,0.901,221,1.147,225,1.67,226,2.081,239,1.529,252,1.845,253,1.67,256,1.413,296,2.081,302,1.313,309,1.529,323,1.845,324,1.67,326,1.845,327,1.845,328,1.845,329,1.845,330,1.845,331,1.67,380,2.081,384,1.845,385,2.081,388,1.529,395,2.081,432,1.845,437,1.845,460,1.313,462,2.236,463,1.67,466,2.534,467,2.081,481,1.845,489,2.081,494,1.413,549,1.67,550,3.385,569,1.67,570,2.081,575,1.413,580,1.67,581,1.845,586,1.413,626,2.081,632,1.413,684,2.081,704,1.67,720,1.67,721,2.801,741,2.081,746,1.67,747,2.081,748,2.081,750,1.67,755,1.529,756,2.081,757,1.413,766,2.081,773,1.313,777,1.67,778,2.081,779,2.081,781,1.313,799,1.67,801,2.081,820,1.67,823,2.081,830,1.67,838,2.081,846,2.081,847,2.801,852,1.845,853,2.081,860,1.67,863,2.081,884,2.801,888,2.081,892,2.081,900,2.801,916,1.845,917,1.845,918,1.845,931,1.845,944,2.081,945,1.845,946,2.438,947,2.438,948,7.439,949,6.048,950,7.27,951,2.081,952,4.992,953,4.471,954,5.01,955,7.124,956,6.048,957,3.7,958,5.286,959,2.081,960,4.58,961,2.081,962,2.081,963,2.081,964,2.081,965,3.158,966,2.801,967,2.081,968,2.081,969,4.471,970,3.7,971,2.801,972,1.845,973,2.438,974,2.438]],["title/dependencies.html",[3,2.022,975,2.984]],["body/dependencies.html",[3,2.307,12,0.022,30,1.37,36,1.033,45,3.712,49,1.226,70,0.299,71,0.014,72,0.018,73,0.014,164,4.421,172,2.841,322,3.358,556,4.185,699,3.076,700,3.076,743,4.185,976,6.456,977,4.903,978,4.903,979,4.903,980,4.903,981,4.903,982,4.903,983,4.903,984,4.903,985,4.903,986,4.903,987,4.903,988,4.903,989,4.903,990,4.903,991,4.903,992,4.903,993,4.903,994,4.903,995,4.185,996,4.903,997,4.903,998,4.903,999,4.903,1000,4.903]],["title/miscellaneous/enumerations.html",[1001,1.729,1002,3.667]],["body/miscellaneous/enumerations.html",[12,0.021,22,0.2,71,0.014,72,0.018,73,0.014,78,3.702,80,0.492,84,0.649,87,3.461,177,2.834,178,0.916,196,2.033,206,2.834,208,3.068,259,3.461,270,2.033,309,3.068,338,3.135,462,1.808,581,3.702,596,5.098,604,3.35,605,4.174,606,4.174,609,5.098,610,5.098,611,5.098,613,5.098,614,5.098,616,5.098,617,5.098,776,2.834,1001,2.834,1002,4.174,1003,4.891,1004,5.973,1005,4.891,1006,4.891,1007,4.891]],["title/miscellaneous/functions.html",[1001,1.729,1008,3.252]],["body/miscellaneous/functions.html",[6,2.934,12,0.021,22,0.214,24,0.264,26,2.314,33,2.3,34,1.116,38,4.019,40,1.733,50,1.66,51,1.565,56,2.314,63,3.597,71,0.012,72,0.015,73,0.012,77,2.735,79,3.023,80,0.402,82,1.571,84,0.402,86,1.318,95,2.15,96,2.505,97,2.006,98,1.879,104,3.408,131,1.551,132,1.964,133,1.402,141,1.64,155,2.321,178,0.748,248,2.314,309,3.682,310,2.505,338,1.764,402,4.483,434,4.019,437,3.976,438,3.023,462,1.477,549,2.735,550,3.023,551,4.483,557,3.408,558,3.976,559,3.408,572,3.043,704,4.019,705,3.023,776,3.927,860,2.735,931,4.443,951,4.483,965,3.408,966,3.023,967,3.408,968,3.408,971,3.023,972,3.976,1001,2.314,1008,3.023,1009,3.408,1010,3.408,1011,5.252,1012,5.252,1013,3.993,1014,3.993,1015,3.408,1016,3.993,1017,5.252,1018,6.235,1019,5.252,1020,3.993,1021,3.993,1022,3.993,1023,3.993,1024,3.993,1025,3.993,1026,3.408]],["title/index.html",[80,0.3,1027,2.547,1028,2.547]],["body/index.html",[12,0.018,21,0.24,24,0.206,26,3.527,71,0.015,72,0.018,73,0.015,135,4.306,155,3.119,597,3.819,898,5.579,945,3.819,1008,3.819,1026,4.306,1029,5.045,1030,5.045,1031,5.195,1032,5.045,1033,6.087,1034,5.045,1035,5.045,1036,5.045,1037,5.045,1038,5.045,1039,6.087,1040,5.045,1041,5.045,1042,5.045,1043,5.045,1044,5.045,1045,5.045,1046,5.045,1047,5.045,1048,5.045,1049,5.045,1050,5.045,1051,4.306,1052,3.819,1053,4.306,1054,3.819,1055,4.306,1056,5.045]],["title/license.html",[1027,2.547,1028,2.547,1052,2.259]],["body/license.html",[12,0.016,19,2.094,21,0.257,71,0.012,72,0.016,73,0.012,111,4.088,133,0.878,164,2.854,278,2.094,475,2.414,511,3.154,670,4.609,936,3.557,945,3.154,1031,5.113,1051,3.557,1052,3.154,1053,3.557,1054,3.154,1055,3.557,1057,6.727,1058,4.167,1059,4.167,1060,4.167,1061,4.167,1062,4.167,1063,4.167,1064,4.167,1065,5.991,1066,5.4,1067,4.167,1068,4.167,1069,4.167,1070,5.991,1071,5.991,1072,5.991,1073,4.167,1074,5.4,1075,4.167,1076,5.4,1077,5.4,1078,5.4,1079,4.167,1080,4.167,1081,4.167,1082,4.167,1083,4.167,1084,5.4,1085,4.167,1086,5.991,1087,4.167,1088,4.167,1089,4.167,1090,4.167,1091,4.167,1092,4.167,1093,4.167,1094,4.167,1095,5.4,1096,5.4,1097,5.991,1098,5.4,1099,4.167,1100,4.167,1101,4.167,1102,4.167,1103,4.167,1104,4.167,1105,4.167,1106,4.167,1107,4.167,1108,4.167,1109,4.167,1110,4.167,1111,4.167,1112,4.167,1113,4.167,1114,4.167,1115,4.167,1116,4.167,1117,4.167,1118,4.167,1119,4.167,1120,4.167,1121,4.167,1122,4.167,1123,4.167,1124,5.4,1125,4.167,1126,4.167,1127,4.167,1128,4.167,1129,4.167,1130,4.167,1131,4.167,1132,4.167,1133,4.167,1134,4.167,1135,4.167,1136,4.167]],["title/modules.html",[2,2.154]],["body/modules.html",[1,3.588,2,2.315,11,3.286,12,0.018,13,2.465,14,3.035,15,3.035,16,3.035,71,0.015,72,0.018,73,0.015,793,3.286,1137,7.119,1138,7.119,1139,7.119,1140,7.193,1141,5.238,1142,5.238]],["title/overview.html",[1143,4.16]],["body/overview.html",[0,1.149,1,4.818,2,1.626,3,1.731,4,1.981,5,1.981,6,1.731,7,1.848,8,1.848,9,3.14,10,3.14,11,4.341,12,0.022,13,3.125,14,4.045,15,4.102,16,4.102,17,2.677,18,1.981,19,1.848,71,0.011,72,0.015,73,0.011,76,2.52,114,2.52,128,3.575,195,0.821,272,2.785,287,3.14,289,3.14,290,3.14,295,1.848,302,3.575,456,3.14,458,3.14,459,3.14,460,3.575,494,3.848,586,3.848,632,3.848,677,3.14,678,3.14,679,3.14,781,3.575,789,3.14,790,3.14,791,3.14,792,3.14,793,4.237,815,3.14,816,3.14,818,3.14,1054,2.785,1143,3.14,1144,4.973,1145,3.679]],["title/miscellaneous/variables.html",[1001,1.729,1146,3.667]],["body/miscellaneous/variables.html",[0,1.082,12,0.022,24,0.091,29,1.533,31,0.989,32,1.053,33,1.871,34,1.443,40,1.738,48,1.358,57,0.866,59,0.699,67,1.694,68,1.694,70,0.173,71,0.007,72,0.01,73,0.007,77,1.533,78,3.614,79,1.694,80,0.225,83,2.374,84,0.706,86,2.038,91,2.374,92,2.374,96,2.66,97,1.741,108,2.008,110,2.008,111,1.694,112,2.623,113,1.053,118,1.144,125,1.082,131,0.592,133,0.472,134,2.623,137,1.765,155,1.531,159,1.911,166,3.614,167,2.174,168,0.828,169,1.053,170,0.739,171,1.911,172,1.297,173,1.911,174,1.911,178,1.156,181,1.21,192,0.699,196,0.931,206,2.766,208,2.174,210,1.518,216,1.205,217,2.106,221,1.053,252,3.21,253,2.904,270,0.931,272,2.623,280,1.531,310,1.404,315,2.958,316,2.958,321,3.21,323,3.21,324,2.904,326,2.623,327,2.623,328,2.623,329,2.623,330,2.623,332,1.911,338,3.119,342,2.623,370,2.958,371,2.374,383,2.68,390,1.533,420,2.008,432,1.694,433,1.911,434,2.374,435,2.958,436,2.958,438,1.694,439,1.911,440,1.125,441,1.911,442,1.911,443,1.911,444,2.958,445,1.911,446,1.911,447,2.958,448,2.958,449,1.911,450,1.911,451,2.623,452,1.911,453,1.911,454,1.911,455,1.911,475,1.297,481,3.21,558,1.694,604,1.533,689,4.883,755,1.404,775,1.297,860,2.904,900,1.694,916,3.614,917,3.614,918,3.614,921,1.911,954,1.911,958,1.911,959,1.911,960,1.911,961,4.075,962,3.619,963,3.619,964,2.958,966,1.694,971,1.694,972,1.694,995,4.075,1001,1.297,1009,2.958,1010,1.911,1015,1.911,1146,1.911,1147,5.164,1148,6.66,1149,2.239,1150,2.239,1151,2.239,1152,6.041,1153,2.239,1154,5.164,1155,2.239,1156,2.239,1157,2.239,1158,2.239,1159,2.239,1160,2.239,1161,2.239,1162,2.239,1163,2.239,1164,2.239,1165,2.239,1166,2.239,1167,4.24,1168,2.239,1169,2.239,1170,2.239,1171,2.239,1172,2.239,1173,2.239,1174,3.466]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":272,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1***$2@$3",{"_index":927,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["1****$2",{"_index":924,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["1.10.4",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["15.4.0",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["2.0",{"_index":659,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["2.17.0",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["2.19.2",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":970,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":1059,"title":{},"body":{"license.html":{}}}],["21",{"_index":1145,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1054,"title":{},"body":{"index.html":{},"license.html":{},"overview.html":{}}}],["3.1.20",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":515,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["3000",{"_index":567,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["4.0.55",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":949,"title":{},"body":{"coverage.html":{}}}],["5.0.0",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":969,"title":{},"body":{"coverage.html":{}}}],["6.6.3",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["60).tostring",{"_index":533,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["7",{"_index":1144,"title":{},"body":{"overview.html":{}}}],["7.6.5",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["7.9.8",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["7200",{"_index":645,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["8.2.0",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["_",{"_index":649,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["_data",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["above",{"_index":1076,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":629,"title":{},"body":{"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{}}}],["action",{"_index":662,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["activate",{"_index":140,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["activel",{"_index":145,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["add(setting.expiredin.value",{"_index":356,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["add(setting.refreshexpiredin.value",{"_index":359,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["address",{"_index":896,"title":{},"body":{"classes/ViewerEntity.html":{}}}],["advised",{"_index":1133,"title":{},"body":{"license.html":{}}}],["allow",{"_index":604,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["allows",{"_index":1038,"title":{},"body":{"index.html":{}}}],["allowuploadfiletype",{"_index":596,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["alphabet",{"_index":961,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["alphabet(a",{"_index":1155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["and/or",{"_index":1081,"title":{},"body":{"license.html":{}}}],["ap",{"_index":690,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{}}}],["api",{"_index":211,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["apollo",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"interfaces/SocfonyConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["app.config",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":1026,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["applydecorators",{"_index":88,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":242,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["argstype",{"_index":393,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{},"classes/UpdateViewerArgs.html":{}}}],["arising",{"_index":1130,"title":{},"body":{"license.html":{}}}],["array.isarray(token",{"_index":428,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["async",{"_index":118,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["audio",{"_index":615,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["auth",{"_index":78,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["auth_metadata_has_authorization",{"_index":91,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_metadata_has_authorization_type",{"_index":92,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_token_default_expired_in",{"_index":326,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_token_default_expired_unit",{"_index":327,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_token_default_refresh_expired_in",{"_index":328,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_token_default_refresh_expired_unit",{"_index":329,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_token_vvalidity_period_key",{"_index":330,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authdecoratoroptions",{"_index":75,"title":{"interfaces/AuthDecoratorOptions.html":{}},"body":{"interfaces/AuthDecoratorOptions.html":{},"coverage.html":{}}}],["authoprization",{"_index":313,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["authorization",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UpdateViewerArgs.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["authorization(options",{"_index":104,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"miscellaneous/functions.html":{}}}],["authorization(undefined",{"_index":589,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["authorization.guard",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{}}}],["authorization_token_create_user_where_allow_one",{"_index":252,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authorization_token_not_found",{"_index":323,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authorizationguard",{"_index":46,"title":{"guards/AuthorizationGuard.html":{}},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"coverage.html":{}}}],["authorizationtoken",{"_index":177,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"miscellaneous/enumerations.html":{}}}],["authorizationtoken(@context",{"_index":268,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["authorizationtoken(context",{"_index":231,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["authorizationtoken.expiredat.gettime",{"_index":374,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["authorizationtoken.token",{"_index":377,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["authorizationtoken?.user",{"_index":418,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["authorizationtokenentity",{"_index":194,"title":{"classes/AuthorizationTokenEntity.html":{}},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"coverage.html":{}}}],["authorizationtokenentity'})@authorization({hasauthorization",{"_index":234,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["authorizationtokenentityresolver",{"_index":225,"title":{"classes/AuthorizationTokenEntityResolver.html":{}},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"coverage.html":{}}}],["authorizationtokenmodule",{"_index":11,"title":{"modules/AuthorizationTokenModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules.html":{},"overview.html":{}}}],["authorizationtokenservice",{"_index":128,"title":{"injectables/AuthorizationTokenService.html":{}},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"coverage.html":{},"overview.html":{}}}],["authorizationtokenvalidityperiod",{"_index":331,"title":{"interfaces/AuthorizationTokenValidityPeriod.html":{}},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"coverage.html":{}}}],["authorizationwith",{"_index":110,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authorizationwithout",{"_index":112,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authotization",{"_index":304,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["authotizationtoken",{"_index":346,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["autoschemafile",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1142,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":802,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["await",{"_index":181,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":698,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["baseoptions",{"_index":686,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["bcrypt",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["binary",{"_index":1066,"title":{},"body":{"license.html":{}}}],["bio",{"_index":803,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["boolean",{"_index":85,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bound",{"_index":893,"title":{},"body":{"classes/ViewerEntity.html":{}}}],["browse",{"_index":1140,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1137,"title":{},"body":{"modules.html":{}}}],["bsd",{"_index":1053,"title":{},"body":{"index.html":{},"license.html":{}}}],["bucket",{"_index":573,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{},"injectables/TencentCloudCosService.html":{}}}],["bucket.split",{"_index":651,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["builds",{"_index":1032,"title":{},"body":{"index.html":{}}}],["business",{"_index":1120,"title":{},"body":{"license.html":{}}}],["byte",{"_index":1060,"title":{},"body":{"license.html":{}}}],["c",{"_index":1058,"title":{},"body":{"license.html":{}}}],["callback",{"_index":448,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["canactivate",{"_index":119,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["canactivate(context",{"_index":138,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["canactivelytokenhandler",{"_index":120,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["canactivelytokenhandler(context",{"_index":143,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["case",{"_index":878,"title":{},"body":{"injectables/UserService.html":{}}}],["caused",{"_index":1122,"title":{},"body":{"license.html":{}}}],["check",{"_index":935,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["china",{"_index":503,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["class",{"_index":70,"title":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":195,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"overview.html":{}}}],["classprovider",{"_index":433,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["clause",{"_index":1055,"title":{},"body":{"index.html":{},"license.html":{}}}],["client",{"_index":137,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"modules/PrismaModule.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client.sendsms(request",{"_index":719,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["cloud",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/SecurityModule.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"miscellaneous/functions.html":{}}}],["cloud.module.ts",{"_index":681,"title":{},"body":{"modules/TencentCloudModule.html":{}}}],["cloud/common/index.ts",{"_index":968,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["cloud/cos/cos.resolver.ts",{"_index":581,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["cloud/cos/cos.resolver.ts:43",{"_index":587,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["cloud/cos/cos.resolver.ts:55",{"_index":591,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["cloud/cos/cos.resolver.ts:72",{"_index":594,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["cloud/cos/cos.resolver.ts:90",{"_index":599,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["cloud/cos/entities/cos.entity.ts",{"_index":570,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{},"coverage.html":{}}}],["cloud/cos/entities/cos.entity.ts:17",{"_index":577,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{}}}],["cloud/cos/entities/cos.entity.ts:25",{"_index":578,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{}}}],["cloud/cos/entities/cos.entity.ts:33",{"_index":579,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{}}}],["cloud/cos/soc.service.ts",{"_index":626,"title":{},"body":{"injectables/TencentCloudCosService.html":{},"coverage.html":{}}}],["cloud/cos/soc.service.ts:19",{"_index":638,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["cloud/cos/soc.service.ts:29",{"_index":640,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["cloud/cos/soc.service.ts:36",{"_index":634,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["cloud/cos/soc.service.ts:64",{"_index":637,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["cloud/cos/soc.service.ts:9",{"_index":633,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["cloud/sms",{"_index":512,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["cloud/sms/sms.service.ts",{"_index":684,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"coverage.html":{}}}],["cloud/sms/sms.service.ts:14",{"_index":697,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["cloud/sms/sms.service.ts:29",{"_index":688,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["cloud/sms/sms.service.ts:45",{"_index":694,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["cloud/sts/entities/sts.entity.ts",{"_index":721,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"coverage.html":{}}}],["cloud/sts/entities/sts.entity.ts:18",{"_index":727,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{}}}],["cloud/sts/entities/sts.entity.ts:26",{"_index":725,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{}}}],["cloud/sts/entities/sts.entity.ts:34",{"_index":726,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{}}}],["cloud/sts/entities/sts.entity.ts:52",{"_index":738,"title":{},"body":{"classes/TencentCloudStsFederationToken.html":{}}}],["cloud/sts/entities/sts.entity.ts:61",{"_index":740,"title":{},"body":{"classes/TencentCloudStsFederationToken.html":{}}}],["cloud/sts/entities/sts.entity.ts:70",{"_index":739,"title":{},"body":{"classes/TencentCloudStsFederationToken.html":{}}}],["cloud/sts/sts.service.ts",{"_index":741,"title":{},"body":{"injectables/TencentCloudStsService.html":{},"coverage.html":{}}}],["cloud/sts/sts.service.ts:14",{"_index":742,"title":{},"body":{"injectables/TencentCloudStsService.html":{}}}],["cloud/tencent",{"_index":680,"title":{},"body":{"modules/TencentCloudModule.html":{}}}],["clous",{"_index":731,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authorizationtokenmodule",{"_index":287,"title":{},"body":{"modules/AuthorizationTokenModule.html":{},"overview.html":{}}}],["cluster_authorizationtokenmodule_exports",{"_index":289,"title":{},"body":{"modules/AuthorizationTokenModule.html":{},"overview.html":{}}}],["cluster_authorizationtokenmodule_imports",{"_index":288,"title":{},"body":{"modules/AuthorizationTokenModule.html":{}}}],["cluster_authorizationtokenmodule_providers",{"_index":290,"title":{},"body":{"modules/AuthorizationTokenModule.html":{},"overview.html":{}}}],["cluster_securitymodule",{"_index":456,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_exports",{"_index":458,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_imports",{"_index":457,"title":{},"body":{"modules/SecurityModule.html":{}}}],["cluster_securitymodule_providers",{"_index":459,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_tencentcloudmodule",{"_index":677,"title":{},"body":{"modules/TencentCloudModule.html":{},"overview.html":{}}}],["cluster_tencentcloudmodule_exports",{"_index":679,"title":{},"body":{"modules/TencentCloudModule.html":{},"overview.html":{}}}],["cluster_tencentcloudmodule_providers",{"_index":678,"title":{},"body":{"modules/TencentCloudModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":789,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":790,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":791,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":792,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userprofilemodule",{"_index":815,"title":{},"body":{"modules/UserProfileModule.html":{},"overview.html":{}}}],["cluster_userprofilemodule_exports",{"_index":816,"title":{},"body":{"modules/UserProfileModule.html":{},"overview.html":{}}}],["cluster_userprofilemodule_imports",{"_index":817,"title":{},"body":{"modules/UserProfileModule.html":{}}}],["cluster_userprofilemodule_providers",{"_index":818,"title":{},"body":{"modules/UserProfileModule.html":{},"overview.html":{}}}],["code",{"_index":475,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/ViewerResolver.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["code'})@authorization({hasauthorization",{"_index":478,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["codes",{"_index":921,"title":{},"body":{"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["common",{"_index":705,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"miscellaneous/functions.html":{}}}],["compare",{"_index":309,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["compare(password",{"_index":1016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["comparecode",{"_index":490,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["comparecode(phone",{"_index":496,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["compared",{"_index":365,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"classes/ViewerResolver.html":{}}}],["comparepassword",{"_index":864,"title":{},"body":{"injectables/UserService.html":{}}}],["comparepassword(user",{"_index":867,"title":{},"body":{"injectables/UserService.html":{}}}],["comparesecurity",{"_index":865,"title":{},"body":{"injectables/UserService.html":{}}}],["comparesecurity(user",{"_index":870,"title":{},"body":{"injectables/UserService.html":{}}}],["compase",{"_index":498,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["complexity",{"_index":1044,"title":{},"body":{"index.html":{}}}],["compore",{"_index":869,"title":{},"body":{"injectables/UserService.html":{}}}],["conditions",{"_index":1072,"title":{},"body":{"license.html":{}}}],["config",{"_index":551,"title":{},"body":{"interfaces/SocfonyConfig.html":{},"miscellaneous/functions.html":{}}}],["connect",{"_index":449,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["consequential",{"_index":1112,"title":{},"body":{"license.html":{}}}],["const",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"injectables/UserService.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerResolver.html":{}}}],["constants",{"_index":167,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":125,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["constructor(authorizationtokenservice",{"_index":229,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["constructor(cosservice",{"_index":585,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["constructor(prisma",{"_index":301,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"injectables/UserProfileService.html":{}}}],["constructor(prismaclient",{"_index":854,"title":{},"body":{"classes/UserResolver.html":{}}}],["constructor(private",{"_index":482,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"classes/UserInterfaceResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(profileservice",{"_index":826,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["constructor(reflector",{"_index":126,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["constructor(request",{"_index":400,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["constructor(securitysmsservice",{"_index":471,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"injectables/UserService.html":{}}}],["constructor(sts",{"_index":631,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["constructor(tencentcloudsmsservice",{"_index":493,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["constructor(userprofileservice",{"_index":780,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["constructor(userservice",{"_index":902,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["context",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["context.authorizationtoken",{"_index":269,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["context.gethandler",{"_index":176,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["context.gettype",{"_index":171,"title":{},"body":{"guards/AuthorizationGuard.html":{},"miscellaneous/variables.html":{}}}],["context.request.context",{"_index":419,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.switchtohttp().getrequest",{"_index":184,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["context.switchtohttp().getrequest().context",{"_index":174,"title":{},"body":{"guards/AuthorizationGuard.html":{},"miscellaneous/variables.html":{}}}],["context.ts",{"_index":395,"title":{},"body":{"classes/ExecutionContext.html":{},"coverage.html":{}}}],["context.ts:15",{"_index":404,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.ts:16",{"_index":403,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.ts:17",{"_index":405,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.ts:24",{"_index":407,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.ts:54",{"_index":412,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.ts:7",{"_index":401,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.ts:73",{"_index":410,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["context.user",{"_index":486,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"classes/ViewerResolver.html":{}}}],["continue",{"_index":934,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["contract",{"_index":1125,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":1086,"title":{},"body":{"license.html":{}}}],["convert",{"_index":930,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["copyright",{"_index":1057,"title":{},"body":{"license.html":{}}}],["core",{"_index":135,"title":{},"body":{"guards/AuthorizationGuard.html":{},"index.html":{}}}],["cos",{"_index":571,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{}}}],["cos/cos.resolver",{"_index":682,"title":{},"body":{"modules/TencentCloudModule.html":{}}}],["cosservice",{"_index":588,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["coverage",{"_index":944,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creat",{"_index":308,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["create",{"_index":131,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["create(prismaclient",{"_index":406,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["createauthorizationtoken",{"_index":227,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["createauthorizationtoken(args",{"_index":238,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["createauthorizationtokenargs",{"_index":239,"title":{"classes/CreateAuthorizationTokenArgs.html":{}},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/UpdateViewerArgs.html":{},"coverage.html":{}}}],["createclient",{"_index":685,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{}}}],["createclient(region",{"_index":687,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{}}}],["createcostemporaryreadcredential",{"_index":583,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["createcostemporarywritecredential",{"_index":584,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["createcostemporarywritecredential(type",{"_index":595,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["createdat",{"_index":541,"title":{},"body":{"injectables/SecuritySmsService.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/ViewerEntity.html":{}}}],["createparamdecorator(function",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createsecurity",{"_index":469,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["createsecurity(phone",{"_index":474,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["createtemporaryreadcredential",{"_index":627,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["createtemporarywritecredential",{"_index":628,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["createtemporarywritecredential(name",{"_index":636,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["createtokenwithsecurity",{"_index":297,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["createtokenwithsecurity(user",{"_index":305,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["createuniontype",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuserauthorizationtoken",{"_index":298,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["createuserauthorizationtoken(user",{"_index":311,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["createviewersecurity",{"_index":470,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["createviewersecurity(@context",{"_index":485,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["createviewersecurity(context",{"_index":477,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["creathe",{"_index":307,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["credential",{"_index":572,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"miscellaneous/functions.html":{}}}],["credential'})@authorizationwith",{"_index":598,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["credentials",{"_index":582,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["custom",{"_index":962,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["customalphabet('0123456789",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customalphabet('23456789qwertyupasdfghjklzxcvbnm",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customalphabet('qwertyuiopasdfghjklzxcvbnm",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customalphabet(alphabet",{"_index":1157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damage",{"_index":1136,"title":{},"body":{"license.html":{}}}],["damages",{"_index":1113,"title":{},"body":{"license.html":{}}}],["data",{"_index":278,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/ViewerResolver.html":{},"license.html":{}}}],["data[key",{"_index":932,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["database",{"_index":321,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["datasources",{"_index":443,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":203,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/ViewerEntity.html":{}}}],["date.now",{"_index":545,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["dayjs",{"_index":322,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"injectables/SecuritySmsService.html":{},"dependencies.html":{}}}],["dayjs().add(10",{"_index":363,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["dayjs().add(options.expiredin",{"_index":523,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["days",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["debug",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{}}}],["decorator",{"_index":79,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":204,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"classes/UserResolver.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["default",{"_index":689,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":129,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"dependencies.html":{},"overview.html":{}}}],["derived",{"_index":1090,"title":{},"body":{"license.html":{}}}],["desc",{"_index":542,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["description",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["destory",{"_index":453,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["developers",{"_index":1040,"title":{},"body":{"index.html":{}}}],["developing",{"_index":1045,"title":{},"body":{"index.html":{}}}],["direct",{"_index":1107,"title":{},"body":{"license.html":{}}}],["disclaimed",{"_index":1103,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":1078,"title":{},"body":{"license.html":{}}}],["disconnect",{"_index":454,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["distribution",{"_index":1083,"title":{},"body":{"license.html":{}}}],["document",{"_index":1050,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":945,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["don't",{"_index":186,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["dontenvconfig",{"_index":555,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["dot",{"_index":564,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["dotenv",{"_index":556,"title":{},"body":{"interfaces/SocfonyConfig.html":{},"dependencies.html":{}}}],["dto",{"_index":858,"title":{},"body":{"classes/UserResolver.html":{}}}],["dto/create",{"_index":261,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["dto/profile",{"_index":833,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["dto/update",{"_index":919,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["duration",{"_index":641,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["durationseconds",{"_index":654,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["e",{"_index":894,"title":{},"body":{"classes/ViewerEntity.html":{}}}],["ecosystem",{"_index":1046,"title":{},"body":{"index.html":{}}}],["effect",{"_index":661,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["email",{"_index":775,"title":{},"body":{"classes/UserInterface.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["email(@parent",{"_index":925,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["email(user",{"_index":904,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["email.replace(/^(\\w{1}).*?(\\w{1",{"_index":926,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["encrpyted",{"_index":1019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encrypted",{"_index":1017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["endorse",{"_index":1087,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":98,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/ExecutionContext.html":{},"interfaces/SocfonyConfig.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{}}}],["endpoit",{"_index":100,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"classes/AuthorizationTokenEntity.html":{}}}],["entities/authorization",{"_index":263,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["entities/cos.entity",{"_index":602,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["entities/profile.entity",{"_index":834,"title":{},"body":{"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{}}}],["entities/user.entity",{"_index":859,"title":{},"body":{"classes/UserResolver.html":{}}}],["entities/user.interface",{"_index":785,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["entities/user.union",{"_index":861,"title":{},"body":{"classes/UserResolver.html":{}}}],["entities/viewer.entity",{"_index":886,"title":{},"body":{"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerResolver.html":{}}}],["entity",{"_index":199,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/UserEntity.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"classes/UserResolver.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["entity.'})@authorization({hasauthorization",{"_index":244,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["enum",{"_index":607,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["enumerations",{"_index":1002,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":265,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["env",{"_index":558,"title":{},"body":{"interfaces/SocfonyConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":371,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/SocfonyConfig.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["error(authorization_token_create_user_where_allow_one",{"_index":273,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["error(authorization_token_not_found",{"_index":372,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["error(constants[`user_${key.touppercase()}_field_existed",{"_index":939,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["error(security_compare_failed",{"_index":369,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"classes/ViewerResolver.html":{}}}],["error(unauthorized",{"_index":193,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["error(user_not_found",{"_index":281,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/UserResolver.html":{}}}],["error(user_not_set_phone",{"_index":487,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["even",{"_index":1132,"title":{},"body":{"license.html":{}}}],["event",{"_index":1104,"title":{},"body":{"license.html":{}}}],["exection",{"_index":912,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["execution",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":31,"title":{"classes/ExecutionContext.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["executioncontext.create(prisma",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["exemplary",{"_index":1111,"title":{},"body":{"license.html":{}}}],["existed",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiration",{"_index":737,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["expired",{"_index":206,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"injectables/AuthorizationTokenService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["expiredat",{"_index":200,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"injectables/AuthorizationTokenService.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{}}}],["expiredat.gettime",{"_index":349,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["expiredin",{"_index":339,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"injectables/SecuritySmsService.html":{}}}],["expiredin.unit",{"_index":343,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["expiredin.value",{"_index":341,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["expiredtime",{"_index":735,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["export",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{}}}],["express",{"_index":164,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/ExecutionContext.html":{},"dependencies.html":{},"license.html":{}}}],["extendcode",{"_index":710,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["extends",{"_index":440,"title":{},"body":{"modules/PrismaModule.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":113,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"injectables/SecuritySmsService.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["federation",{"_index":592,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["field",{"_index":219,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["field((type",{"_index":224,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/ViewerEntity.html":{}}}],["field(undefined",{"_index":205,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{}}}],["file",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["filename",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["find",{"_index":389,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{}}}],["fitness",{"_index":1100,"title":{},"body":{"license.html":{}}}],["fiveminutesdate",{"_index":378,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["fiveminutesdate.gettime",{"_index":375,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["flutter",{"_index":1049,"title":{},"body":{"index.html":{}}}],["following",{"_index":1071,"title":{},"body":{"license.html":{}}}],["form",{"_index":1079,"title":{},"body":{"license.html":{}}}],["forms",{"_index":1067,"title":{},"body":{"license.html":{}}}],["found",{"_index":370,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"miscellaneous/variables.html":{}}}],["friendly",{"_index":1160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":898,"title":{},"body":{"classes/ViewerEntity.html":{},"index.html":{}}}],["function",{"_index":103,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"interfaces/SocfonyConfig.html":{},"classes/ViewerResolver.html":{},"coverage.html":{}}}],["functions",{"_index":1008,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["gem",{"_index":1061,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getauthorizationtoken",{"_index":398,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["getauthorizationtoken(prismaclient",{"_index":409,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["getbaseoptions",{"_index":696,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["getconfig",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"interfaces/SocfonyConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getcredential",{"_index":704,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getfederationtokenresponse",{"_index":729,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["gethasauthorization",{"_index":121,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["gethasauthorization(context",{"_index":147,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["gethasauthorizationtype",{"_index":122,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["gethasauthorizationtype(context",{"_index":150,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["gethttpauthorization",{"_index":399,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["gethttpauthorization(request",{"_index":411,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["getoptions",{"_index":491,"title":{},"body":{"injectables/SecuritySmsService.html":{},"injectables/TencentCloudCosService.html":{}}}],["getoptions(haschina",{"_index":500,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["gettemporarycredentialdurationseconds",{"_index":639,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["getting",{"_index":1027,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettokenexpiredin",{"_index":299,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["gif",{"_index":611,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["global",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["goods",{"_index":1116,"title":{},"body":{"license.html":{}}}],["gqlcontexttype",{"_index":161,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["gqlexecutioncontext",{"_index":162,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["gqlexecutioncontext.create(context).getcontext",{"_index":173,"title":{},"body":{"guards/AuthorizationGuard.html":{},"miscellaneous/variables.html":{}}}],["graph",{"_index":1141,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":172,"title":{},"body":{"guards/AuthorizationGuard.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["graphqlisodatetime",{"_index":480,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{}}}],["graphqlmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forrootasync",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["guangzhou",{"_index":691,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{}}}],["guard",{"_index":114,"title":{"guards/AuthorizationGuard.html":{}},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":115,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["handler",{"_index":146,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["hasauthorization",{"_index":83,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"miscellaneous/variables.html":{}}}],["haschina",{"_index":502,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["hash",{"_index":931,"title":{},"body":{"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["hash(password",{"_index":1020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hastokenexpired",{"_index":300,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["hastokenexpired(token",{"_index":317,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["hastokenexpiredtype",{"_index":87,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/SecuritySmsResolver.html":{},"miscellaneous/enumerations.html":{}}}],["hastokenexpiredtype.auth",{"_index":108,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/SecuritySmsResolver.html":{},"miscellaneous/variables.html":{}}}],["hastokenexpiredtype.refresh",{"_index":284,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["header",{"_index":413,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["headers",{"_index":423,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["headers[key",{"_index":427,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["headers[key.tolowercase",{"_index":425,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["help",{"_index":1042,"title":{},"body":{"index.html":{}}}],["helper",{"_index":1022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["holder",{"_index":1084,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1094,"title":{},"body":{"license.html":{}}}],["hook",{"_index":447,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":97,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/ExecutionContext.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["httpprofile",{"_index":715,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{}}}],["icontext",{"_index":159,"title":{},"body":{"guards/AuthorizationGuard.html":{},"miscellaneous/variables.html":{}}}],["icontext.create",{"_index":182,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["id",{"_index":217,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["idhelper",{"_index":257,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{}}}],["idhelper.alphabet(32",{"_index":653,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["idhelper.id(128",{"_index":355,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["idhelper.id(64",{"_index":279,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/SecuritySmsService.html":{}}}],["idhelper.numeral(6",{"_index":522,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["images",{"_index":608,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["implements",{"_index":168,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"modules/PrismaModule.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"miscellaneous/variables.html":{}}}],["implied",{"_index":1095,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/SecurityModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{}}}],["incidental",{"_index":1109,"title":{},"body":{"license.html":{}}}],["include",{"_index":431,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["including",{"_index":1097,"title":{},"body":{"license.html":{}}}],["index",{"_index":80,"title":{"index.html":{}},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indirect",{"_index":1108,"title":{},"body":{"license.html":{}}}],["info",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["inherited",{"_index":759,"title":{},"body":{"classes/UserEntity.html":{},"classes/ViewerEntity.html":{}}}],["inique",{"_index":889,"title":{},"body":{"classes/UserWhereUniqueInput.html":{}}}],["init",{"_index":446,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["initializecontext",{"_index":123,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["initializecontext(context",{"_index":152,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["initialzd",{"_index":154,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["inject",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":160,"title":{"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{}},"body":{"guards/AuthorizationGuard.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":295,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":391,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{}}}],["inputtype",{"_index":848,"title":{},"body":{"classes/UserProfileUpdateInput.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{}}}],["instanceof",{"_index":367,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/ViewerResolver.html":{}}}],["int",{"_index":728,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["interface",{"_index":74,"title":{"interfaces/AuthDecoratorOptions.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"interfaces/SocfonyConfig.html":{}},"body":{"interfaces/AuthDecoratorOptions.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"interfaces/SocfonyConfig.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"coverage.html":{}}}],["interface.resolver",{"_index":797,"title":{},"body":{"modules/UserModule.html":{}}}],["interface.resolver.ts",{"_index":779,"title":{},"body":{"classes/UserInterfaceResolver.html":{},"coverage.html":{}}}],["interface.resolver.ts:11",{"_index":782,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["interface.resolver.ts:23",{"_index":784,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["interfaces",{"_index":76,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"interfaces/SocfonyConfig.html":{},"overview.html":{}}}],["interfacetype",{"_index":772,"title":{},"body":{"classes/UserInterface.html":{}}}],["interruption",{"_index":1121,"title":{},"body":{"license.html":{}}}],["iso8601",{"_index":736,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["isproduction",{"_index":552,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["item",{"_index":529,"title":{},"body":{"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{}}}],["jpg",{"_index":609,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["json.stringify",{"_index":657,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["kernel",{"_index":408,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["key",{"_index":420,"title":{},"body":{"classes/ExecutionContext.html":{},"injectables/TencentCloudCosService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{}}}],["liability",{"_index":1124,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1106,"title":{},"body":{"license.html":{}}}],["license",{"_index":1052,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":1056,"title":{},"body":{"index.html":{}}}],["limited",{"_index":1098,"title":{},"body":{"license.html":{}}}],["list",{"_index":670,"title":{},"body":{"injectables/TencentCloudCosService.html":{},"license.html":{}}}],["literal",{"_index":381,"title":{},"body":{"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/TencentCloudCosResolver.html":{}}}],["load",{"_index":557,"title":{},"body":{"interfaces/SocfonyConfig.html":{},"miscellaneous/functions.html":{}}}],["loadconfig",{"_index":951,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loadconfig(path",{"_index":559,"title":{},"body":{"interfaces/SocfonyConfig.html":{},"miscellaneous/functions.html":{}}}],["location",{"_index":804,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["logged",{"_index":213,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["logger",{"_index":434,"title":{},"body":{"modules/PrismaModule.html":{},"interfaces/SocfonyConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["logger('prisma",{"_index":441,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["logger('socfony",{"_index":560,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["logger.error(error.message",{"_index":561,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["logger.log(`loaded",{"_index":563,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["login",{"_index":216,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"miscellaneous/variables.html":{}}}],["loss",{"_index":1118,"title":{},"body":{"license.html":{}}}],["lte",{"_index":362,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["mail",{"_index":895,"title":{},"body":{"classes/ViewerEntity.html":{}}}],["map((item",{"_index":528,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["matches",{"_index":942,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["matching",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["materials",{"_index":1082,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":1037,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":1099,"title":{},"body":{"license.html":{}}}],["met",{"_index":1073,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":995,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":117,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["middleware",{"_index":438,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mime",{"_index":606,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["minutes').todate",{"_index":364,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["miscellaneous",{"_index":1001,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mobile",{"_index":940,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["modification",{"_index":1068,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["months",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":1039,"title":{},"body":{"index.html":{}}}],["mp3",{"_index":616,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["mp4",{"_index":613,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["mutation",{"_index":249,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{}}}],["mutation((returns",{"_index":283,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["mutation(undefined",{"_index":240,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{}}}],["name",{"_index":133,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["name/cos:abortmultipartupload",{"_index":675,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:completemultipartupload",{"_index":674,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:getobject",{"_index":663,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:headobject",{"_index":664,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:initiatemultipartupload",{"_index":669,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:listmultipartuploads",{"_index":671,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:listparts",{"_index":672,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:optionsobject",{"_index":665,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:postobject",{"_index":668,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:putobject",{"_index":667,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["name/cos:uploadpart",{"_index":673,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["names",{"_index":1085,"title":{},"body":{"license.html":{}}}],["namespace",{"_index":336,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["namespace_name",{"_index":335,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["nanoid",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["nanoid(size",{"_index":1158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":95,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/SecuritySmsResolver.html":{},"classes/UpdateViewerArgs.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["negligence",{"_index":1128,"title":{},"body":{"license.html":{}}}],["nestjs",{"_index":134,"title":{},"body":{"guards/AuthorizationGuard.html":{},"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["networking",{"_index":1035,"title":{},"body":{"index.html":{}}}],["new",{"_index":192,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserResolver.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newphonesecurity",{"_index":749,"title":{},"body":{"classes/UpdateViewerArgs.html":{},"classes/ViewerResolver.html":{}}}],["nextjs",{"_index":149,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["nodejs",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["nodejs/tencentcloud/services/sms/v20190711/sms_client",{"_index":701,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["nodejs/tencentcloud/services/sms/v20190711/sms_models",{"_index":703,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["nodejs/tencentcloud/services/sts/v20180813/sts_client",{"_index":744,"title":{},"body":{"injectables/TencentCloudStsService.html":{}}}],["nodejs/tencentcloud/services/sts/v20180813/sts_models",{"_index":730,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["notice",{"_index":1077,"title":{},"body":{"license.html":{}}}],["nullable",{"_index":732,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{}}}],["number",{"_index":383,"title":{},"body":{"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["number.parseint",{"_index":513,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["numeral",{"_index":963,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":310,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"injectables/TencentCloudCosService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":621,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudSmsService.html":{},"classes/ViewerResolver.html":{}}}],["object.keys(data",{"_index":929,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["object.keys(where).length",{"_index":271,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["objecttype",{"_index":220,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UserEntity.html":{},"classes/UserProfileEntity.html":{},"classes/ViewerEntity.html":{}}}],["ogg",{"_index":614,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["omit",{"_index":767,"title":{},"body":{"classes/UserInterface.html":{},"classes/UserProfileUpdateInput.html":{},"classes/ViewerEntity.html":{}}}],["omittype",{"_index":849,"title":{},"body":{"classes/UserProfileUpdateInput.html":{}}}],["one",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onmoduledestroy",{"_index":435,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["onmoduleinit",{"_index":436,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":1030,"title":{},"body":{"index.html":{}}}],["optional",{"_index":82,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"miscellaneous/functions.html":{}}}],["options.endpoint",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["options.expiredin",{"_index":532,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["options.isproduction",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["options.templateid",{"_index":537,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["options.veriables",{"_index":526,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["options?.hasauthorization",{"_index":106,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["options?.type",{"_index":107,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["orderby",{"_index":540,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["other.id",{"_index":938,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["otherwise",{"_index":1129,"title":{},"body":{"license.html":{}}}],["out",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1143,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":813,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["package",{"_index":975,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":99,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["param.hasauthorization",{"_index":101,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["param.type",{"_index":102,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["parameters",{"_index":132,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":695,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["paramsset",{"_index":525,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["parent",{"_index":250,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"classes/ViewerResolver.html":{}}}],["partialtype",{"_index":850,"title":{},"body":{"classes/UserProfileUpdateInput.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{}}}],["partialtype(userprofileentity",{"_index":851,"title":{},"body":{"classes/UserProfileUpdateInput.html":{}}}],["partialtype(viewerentity",{"_index":890,"title":{},"body":{"classes/UserWhereUniqueInput.html":{}}}],["particular",{"_index":1101,"title":{},"body":{"license.html":{}}}],["password",{"_index":776,"title":{},"body":{"classes/UserInterface.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerResolver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["passwordhelper",{"_index":873,"title":{},"body":{"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["passwordhelper.compare(password",{"_index":875,"title":{},"body":{"injectables/UserService.html":{}}}],["passwordhelper.hash(data[key",{"_index":933,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["path",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"interfaces/SocfonyConfig.html":{},"classes/UserProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["period",{"_index":316,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"miscellaneous/variables.html":{}}}],["permission",{"_index":1093,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":1069,"title":{},"body":{"license.html":{}}}],["phone",{"_index":280,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserInterface.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["phone(@parent",{"_index":922,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["phone(user",{"_index":906,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["phone.replace(/(.*)\\d{4}(\\d{4",{"_index":923,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["phone.startswith('+86",{"_index":520,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["phonenumberset",{"_index":536,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["pick",{"_index":693,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"classes/UserUpdateInput.html":{}}}],["picktype",{"_index":753,"title":{},"body":{"classes/UpdateViewerArgs.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{}}}],["picktype(viewerentity",{"_index":887,"title":{},"body":{"classes/UserUpdateInput.html":{}}}],["platform",{"_index":1033,"title":{},"body":{"index.html":{}}}],["playground",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["plugin",{"_index":1036,"title":{},"body":{"index.html":{}}}],["png",{"_index":610,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["policy",{"_index":656,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["port",{"_index":553,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["possibility",{"_index":1134,"title":{},"body":{"license.html":{}}}],["prifle",{"_index":824,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["prior",{"_index":1092,"title":{},"body":{"license.html":{}}}],["prisma",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"injectables/SecuritySmsService.html":{},"classes/UserInterface.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma.authorizationtokengetpayload",{"_index":223,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{}}}],["prisma.middleware",{"_index":1023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma.usergetpayload",{"_index":842,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":891,"title":{},"body":{"classes/UserWhereUniqueInput.html":{}}}],["prisma/client",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"injectables/SecuritySmsService.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"injectables/SecuritySmsService.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["prismaclient.authorizationtoken.findunique",{"_index":430,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["prismaloggermiddleware",{"_index":437,"title":{},"body":{"modules/PrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["prismaloggermiddleware(logger",{"_index":1021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prismamodule",{"_index":13,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["private",{"_index":169,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"injectables/SecuritySmsService.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["process.argv",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.client_graphql_endpoint",{"_index":568,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["process.env.client_server_port",{"_index":566,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["process.env.database_url",{"_index":445,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":565,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["process.env.tencent_cloud_cos_bucket",{"_index":643,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["process.env.tencent_cloud_cos_region",{"_index":644,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["process.env.tencent_cloud_sms_app_id",{"_index":707,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["process.env.tencent_cloud_sms_china_template_id",{"_index":516,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["process.env.tencent_cloud_sms_china_veriables",{"_index":517,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["process.env.tencent_cloud_sms_expired_in",{"_index":514,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["process.env.tencent_cloud_sms_extend_code",{"_index":711,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["process.env.tencent_cloud_sms_other_template_id",{"_index":518,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["process.env.tencent_cloud_sms_other_veriables",{"_index":519,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["process.env.tencent_cloud_sms_sender_id",{"_index":713,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["process.env.tencent_cloud_sms_sign",{"_index":709,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["process.exit(1",{"_index":562,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["procurement",{"_index":1114,"title":{},"body":{"license.html":{}}}],["production",{"_index":554,"title":{},"body":{"interfaces/SocfonyConfig.html":{}}}],["products",{"_index":1089,"title":{},"body":{"license.html":{}}}],["profile",{"_index":714,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/ViewerEntity.html":{}}}],["profile'})@authorizationwith",{"_index":831,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["profile(@parent",{"_index":787,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["profile(user",{"_index":783,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["profile.resolver",{"_index":821,"title":{},"body":{"modules/UserProfileModule.html":{}}}],["profile.service",{"_index":822,"title":{},"body":{"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{}}}],["profile.userid",{"_index":837,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["profile/entities/profile.entity",{"_index":774,"title":{},"body":{"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{}}}],["profile/profile.module",{"_index":796,"title":{},"body":{"modules/UserModule.html":{}}}],["profile/profile.service",{"_index":786,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["profileservice",{"_index":828,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["profits",{"_index":1119,"title":{},"body":{"license.html":{}}}],["project",{"_index":1047,"title":{},"body":{"index.html":{}}}],["promise",{"_index":142,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{}}}],["promote",{"_index":1088,"title":{},"body":{"license.html":{}}}],["properties",{"_index":81,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"classes/AuthorizationTokenEntity.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{}}}],["provide",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":1070,"title":{},"body":{"license.html":{}}}],["provider",{"_index":439,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{}}}],["public",{"_index":396,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["purpose",{"_index":1102,"title":{},"body":{"license.html":{}}}],["qcs::cos:${region}:uid/${uid}:${bucket",{"_index":666,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["qcs::cos:${region}:uid/${uid}:${bucket}/${name",{"_index":676,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["query",{"_index":233,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["query(undefined",{"_index":232,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["read",{"_index":593,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{}}}],["readability",{"_index":964,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["readability(23456789qwertyupasdfghjklzxcvbnm",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":170,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"modules/PrismaModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["real",{"_index":1025,"title":{},"body":{"miscellaneous/functions.html":{}}}],["redistribution",{"_index":1064,"title":{},"body":{"license.html":{}}}],["redistributions",{"_index":1074,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":127,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["refresh",{"_index":208,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["refreshauthorizationtoken",{"_index":228,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{}}}],["refreshauthorizationtoken(@context",{"_index":285,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["refreshauthorizationtoken(authorizationtoken",{"_index":319,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["refreshauthorizationtoken(context",{"_index":243,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["refreshexpiredat",{"_index":201,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"injectables/AuthorizationTokenService.html":{}}}],["refreshexpiredin",{"_index":340,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{}}}],["refreshexpiredin.unit",{"_index":345,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["refreshexpiredin.value",{"_index":344,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["region",{"_index":574,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{}}}],["register",{"_index":618,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["registered",{"_index":758,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/ViewerEntity.html":{}}}],["registerenumtype",{"_index":600,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["registerenumtype(allowuploadfiletype",{"_index":620,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["rejectonnotfound",{"_index":274,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"injectables/SecuritySmsService.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["replace('#code",{"_index":530,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["replace('#expired",{"_index":531,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["reproduce",{"_index":1080,"title":{},"body":{"license.html":{}}}],["req",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":163,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/ExecutionContext.html":{},"injectables/TencentCloudSmsService.html":{}}}],["request.context",{"_index":415,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["request.context.authorizationtoken?.token",{"_index":416,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["request.header",{"_index":421,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["request.header(key",{"_index":422,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["request.headers",{"_index":424,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["reserved",{"_index":1063,"title":{},"body":{"license.html":{}}}],["reset",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{}}}],["resolve",{"_index":248,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"injectables/UserProfileService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{}}}],["resolvecontext",{"_index":124,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["resolvecontext(context",{"_index":156,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["resolvefield",{"_index":601,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"classes/ViewerResolver.html":{}}}],["resolvefield(undefined",{"_index":590,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"classes/ViewerResolver.html":{}}}],["resolveprofile",{"_index":839,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["resolveprofile(user",{"_index":841,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["resolver",{"_index":158,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["resolvers",{"_index":683,"title":{},"body":{"modules/TencentCloudModule.html":{}}}],["resolvetype",{"_index":972,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["resolvetype(value",{"_index":1024,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resource",{"_index":624,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{}}}],["result",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":1075,"title":{},"body":{"license.html":{}}}],["return",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":141,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":1062,"title":{},"body":{"license.html":{}}}],["root",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["runner",{"_index":237,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosResolver.html":{}}}],["rxjs",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["schema",{"_index":619,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["scofony",{"_index":911,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["sdk",{"_index":700,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"dependencies.html":{}}}],["seconds",{"_index":642,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["seconds').todate",{"_index":524,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["secrect",{"_index":724,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["secuity",{"_index":872,"title":{},"body":{"injectables/UserService.html":{}}}],["secure",{"_index":1159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["security",{"_index":270,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/UpdateViewerArgs.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["security.expiredat.gettime",{"_index":544,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["security.id",{"_index":547,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["security.usedat",{"_index":543,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["security/security.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["security_compare_failed",{"_index":324,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["securitymodule",{"_index":14,"title":{"modules/SecurityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SecurityModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["securitysmscode",{"_index":509,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["securitysmsresolver",{"_index":463,"title":{"classes/SecuritySmsResolver.html":{}},"body":{"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"coverage.html":{}}}],["securitysmsservice",{"_index":460,"title":{"injectables/SecuritySmsService.html":{}},"body":{"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["secyrity",{"_index":473,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["send",{"_index":483,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"injectables/TencentCloudSmsService.html":{}}}],["send(params",{"_index":692,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["send(phone",{"_index":506,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["senderid",{"_index":712,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["sendsmsrequest",{"_index":702,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["sent",{"_index":499,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["server",{"_index":743,"title":{},"body":{"injectables/TencentCloudStsService.html":{},"dependencies.html":{}}}],["service",{"_index":136,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["services",{"_index":1117,"title":{},"body":{"license.html":{}}}],["set",{"_index":451,"title":{},"body":{"modules/PrismaModule.html":{},"classes/UpdateViewerArgs.html":{},"miscellaneous/variables.html":{}}}],["setmetadata",{"_index":89,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["setmetadata(auth_metadata_has_authorization",{"_index":105,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["setting",{"_index":333,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["setting.expiredin.unit",{"_index":357,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["setting.refreshexpiredin.unit",{"_index":360,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["shall",{"_index":1105,"title":{},"body":{"license.html":{}}}],["sign",{"_index":708,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["size",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sms",{"_index":468,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/UserService.html":{}}}],["sms.resolver",{"_index":464,"title":{},"body":{"modules/SecurityModule.html":{}}}],["sms.resolver.ts",{"_index":467,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"coverage.html":{}}}],["sms.resolver.ts:13",{"_index":472,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["sms.resolver.ts:27",{"_index":476,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["sms.resolver.ts:47",{"_index":479,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["sms.service",{"_index":465,"title":{},"body":{"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/UserService.html":{}}}],["sms.service.ts",{"_index":489,"title":{},"body":{"injectables/SecuritySmsService.html":{},"coverage.html":{}}}],["sms.service.ts:11",{"_index":495,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["sms.service.ts:113",{"_index":510,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["sms.service.ts:26",{"_index":501,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["sms.service.ts:49",{"_index":507,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["sms.service.ts:85",{"_index":497,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["sms.tencentcloudapi.com",{"_index":716,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["sms_code",{"_index":1007,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["smssdkappid",{"_index":706,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["soc.service",{"_index":603,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["socfony",{"_index":155,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["socfonyconfig",{"_index":549,"title":{"interfaces/SocfonyConfig.html":{}},"body":{"interfaces/SocfonyConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["social",{"_index":1034,"title":{},"body":{"index.html":{}}}],["software",{"_index":1031,"title":{},"body":{"index.html":{},"license.html":{}}}],["solve",{"_index":1043,"title":{},"body":{"index.html":{}}}],["source",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"modules/PrismaModule.html":{},"modules/SecurityModule.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"index.html":{},"license.html":{}}}],["special",{"_index":1110,"title":{},"body":{"license.html":{}}}],["specific",{"_index":1091,"title":{},"body":{"license.html":{}}}],["split",{"_index":527,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["src/.../app.config.ts",{"_index":1012,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../authorization.decorator.ts",{"_index":1009,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../context.decorator.ts",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cos.resolver.ts",{"_index":1003,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../enums.ts",{"_index":1004,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../id.helper.ts",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":1013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../logger.middleware.ts",{"_index":1014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1010,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../password.helper.ts",{"_index":1011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prisma.module.ts",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.union.ts",{"_index":1015,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../viewer.resolver.ts",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.config.ts",{"_index":550,"title":{},"body":{"interfaces/SocfonyConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authorization",{"_index":196,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/SecuritySmsResolver.html":{},"classes/UpdateViewerArgs.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/authorization.decorator",{"_index":251,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudCosResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{}}}],["src/authorization.decorator.ts",{"_index":77,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/authorization.guard.ts",{"_index":116,"title":{},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{}}}],["src/authorization.guard.ts:101",{"_index":139,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/authorization.guard.ts:19",{"_index":130,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/authorization.guard.ts:36",{"_index":157,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/authorization.guard.ts:48",{"_index":148,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/authorization.guard.ts:59",{"_index":151,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/authorization.guard.ts:71",{"_index":144,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/authorization.guard.ts:88",{"_index":153,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/constants",{"_index":254,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/SecuritySmsResolver.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["src/constants.ts",{"_index":958,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/context.decorator",{"_index":255,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{},"classes/ViewerResolver.html":{}}}],["src/context.decorator.ts",{"_index":959,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/execution",{"_index":256,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerResolver.html":{},"coverage.html":{}}}],["src/helper",{"_index":258,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["src/helper/id.helper.ts",{"_index":960,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helper/password.helper.ts",{"_index":965,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":966,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/prisma",{"_index":292,"title":{},"body":{"modules/AuthorizationTokenModule.html":{},"modules/SecurityModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{}}}],["src/prisma/middleware/logger.middleware.ts",{"_index":967,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module.ts",{"_index":432,"title":{},"body":{"modules/PrismaModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/security/security",{"_index":466,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/security/security.module",{"_index":795,"title":{},"body":{"modules/UserModule.html":{}}}],["src/security/security.module.ts",{"_index":461,"title":{},"body":{"modules/SecurityModule.html":{}}}],["src/tencent",{"_index":462,"title":{},"body":{"modules/SecurityModule.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/user/dto",{"_index":394,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{}}}],["src/user/dto/update",{"_index":747,"title":{},"body":{"classes/UpdateViewerArgs.html":{},"coverage.html":{}}}],["src/user/dto/user",{"_index":884,"title":{},"body":{"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts",{"_index":756,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/user/entities/user.interface.ts",{"_index":766,"title":{},"body":{"classes/UserInterface.html":{},"coverage.html":{}}}],["src/user/entities/user.interface.ts:27",{"_index":769,"title":{},"body":{"classes/UserInterface.html":{}}}],["src/user/entities/user.interface.ts:36",{"_index":770,"title":{},"body":{"classes/UserInterface.html":{}}}],["src/user/entities/user.interface.ts:44",{"_index":768,"title":{},"body":{"classes/UserInterface.html":{}}}],["src/user/entities/user.interface.ts:52",{"_index":771,"title":{},"body":{"classes/UserInterface.html":{}}}],["src/user/entities/user.union.ts",{"_index":971,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/user/entities/viewer.entity",{"_index":222,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{}}}],["src/user/entities/viewer.entity.ts",{"_index":892,"title":{},"body":{"classes/ViewerEntity.html":{},"coverage.html":{}}}],["src/user/entities/viewer.entity.ts:22",{"_index":897,"title":{},"body":{"classes/ViewerEntity.html":{}}}],["src/user/entities/viewer.entity.ts:31",{"_index":899,"title":{},"body":{"classes/ViewerEntity.html":{}}}],["src/user/enums",{"_index":260,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{}}}],["src/user/enums.ts",{"_index":1006,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/profile/dto/profile",{"_index":846,"title":{},"body":{"classes/UserProfileUpdateInput.html":{},"coverage.html":{}}}],["src/user/profile/entities/profile.entity.ts",{"_index":801,"title":{},"body":{"classes/UserProfileEntity.html":{},"coverage.html":{}}}],["src/user/profile/entities/profile.entity.ts:16",{"_index":814,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["src/user/profile/entities/profile.entity.ts:25",{"_index":810,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["src/user/profile/entities/profile.entity.ts:34",{"_index":807,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["src/user/profile/entities/profile.entity.ts:43",{"_index":808,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["src/user/profile/entities/profile.entity.ts:52",{"_index":809,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["src/user/profile/entities/profile.entity.ts:61",{"_index":812,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["src/user/profile/profile.module.ts",{"_index":819,"title":{},"body":{"modules/UserProfileModule.html":{}}}],["src/user/profile/profile.resolver.ts",{"_index":823,"title":{},"body":{"classes/UserProfileResolver.html":{},"coverage.html":{}}}],["src/user/profile/profile.resolver.ts:13",{"_index":827,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["src/user/profile/profile.resolver.ts:33",{"_index":832,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["src/user/profile/profile.service.ts",{"_index":838,"title":{},"body":{"injectables/UserProfileService.html":{},"coverage.html":{}}}],["src/user/profile/profile.service.ts:19",{"_index":843,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["src/user/profile/profile.service.ts:8",{"_index":840,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["src/user/user",{"_index":778,"title":{},"body":{"classes/UserInterfaceResolver.html":{},"coverage.html":{}}}],["src/user/user.module",{"_index":293,"title":{},"body":{"modules/AuthorizationTokenModule.html":{}}}],["src/user/user.module.ts",{"_index":794,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.resolver.ts",{"_index":853,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["src/user/user.resolver.ts:12",{"_index":855,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.resolver.ts:26",{"_index":857,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.service",{"_index":325,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["src/user/user.service.ts",{"_index":863,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:11",{"_index":866,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:23",{"_index":868,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":871,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/viewer.resolver.ts",{"_index":900,"title":{},"body":{"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/viewer.resolver.ts:38",{"_index":903,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["src/user/viewer.resolver.ts:54",{"_index":907,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["src/user/viewer.resolver.ts:68",{"_index":905,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["src/user/viewer.resolver.ts:85",{"_index":915,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["src/user/viewer.resolver.ts:98",{"_index":910,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["stack",{"_index":1029,"title":{},"body":{"index.html":{}}}],["started",{"_index":1028,"title":{"index.html":{},"license.html":{}},"body":{}}],["statement",{"_index":660,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["statements",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":397,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["status",{"_index":1048,"title":{},"body":{"index.html":{}}}],["storage",{"_index":806,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["strict",{"_index":1126,"title":{},"body":{"license.html":{}}}],["string",{"_index":210,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["sts",{"_index":576,"title":{},"body":{"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{}}}],["sts.tencentcloudapi.com",{"_index":745,"title":{},"body":{"injectables/TencentCloudStsService.html":{}}}],["stsclient",{"_index":647,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["stsclient.getfederationtoken",{"_index":652,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["substitute",{"_index":1115,"title":{},"body":{"license.html":{}}}],["such",{"_index":1135,"title":{},"body":{"license.html":{}}}],["super",{"_index":442,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["support",{"_index":1138,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1139,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":877,"title":{},"body":{"injectables/UserService.html":{}}}],["system",{"_index":337,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["table",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["teams",{"_index":1041,"title":{},"body":{"index.html":{}}}],["templateid",{"_index":504,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["templateparamset",{"_index":538,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["temporary",{"_index":635,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["temporarycredentialdurationseconds",{"_index":630,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["tencent",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/SecuritySmsService.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"miscellaneous/functions.html":{}}}],["tencentcloud",{"_index":699,"title":{},"body":{"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"dependencies.html":{}}}],["tencentcloudcoscredentials",{"_index":569,"title":{"classes/TencentCloudCosCredentials.html":{}},"body":{"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"coverage.html":{}}}],["tencentcloudcosresolver",{"_index":580,"title":{"classes/TencentCloudCosResolver.html":{}},"body":{"classes/TencentCloudCosResolver.html":{},"modules/TencentCloudModule.html":{},"coverage.html":{}}}],["tencentcloudcosservice",{"_index":586,"title":{"injectables/TencentCloudCosService.html":{}},"body":{"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"coverage.html":{},"overview.html":{}}}],["tencentcloudmodule",{"_index":15,"title":{"modules/TencentCloudModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules.html":{},"overview.html":{}}}],["tencentcloudsmsservice",{"_index":494,"title":{"injectables/TencentCloudSmsService.html":{}},"body":{"injectables/SecuritySmsService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudSmsService.html":{},"coverage.html":{},"overview.html":{}}}],["tencentcloudstscredentials",{"_index":720,"title":{"classes/TencentCloudStsCredentials.html":{}},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"coverage.html":{}}}],["tencentcloudstsfederationtoken",{"_index":575,"title":{"classes/TencentCloudStsFederationToken.html":{}},"body":{"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"coverage.html":{}}}],["tencentcloudstsservice",{"_index":632,"title":{"injectables/TencentCloudStsService.html":{}},"body":{"injectables/TencentCloudCosService.html":{},"modules/TencentCloudModule.html":{},"injectables/TencentCloudStsService.html":{},"coverage.html":{},"overview.html":{}}}],["text",{"_index":1018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["theory",{"_index":1123,"title":{},"body":{"license.html":{}}}],["this.$connect",{"_index":450,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["this.$disconnect",{"_index":455,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["this.$use(prismaloggermiddleware(this.logger",{"_index":452,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["this.authorizationtokenservice.createtokenwithsecurity",{"_index":282,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["this.authorizationtokenservice.hastokenexpired",{"_index":180,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.authorizationtokenservice.refreshauthorizationtoken",{"_index":286,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["this.baseoptions",{"_index":718,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["this.canactivelytokenhandler(context",{"_index":190,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.comparepassword(user",{"_index":880,"title":{},"body":{"injectables/UserService.html":{}}}],["this.cosservice.createtemporaryreadcredential",{"_index":623,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["this.cosservice.createtemporarywritecredential(idhelper.id(64",{"_index":625,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["this.cosservice.options",{"_index":622,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["this.createclient(region",{"_index":717,"title":{},"body":{"injectables/TencentCloudSmsService.html":{}}}],["this.createsecurity(phone",{"_index":488,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["this.createuserauthorizationtoken(authorizationtoken.userid",{"_index":379,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.createuserauthorizationtoken(user",{"_index":368,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.getauthorizationtoken",{"_index":417,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["this.gethasauthorization(context",{"_index":188,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.gethasauthorizationtype(context",{"_index":189,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.gethttpauthorization(request",{"_index":414,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["this.getoptions(haschina",{"_index":521,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["this.gettokenexpiredin",{"_index":350,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.initializecontext(context",{"_index":185,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.options",{"_index":646,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["this.prisma.$transaction",{"_index":351,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.prisma.authorizationtoken.create",{"_index":352,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.prisma.authorizationtoken.deletemany",{"_index":361,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.prisma.authorizationtoken.update",{"_index":376,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.prisma.securitysmscode.create",{"_index":534,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["this.prisma.securitysmscode.findfirst",{"_index":539,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["this.prisma.securitysmscode.update",{"_index":546,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["this.prisma.setting.findunique",{"_index":334,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["this.prisma.user.create",{"_index":277,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["this.prisma.user.findunique",{"_index":266,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["this.prisma.userprofile.create",{"_index":845,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["this.prisma.userprofile.findunique",{"_index":844,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["this.prismaclient",{"_index":183,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.prismaclient.user.findunique",{"_index":862,"title":{},"body":{"classes/UserResolver.html":{},"classes/ViewerResolver.html":{}}}],["this.prismaclient.user.update",{"_index":943,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["this.prismaclient.userprofile.update",{"_index":836,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["this.profileservice.resolveprofile(context.user",{"_index":835,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["this.reflector.get",{"_index":175,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.resolvecontext(context",{"_index":179,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.securitysmsservice.comparecode",{"_index":881,"title":{},"body":{"injectables/UserService.html":{}}}],["this.securitysmsservice.send(phone",{"_index":484,"title":{},"body":{"classes/SecuritySmsResolver.html":{}}}],["this.securitysmsservice.updatecodetoused(value",{"_index":883,"title":{},"body":{"injectables/UserService.html":{}}}],["this.sts.createclient(region",{"_index":648,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["this.temporarycredentialdurationseconds",{"_index":655,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["this.tencentcloudsmsservice.send",{"_index":535,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["this.userprofileservice.resolveprofile(user",{"_index":788,"title":{},"body":{"classes/UserInterfaceResolver.html":{}}}],["this.userservice.comparesecurity",{"_index":366,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"classes/ViewerResolver.html":{}}}],["throw",{"_index":191,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/SecuritySmsResolver.html":{},"classes/ViewerResolver.html":{}}}],["time",{"_index":734,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["tmpsecretid",{"_index":722,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["tmpsecretkey",{"_index":723,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["todate",{"_index":358,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token",{"_index":86,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["token.args",{"_index":262,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/UpdateViewerArgs.html":{}}}],["token.args.ts",{"_index":385,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{},"coverage.html":{}}}],["token.args.ts:16",{"_index":392,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{}}}],["token.args.ts:24",{"_index":387,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{}}}],["token.args.ts:32",{"_index":386,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{}}}],["token.entity",{"_index":264,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token.entity.ts",{"_index":198,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"coverage.html":{}}}],["token.entity.ts:23",{"_index":218,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["token.entity.ts:31",{"_index":215,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["token.entity.ts:39",{"_index":212,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["token.entity.ts:47",{"_index":207,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["token.entity.ts:55",{"_index":209,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{}}}],["token.expiredat",{"_index":347,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.length",{"_index":426,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["token.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["token.module.ts",{"_index":291,"title":{},"body":{"modules/AuthorizationTokenModule.html":{}}}],["token.pop",{"_index":429,"title":{},"body":{"classes/ExecutionContext.html":{}}}],["token.refreshexpiredat",{"_index":348,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.resolver",{"_index":294,"title":{},"body":{"modules/AuthorizationTokenModule.html":{}}}],["token.resolver.ts",{"_index":226,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"coverage.html":{}}}],["token.resolver.ts:127",{"_index":245,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token.resolver.ts:29",{"_index":230,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token.resolver.ts:45",{"_index":247,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token.resolver.ts:72",{"_index":236,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token.resolver.ts:83",{"_index":241,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token.service",{"_index":165,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{}}}],["token.service.ts",{"_index":296,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"coverage.html":{}}}],["token.service.ts:121",{"_index":306,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.service.ts:145",{"_index":320,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.service.ts:25",{"_index":303,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.service.ts:39",{"_index":314,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.service.ts:69",{"_index":318,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.service.ts:86",{"_index":312,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["token.userid",{"_index":267,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["token/authorization",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"modules/AuthorizationTokenModule.html":{},"injectables/AuthorizationTokenService.html":{},"coverage.html":{}}}],["token/constants",{"_index":93,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{}}}],["token/constants.ts",{"_index":954,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["token/dto/create",{"_index":384,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{},"classes/UpdateViewerArgs.html":{},"coverage.html":{}}}],["token/entities/authorization",{"_index":197,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"coverage.html":{}}}],["token/enums",{"_index":94,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/SecuritySmsResolver.html":{}}}],["token/enums.ts",{"_index":1005,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["token/types.ts",{"_index":380,"title":{},"body":{"interfaces/AuthorizationTokenValidityPeriod.html":{},"coverage.html":{}}}],["tort",{"_index":1127,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserProfileEntity.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":84,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/SecuritySmsResolver.html":{},"injectables/SecuritySmsService.html":{},"interfaces/SocfonyConfig.html":{},"classes/TencentCloudCosCredentials.html":{},"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"injectables/TencentCloudSmsService.html":{},"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{},"injectables/TencentCloudStsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":353,"title":{},"body":{"injectables/AuthorizationTokenService.html":{}}}],["types",{"_index":332,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"miscellaneous/variables.html":{}}}],["uid",{"_index":650,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["unauthorized",{"_index":166,"title":{},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":235,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/SecuritySmsResolver.html":{}}}],["union",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":390,"title":{},"body":{"classes/CreateAuthorizationTokenArgs.html":{},"classes/UserResolver.html":{},"classes/ViewerResolver.html":{},"miscellaneous/variables.html":{}}}],["unique.input.ts",{"_index":888,"title":{},"body":{"classes/UserWhereUniqueInput.html":{},"coverage.html":{}}}],["unit",{"_index":342,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"miscellaneous/variables.html":{}}}],["unittype",{"_index":382,"title":{},"body":{"interfaces/AuthorizationTokenValidityPeriod.html":{}}}],["unix",{"_index":733,"title":{},"body":{"classes/TencentCloudStsCredentials.html":{},"classes/TencentCloudStsFederationToken.html":{}}}],["unknown",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":373,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"injectables/SecuritySmsService.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserUpdateInput.html":{},"classes/ViewerResolver.html":{}}}],["update.input",{"_index":754,"title":{},"body":{"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{}}}],["update.input.ts",{"_index":847,"title":{},"body":{"classes/UserProfileUpdateInput.html":{},"classes/UserUpdateInput.html":{},"coverage.html":{}}}],["update.input.ts:25",{"_index":885,"title":{},"body":{"classes/UserUpdateInput.html":{}}}],["updatecodetoused",{"_index":492,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["updatecodetoused(security",{"_index":508,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["updated",{"_index":811,"title":{},"body":{"classes/UserProfileEntity.html":{}}}],["updatedat",{"_index":805,"title":{},"body":{"classes/UserProfileEntity.html":{},"classes/UserProfileUpdateInput.html":{}}}],["updateviewer",{"_index":901,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["updateviewer(context",{"_index":908,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["updateviewerargs",{"_index":746,"title":{"classes/UpdateViewerArgs.html":{}},"body":{"classes/UpdateViewerArgs.html":{},"classes/ViewerResolver.html":{},"coverage.html":{}}}],["updateviewerprofile",{"_index":825,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["updateviewerprofile(context",{"_index":829,"title":{},"body":{"classes/UserProfileResolver.html":{}}}],["upload",{"_index":605,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":444,"title":{},"body":{"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["use",{"_index":1065,"title":{},"body":{"license.html":{}}}],["useclass",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":511,"title":{},"body":{"injectables/SecuritySmsService.html":{},"classes/ViewerResolver.html":{},"license.html":{}}}],["usedat",{"_index":548,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["usefactory(prisma",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":90,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["useguards(authorizationguard",{"_index":109,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{}}}],["user",{"_index":178,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"classes/UserProfileEntity.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["user(token",{"_index":246,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["user(where",{"_index":856,"title":{},"body":{"classes/UserResolver.html":{}}}],["user.'})@authorizationwith",{"_index":914,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["user.id",{"_index":354,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"injectables/UserProfileService.html":{},"classes/ViewerResolver.html":{}}}],["user.interface",{"_index":765,"title":{},"body":{"classes/UserEntity.html":{},"classes/ViewerEntity.html":{}}}],["user.password",{"_index":876,"title":{},"body":{"injectables/UserService.html":{}}}],["user.phone",{"_index":882,"title":{},"body":{"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["user.service",{"_index":798,"title":{},"body":{"modules/UserModule.html":{},"classes/ViewerResolver.html":{}}}],["user/user.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["user?.password",{"_index":874,"title":{},"body":{"injectables/UserService.html":{}}}],["user_email_field_existed",{"_index":916,"title":{},"body":{"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_login_field_existed",{"_index":917,"title":{},"body":{"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_not_found",{"_index":253,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_not_set_phone",{"_index":481,"title":{},"body":{"classes/SecuritySmsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_phone_field_existed",{"_index":918,"title":{},"body":{"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity",{"_index":755,"title":{"classes/UserEntity.html":{}},"body":{"classes/UserEntity.html":{},"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":202,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"injectables/AuthorizationTokenService.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"classes/UserProfileUpdateInput.html":{}}}],["userinterface",{"_index":757,"title":{"classes/UserInterface.html":{}},"body":{"classes/UserEntity.html":{},"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/ViewerEntity.html":{},"coverage.html":{}}}],["userinterface:27",{"_index":761,"title":{},"body":{"classes/UserEntity.html":{},"classes/ViewerEntity.html":{}}}],["userinterface:36",{"_index":762,"title":{},"body":{"classes/UserEntity.html":{},"classes/ViewerEntity.html":{}}}],["userinterface:44",{"_index":760,"title":{},"body":{"classes/UserEntity.html":{},"classes/ViewerEntity.html":{}}}],["userinterface:52",{"_index":764,"title":{},"body":{"classes/UserEntity.html":{},"classes/ViewerEntity.html":{}}}],["userinterfaceresolver",{"_index":777,"title":{"classes/UserInterfaceResolver.html":{}},"body":{"classes/UserInterfaceResolver.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":16,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userprofile",{"_index":763,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserInterface.html":{},"injectables/UserProfileService.html":{},"classes/ViewerEntity.html":{}}}],["userprofileentity",{"_index":773,"title":{"classes/UserProfileEntity.html":{}},"body":{"classes/UserInterface.html":{},"classes/UserInterfaceResolver.html":{},"classes/UserProfileEntity.html":{},"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"coverage.html":{}}}],["userprofilemodule",{"_index":793,"title":{"modules/UserProfileModule.html":{}},"body":{"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["userprofileresolver",{"_index":820,"title":{"classes/UserProfileResolver.html":{}},"body":{"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"coverage.html":{}}}],["userprofileservice",{"_index":781,"title":{"injectables/UserProfileService.html":{}},"body":{"classes/UserInterfaceResolver.html":{},"modules/UserProfileModule.html":{},"classes/UserProfileResolver.html":{},"injectables/UserProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["userprofileupdateinput",{"_index":830,"title":{"classes/UserProfileUpdateInput.html":{}},"body":{"classes/UserProfileResolver.html":{},"classes/UserProfileUpdateInput.html":{},"coverage.html":{}}}],["userresolver",{"_index":852,"title":{"classes/UserResolver.html":{}},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["users",{"_index":937,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["usersecuritycomparetype",{"_index":259,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/AuthorizationTokenService.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"miscellaneous/enumerations.html":{}}}],["usersecuritycomparetype.password",{"_index":879,"title":{},"body":{"injectables/UserService.html":{}}}],["usersecuritycomparetype.sms_code",{"_index":275,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{}}}],["userservice",{"_index":302,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthorizationTokenService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"overview.html":{}}}],["userunion",{"_index":860,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["userupdateinput",{"_index":750,"title":{"classes/UserUpdateInput.html":{}},"body":{"classes/UpdateViewerArgs.html":{},"classes/UserUpdateInput.html":{},"coverage.html":{}}}],["userwhereuniqueinput",{"_index":388,"title":{"classes/UserWhereUniqueInput.html":{}},"body":{"classes/CreateAuthorizationTokenArgs.html":{},"classes/UserResolver.html":{},"classes/UserWhereUniqueInput.html":{},"coverage.html":{}}}],["validate",{"_index":96,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"guards/AuthorizationGuard.html":{},"injectables/AuthorizationTokenService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["validator",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["validity",{"_index":315,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":338,"title":{},"body":{"injectables/AuthorizationTokenService.html":{},"interfaces/AuthorizationTokenValidityPeriod.html":{},"classes/CreateAuthorizationTokenArgs.html":{},"classes/ExecutionContext.html":{},"injectables/TencentCloudSmsService.html":{},"injectables/TencentCloudStsService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1146,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veriables",{"_index":505,"title":{},"body":{"injectables/SecuritySmsService.html":{}}}],["verification",{"_index":941,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["verified",{"_index":187,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["version",{"_index":658,"title":{},"body":{"injectables/TencentCloudCosService.html":{}}}],["video",{"_index":612,"title":{},"body":{"classes/TencentCloudCosResolver.html":{}}}],["viewer",{"_index":214,"title":{},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/SecuritySmsResolver.html":{},"classes/UpdateViewerArgs.html":{},"classes/UserProfileResolver.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{}}}],["viewer'})@authorizationwith",{"_index":909,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["viewer(@context",{"_index":928,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["viewer(context",{"_index":913,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["viewer.args",{"_index":920,"title":{},"body":{"classes/ViewerResolver.html":{}}}],["viewer.args.ts",{"_index":748,"title":{},"body":{"classes/UpdateViewerArgs.html":{},"coverage.html":{}}}],["viewer.args.ts:20",{"_index":751,"title":{},"body":{"classes/UpdateViewerArgs.html":{}}}],["viewer.args.ts:29",{"_index":752,"title":{},"body":{"classes/UpdateViewerArgs.html":{}}}],["viewer.resolver",{"_index":800,"title":{},"body":{"modules/UserModule.html":{}}}],["viewerentity",{"_index":221,"title":{"classes/ViewerEntity.html":{}},"body":{"classes/AuthorizationTokenEntity.html":{},"classes/AuthorizationTokenEntityResolver.html":{},"classes/UserUpdateInput.html":{},"classes/UserWhereUniqueInput.html":{},"classes/ViewerEntity.html":{},"classes/ViewerResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["viewerresolver",{"_index":799,"title":{"classes/ViewerResolver.html":{}},"body":{"modules/UserModule.html":{},"classes/ViewerResolver.html":{},"coverage.html":{}}}],["warranties",{"_index":1096,"title":{},"body":{"license.html":{}}}],["wav",{"_index":617,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"miscellaneous/enumerations.html":{}}}],["way",{"_index":1131,"title":{},"body":{"license.html":{}}}],["where.phone",{"_index":276,"title":{},"body":{"classes/AuthorizationTokenEntityResolver.html":{}}}],["whether",{"_index":936,"title":{},"body":{"classes/ViewerResolver.html":{},"license.html":{}}}],["without",{"_index":111,"title":{},"body":{"interfaces/AuthDecoratorOptions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["write",{"_index":597,"title":{},"body":{"classes/TencentCloudCosResolver.html":{},"injectables/TencentCloudCosService.html":{},"index.html":{}}}],["written",{"_index":1051,"title":{},"body":{"index.html":{},"license.html":{}}}],["yes",{"_index":402,"title":{},"body":{"classes/ExecutionContext.html":{},"miscellaneous/functions.html":{}}}],["z",{"_index":1156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthorizationTokenModule.html":{},"modules/SecurityModule.html":{},"modules/TencentCloudModule.html":{},"modules/UserModule.html":{},"modules/UserProfileModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthorizationTokenModule\n\nAuthorizationTokenModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthorizationTokenModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nSecurityModule\n\nSecurityModule\n\nAppModule -->\n\nSecurityModule->AppModule\n\n\n\n\n\nTencentCloudModule\n\nTencentCloudModule\n\nAppModule -->\n\nTencentCloudModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Root app module.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthorizationTokenModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            SecurityModule\n                        \n                        \n                            TencentCloudModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ExecutionContext } from './execution-context';\nimport { PrismaModule } from './prisma';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { SecurityModule } from './security/security.module';\nimport { getConfig } from './app.config';\nimport { AuthorizationTokenModule } from './authorization-token/authorization-token.module';\nimport { UserModule } from './user/user.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthorizationGuard } from './authorization.guard';\nimport { PrismaClient } from '@prisma/client';\nimport { TencentCloudModule } from './tencent-cloud';\n\n/**\n * Root app module.\n */\n@Global()\n@Module({\n  imports: [\n    GraphQLModule.forRootAsync({\n      imports: [PrismaModule],\n      inject: [PrismaClient],\n      useFactory(prisma: PrismaClient) {\n        const options = getConfig();\n        return {\n          autoSchemaFile: true,\n          debug: !options.isProduction,\n          playground: !options.isProduction,\n          path: options.endpoint,\n          context({ req }) {\n            return ExecutionContext.create(prisma, req);\n          },\n        };\n      },\n    }),\n    PrismaModule,\n    AuthorizationTokenModule,\n    UserModule,\n    SecurityModule,\n    TencentCloudModule,\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AuthorizationGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthDecoratorOptions.html":{"url":"interfaces/AuthDecoratorOptions.html","title":"interface - AuthDecoratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthDecoratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization.decorator.ts\n        \n\n            \n                Description\n            \n            \n                Auth Decorator Options.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        hasAuthorization\n                                \n                                \n                                            Optional\n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hasAuthorization\n                                    \n                                \n                                \n                                    \n                                        hasAuthorization:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Has authorization token\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         HasTokenExpiredType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HasTokenExpiredType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Has authorization token type.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { applyDecorators, SetMetadata, UseGuards } from '@nestjs/common';\nimport {\n  AUTH_METADATA_HAS_AUTHORIZATION,\n  AUTH_METADATA_HAS_AUTHORIZATION_TYPE,\n} from './authorization-token/constants';\nimport { HasTokenExpiredType } from './authorization-token/enums';\nimport { AuthorizationGuard } from './authorization.guard';\n\n/**\n * Auth Decorator Options.\n */\nexport interface AuthDecoratorOptions {\n  /**\n   * Has authorization token\n   */\n  hasAuthorization?: boolean;\n\n  /**\n   * Has authorization token type.\n   */\n  type?: HasTokenExpiredType;\n}\n\n/**\n * Need validate HTTP endpoint `Authorization` token decorator.\n * @param param validate HTTP endpoit `Authorization` token options.\n * @param param.hasAuthorization Has need validate\n * @param param.type validate token type.\n */\nexport function Authorization(options?: AuthDecoratorOptions) {\n  return applyDecorators(\n    SetMetadata(AUTH_METADATA_HAS_AUTHORIZATION, options?.hasAuthorization),\n    SetMetadata(\n      AUTH_METADATA_HAS_AUTHORIZATION_TYPE,\n      options?.type || HasTokenExpiredType.AUTH,\n    ),\n    UseGuards(AuthorizationGuard),\n  );\n}\n\n/**\n * Http auth validate token.\n */\nexport const AuthorizationWith = () =>\n  Authorization({\n    hasAuthorization: true,\n    type: HasTokenExpiredType.AUTH,\n  });\n\n/**\n * Http auth, without validate token.\n */\nexport const AuthorizationWithout = () =>\n  Authorization({\n    hasAuthorization: false,\n    type: HasTokenExpiredType.AUTH,\n  });\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthorizationGuard.html":{"url":"guards/AuthorizationGuard.html","title":"guard - AuthorizationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthorizationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/authorization.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Authorization guard.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                canActivelyTokenHandler\n                            \n                            \n                                getHasAuthorization\n                            \n                            \n                                getHasAuthorizationType\n                            \n                            \n                                    Async\n                                initializeContext\n                            \n                            \n                                resolveContext\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, authorizationTokenService: AuthorizationTokenService, prismaClient: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/authorization.guard.ts:19\n                            \n                        \n\n                \n                    \n                            Create Authorization guard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                NestJS core reflector.\n\n                                                        \n                                                \n                                                \n                                                        authorizationTokenService\n                                                  \n                                                        \n                                                                        AuthorizationTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authorization token service.\n\n                                                        \n                                                \n                                                \n                                                        prismaClient\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma Client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization.guard.ts:101\n                \n            \n\n\n            \n                \n                    Can activate guard.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        NestJS execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivelyTokenHandler\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivelyTokenHandler(context: ExecutionContext, type: HasTokenExpiredType)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization.guard.ts:71\n                \n            \n\n\n            \n                \n                    Can activel token handler.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        NestJS execution context\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                HasTokenExpiredType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Token validate type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHasAuthorization\n                        \n                        \n                    \n                \n            \n            \n                \ngetHasAuthorization(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization.guard.ts:48\n                \n            \n\n\n            \n                \n                    Get token has need validate.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        NextJS execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHasAuthorizationType\n                        \n                        \n                    \n                \n            \n            \n                \ngetHasAuthorizationType(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization.guard.ts:59\n                \n            \n\n\n            \n                \n                    Get token validate type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        NestJS execution context\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            initializeContext\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initializeContext(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization.guard.ts:88\n                \n            \n\n\n            \n                \n                    Initialzd Socfony execution context.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        NestJS execution context\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolveContext\n                        \n                        \n                    \n                \n            \n            \n                \nresolveContext(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization.guard.ts:36\n                \n            \n\n\n            \n                \n                    Resolver context.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        NestJS execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IContext\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { GqlContextType, GqlExecutionContext } from '@nestjs/graphql';\nimport { PrismaClient } from '@prisma/client';\nimport { Request } from 'express';\nimport { AuthorizationTokenService } from './authorization-token/authorization-token.service';\nimport {\n  AUTH_METADATA_HAS_AUTHORIZATION,\n  AUTH_METADATA_HAS_AUTHORIZATION_TYPE,\n} from './authorization-token/constants';\nimport { HasTokenExpiredType } from './authorization-token/enums';\nimport { UNAUTHORIZED } from './constants';\nimport { ExecutionContext as IContext } from './execution-context';\n\n/**\n * Authorization guard.\n */\n@Injectable()\nexport class AuthorizationGuard implements CanActivate {\n  /**\n   * Create Authorization guard.\n   * @param reflector NestJS core reflector.\n   * @param authorizationTokenService Authorization token service.\n   * @param prismaClient Prisma Client.\n   */\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly authorizationTokenService: AuthorizationTokenService,\n    private readonly prismaClient: PrismaClient,\n  ) {}\n\n  /**\n   * Resolver context.\n   * @param context NestJS execution context.\n   */\n  resolveContext(context: ExecutionContext): IContext {\n    if (context.getType() === 'graphql') {\n      return GqlExecutionContext.create(context).getContext();\n    }\n\n    return context.switchToHttp().getRequest().context;\n  }\n\n  /**\n   * Get token has need validate.\n   * @param context NextJS execution context.\n   */\n  getHasAuthorization(context: ExecutionContext) {\n    return this.reflector.get(\n      AUTH_METADATA_HAS_AUTHORIZATION,\n      context.getHandler(),\n    );\n  }\n\n  /**\n   * Get token validate type.\n   * @param context NestJS execution context\n   */\n  getHasAuthorizationType(context: ExecutionContext) {\n    return this.reflector.get(\n      AUTH_METADATA_HAS_AUTHORIZATION_TYPE,\n      context.getHandler(),\n    );\n  }\n\n  /**\n   * Can activel token handler.\n   * @param context NestJS execution context\n   * @param type Token validate type.\n   */\n  canActivelyTokenHandler(\n    context: ExecutionContext,\n    type: HasTokenExpiredType,\n  ): boolean {\n    const { authorizationToken, user } = this.resolveContext(context);\n    const has = !this.authorizationTokenService.hasTokenExpired(\n      authorizationToken,\n      type,\n    );\n\n    return user && has;\n  }\n\n  /**\n   * Initialzd Socfony execution context.\n   * @param context NestJS execution context\n   */\n  async initializeContext(context: ExecutionContext) {\n    if (context.getType() === 'http') {\n      return await IContext.create(\n        this.prismaClient,\n        context.switchToHttp().getRequest(),\n      );\n    }\n  }\n\n  /**\n   * Can activate guard.\n   * @param context NestJS execution context.\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    await this.initializeContext(context);\n\n    // If Don't validate or verified\n    if (!this.getHasAuthorization(context)) return true;\n\n    // get `Authorization` token validate type\n    const type = this.getHasAuthorizationType(context);\n\n    if (\n      !this.canActivelyTokenHandler(context, type || HasTokenExpiredType.AUTH)\n    ) {\n      throw new Error(UNAUTHORIZED);\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationTokenEntity.html":{"url":"classes/AuthorizationTokenEntity.html","title":"class - AuthorizationTokenEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationTokenEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization-token/entities/authorization-token.entity.ts\n        \n\n            \n                Description\n            \n            \n                HTTP endpoint authorization entity.\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiredAt\n                            \n                            \n                                refreshExpiredAt\n                            \n                            \n                                token\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expiredAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Token expired date'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/entities/authorization-token.entity.ts:47\n                            \n                        \n\n                \n                    \n                        Token expired date.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshExpiredAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Token on refresh expired date'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/entities/authorization-token.entity.ts:55\n                            \n                        \n\n                \n                    \n                        Token on refresh expired date.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User API endpoit authorization token.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/entities/authorization-token.entity.ts:39\n                            \n                        \n\n                \n                    \n                        User API endpoit authorization token.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Logged Viewer entity'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/entities/authorization-token.entity.ts:31\n                            \n                        \n\n                \n                    \n                        Logged User\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Login user ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/entities/authorization-token.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Logged user id.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\nimport { Prisma, User } from '@prisma/client';\nimport { ViewerEntity } from 'src/user/entities/viewer.entity';\n/**\n * HTTP endpoint authorization entity.\n */\n@ObjectType({\n  description: 'HTTP endpoint authorization entity.',\n})\nexport class AuthorizationTokenEntity\n  implements\n    Prisma.AuthorizationTokenGetPayload {\n  /**\n   * Logged user id.\n   */\n  @Field((type) => ID, {\n    description: 'Login user ID',\n  })\n  userId: string;\n\n  /**\n   * Logged User\n   */\n  @Field((type) => ViewerEntity, {\n    description: 'Logged Viewer entity',\n  })\n  user: User;\n\n  /**\n   * User API endpoit authorization token.\n   */\n  @Field((type) => String, {\n    description: 'User API endpoit authorization token.',\n  })\n  token: string;\n\n  /**\n   * Token expired date.\n   */\n  @Field((type) => Date, {\n    description: 'Token expired date',\n  })\n  expiredAt: Date;\n\n  /**\n   * Token on refresh expired date.\n   */\n  @Field((type) => Date, {\n    description: 'Token on refresh expired date',\n  })\n  refreshExpiredAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationTokenEntityResolver.html":{"url":"classes/AuthorizationTokenEntityResolver.html","title":"class - AuthorizationTokenEntityResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationTokenEntityResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization-token/authorization-token.resolver.ts\n        \n\n            \n                Description\n            \n            \n                AuthorizationTokenEntity resolver.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authorizationToken\n                            \n                            \n                                    Async\n                                createAuthorizationToken\n                            \n                            \n                                refreshAuthorizationToken\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authorizationTokenService: AuthorizationTokenService, prisma: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/authorization-token/authorization-token.resolver.ts:29\n                            \n                        \n\n                \n                    \n                            Create Authorization resolver.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authorizationTokenService\n                                                  \n                                                        \n                                                                        AuthorizationTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authorization token service.\n\n                                                        \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            authorizationToken\n                        \n                        \n                    \n                \n            \n            \n                \nauthorizationToken(context: ExecutionContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {description: 'Query HTTP endpoint AuthorizationTokenEntity'})@Authorization({hasAuthorization: true, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/authorization-token/authorization-token.resolver.ts:72\n                \n            \n\n\n            \n                \n                    Query HTTP endpoint AuthorizationTokenEntity\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        App runner execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAuthorizationToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAuthorizationToken(args: CreateAuthorizationTokenArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Create AuthorizationTokenEntity'})\n                \n            \n\n            \n                \n                    Defined in src/authorization-token/authorization-token.resolver.ts:83\n                \n            \n\n\n            \n                \n                    Create AuthorizationTokenEntity\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                CreateAuthorizationTokenArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Create AuthorizationTokenEntity args.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            refreshAuthorizationToken\n                        \n                        \n                    \n                \n            \n            \n                \nrefreshAuthorizationToken(context: ExecutionContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Refresh HTTP endpoint authorization token entity.'})@Authorization({hasAuthorization: true, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/authorization-token/authorization-token.resolver.ts:127\n                \n            \n\n\n            \n                \n                    Refresh HTTP endpoint authorization token entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            user\n                        \n                        \n                    \n                \n            \n            \n                \nuser(token: Prisma.AuthorizationTokenGetPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Field(undefined)\n                \n            \n\n            \n                \n                    Defined in src/authorization-token/authorization-token.resolver.ts:45\n                \n            \n\n\n            \n                \n                    Resolve AuthorizationTokenEntity user field.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                Prisma.AuthorizationTokenGetPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        HTTP endpoint AuthorizationToken\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Args,\n  Field,\n  Mutation,\n  Parent,\n  Query,\n  Resolver,\n} from '@nestjs/graphql';\nimport { Prisma, PrismaClient } from '@prisma/client';\nimport { Authorization } from 'src/authorization.decorator';\nimport {\n  AUTHORIZATION_TOKEN_CREATE_USER_WHERE_ALLOW_ONE,\n  USER_NOT_FOUND,\n} from 'src/constants';\nimport { Context } from 'src/context.decorator';\nimport { ExecutionContext } from 'src/execution-context';\nimport { IDHelper } from 'src/helper';\nimport { ViewerEntity } from 'src/user/entities/viewer.entity';\nimport { UserSecurityCompareType } from 'src/user/enums';\nimport { AuthorizationTokenService } from './authorization-token.service';\nimport { CreateAuthorizationTokenArgs } from './dto/create-authorization-token.args';\nimport { AuthorizationTokenEntity } from './entities/authorization-token.entity';\nimport { HasTokenExpiredType } from './enums';\n\n/**\n * AuthorizationTokenEntity resolver.\n */\n@Resolver(() => AuthorizationTokenEntity)\nexport class AuthorizationTokenEntityResolver {\n  /**\n   * Create Authorization resolver.\n   * @param authorizationTokenService Authorization token service.\n   * @param prisma Prisma client.\n   */\n  constructor(\n    private readonly authorizationTokenService: AuthorizationTokenService,\n    private readonly prisma: PrismaClient,\n  ) {}\n\n  /**\n   * Resolve AuthorizationTokenEntity user field.\n   * @param token HTTP endpoint AuthorizationToken\n   */\n  @Field(() => ViewerEntity)\n  user(\n    @Parent()\n    token: Prisma.AuthorizationTokenGetPayload,\n  ) {\n    const { user } = token;\n    if (user) {\n      return user;\n    }\n\n    return this.prisma.user.findUnique({\n      where: { id: token.userId },\n    });\n  }\n\n  /**\n   * Query HTTP endpoint AuthorizationTokenEntity\n   * @param context App runner execution context.\n   */\n  @Query(() => AuthorizationTokenEntity, {\n    description: 'Query HTTP endpoint AuthorizationTokenEntity',\n  })\n  @Authorization({\n    hasAuthorization: true,\n    type: HasTokenExpiredType.AUTH,\n  })\n  authorizationToken(@Context() context: ExecutionContext) {\n    return context.authorizationToken;\n  }\n\n  /**\n   * Create AuthorizationTokenEntity\n   * @param args Create `AuthorizationTokenEntity` args.\n   */\n  @Mutation(() => AuthorizationTokenEntity, {\n    description: 'Create AuthorizationTokenEntity',\n  })\n  async createAuthorizationToken(\n    @Args({\n      type: () => CreateAuthorizationTokenArgs,\n    })\n    args: CreateAuthorizationTokenArgs,\n  ) {\n    const { type, user: where, security } = args;\n    if (Object.keys(where).length > 1) {\n      throw new Error(AUTHORIZATION_TOKEN_CREATE_USER_WHERE_ALLOW_ONE);\n    }\n\n    let user = await this.prisma.user.findUnique({\n      where,\n      rejectOnNotFound: false,\n    });\n    if (type === UserSecurityCompareType.SMS_CODE && !user && where.phone) {\n      user = await this.prisma.user.create({\n        data: {\n          id: IDHelper.id(64),\n          phone: where.phone,\n        },\n      });\n    } else if (!user) {\n      throw new Error(USER_NOT_FOUND);\n    }\n\n    return this.authorizationTokenService.createTokenWithSecurity(\n      user,\n      type,\n      security,\n    );\n  }\n\n  /**\n   * Refresh HTTP endpoint authorization token entity.\n   * @param client token query Prisma client.\n   */\n  @Mutation((returns) => AuthorizationTokenEntity, {\n    description: 'Refresh HTTP endpoint authorization token entity.',\n  })\n  @Authorization({\n    hasAuthorization: true,\n    type: HasTokenExpiredType.REFRESH,\n  })\n  refreshAuthorizationToken(@Context() context: ExecutionContext) {\n    return this.authorizationTokenService.refreshAuthorizationToken(\n      context.authorizationToken,\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthorizationTokenModule.html":{"url":"modules/AuthorizationTokenModule.html","title":"module - AuthorizationTokenModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthorizationTokenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthorizationTokenModule\n\n\n\ncluster_AuthorizationTokenModule_imports\n\n\n\ncluster_AuthorizationTokenModule_exports\n\n\n\ncluster_AuthorizationTokenModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthorizationTokenModule\n\nAuthorizationTokenModule\n\nAuthorizationTokenModule -->\n\nPrismaModule->AuthorizationTokenModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthorizationTokenModule -->\n\nUserModule->AuthorizationTokenModule\n\n\n\n\n\nAuthorizationTokenService \n\nAuthorizationTokenService \n\nAuthorizationTokenService  -->\n\nAuthorizationTokenModule->AuthorizationTokenService \n\n\n\n\n\nAuthorizationTokenService\n\nAuthorizationTokenService\n\nAuthorizationTokenModule -->\n\nAuthorizationTokenService->AuthorizationTokenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authorization-token/authorization-token.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Authorization token module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizationTokenService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizationTokenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma';\nimport { UserModule } from 'src/user/user.module';\nimport { AuthorizationTokenEntityResolver } from './authorization-token.resolver';\nimport { AuthorizationTokenService } from './authorization-token.service';\n\n/**\n * Authorization token module.\n */\n@Global()\n@Module({\n  imports: [PrismaModule, UserModule],\n  providers: [AuthorizationTokenService, AuthorizationTokenEntityResolver],\n  exports: [AuthorizationTokenService],\n})\nexport class AuthorizationTokenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizationTokenService.html":{"url":"injectables/AuthorizationTokenService.html","title":"injectable - AuthorizationTokenService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizationTokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization-token/authorization-token.service.ts\n        \n\n            \n                Description\n            \n            \n                Authorization token service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTokenWithSecurity\n                            \n                            \n                                    Async\n                                createUserAuthorizationToken\n                            \n                            \n                                    Async\n                                getTokenExpiredIn\n                            \n                            \n                                hasTokenExpired\n                            \n                            \n                                    Async\n                                refreshAuthorizationToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaClient, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/authorization-token/authorization-token.service.ts:25\n                            \n                        \n\n                \n                    \n                            Create Authotization token service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTokenWithSecurity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTokenWithSecurity(user: User, type: UserSecurityCompareType, security: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization-token/authorization-token.service.ts:121\n                \n            \n\n\n            \n                \n                    Create token with security.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Creathe token with user.\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                UserSecurityCompareType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        creat compare security type.\n\n                                    \n                                \n                                \n                                    security\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        security object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUserAuthorizationToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserAuthorizationToken(user: User | string)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization-token/authorization-token.service.ts:86\n                \n            \n\n\n            \n                \n                    Create authorization token object for user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Create authoprization token object user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTokenExpiredIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokenExpiredIn()\n                \n            \n\n\n            \n                \n                    Defined in src/authorization-token/authorization-token.service.ts:39\n                \n            \n\n\n            \n                \n                    Get token expired in validity period.\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasTokenExpired\n                        \n                        \n                    \n                \n            \n            \n                \nhasTokenExpired(token: AuthorizationToken, type: HasTokenExpiredType)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization-token/authorization-token.service.ts:69\n                \n            \n\n\n            \n                \n                    Has authorization token expired.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                AuthorizationToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    type\n                                    \n                                                HasTokenExpiredType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Validate type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            refreshAuthorizationToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshAuthorizationToken(authorizationToken: AuthorizationToken)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization-token/authorization-token.service.ts:145\n                \n            \n\n\n            \n                \n                    Refresh authorization token object to database.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    authorizationToken\n                                    \n                                                AuthorizationToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Await refresh authorization token object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthorizationToken, PrismaClient, User } from '@prisma/client';\nimport * as dayjs from 'dayjs';\nimport {\n  AUTHORIZATION_TOKEN_NOT_FOUND,\n  SECURITY_COMPARE_FAILED,\n} from 'src/constants';\nimport { IDHelper } from 'src/helper';\nimport { UserService } from 'src/user/user.service';\nimport { UserSecurityCompareType } from 'src/user/enums';\nimport {\n  AUTH_TOKEN_DEFAULT_EXPIRED_IN,\n  AUTH_TOKEN_DEFAULT_EXPIRED_UNIT,\n  AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_IN,\n  AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_UNIT,\n  AUTH_TOKEN_VVALIDITY_PERIOD_KEY,\n} from './constants';\nimport { HasTokenExpiredType } from './enums';\nimport { AuthorizationTokenValidityPeriod } from './types';\n\n/**\n * Authorization token service.\n */\n@Injectable()\nexport class AuthorizationTokenService {\n  /**\n   * Create Authotization token service.\n   * @param prisma Prisma client.\n   * @param userService User service.\n   */\n  constructor(\n    private readonly prisma: PrismaClient,\n    private readonly userService: UserService,\n  ) {}\n\n  /**\n   * Get token expired in validity period.\n   */\n  async getTokenExpiredIn(): Promise {\n    const setting = await this.prisma.setting.findUnique({\n      where: {\n        namespace_name: {\n          namespace: 'system',\n          name: AUTH_TOKEN_VVALIDITY_PERIOD_KEY,\n        },\n      },\n      rejectOnNotFound: false,\n    });\n    const { value = {} } = setting || {};\n    const { expiredIn = {}, refreshExpiredIn = {} } = value as any;\n\n    return {\n      expiredIn: {\n        value: expiredIn.value || AUTH_TOKEN_DEFAULT_EXPIRED_IN,\n        unit: expiredIn.unit || AUTH_TOKEN_DEFAULT_EXPIRED_UNIT,\n      },\n      refreshExpiredIn: {\n        value: refreshExpiredIn.value || AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_IN,\n        unit: refreshExpiredIn.unit || AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_UNIT,\n      },\n    };\n  }\n\n  /**\n   * Has authorization token expired.\n   * @param client `AuthotizationToken` query Prisma client.\n   * @param type Validate type.\n   */\n  hasTokenExpired(\n    token: AuthorizationToken,\n    type: HasTokenExpiredType,\n  ): boolean {\n    if (!token) return true;\n    const expiredAt =\n      type === HasTokenExpiredType.AUTH\n        ? token.expiredAt\n        : token.refreshExpiredAt;\n\n    return !expiredAt || expiredAt.getTime()  {\n    const setting = await this.getTokenExpiredIn();\n    const [token] = await this.prisma.$transaction([\n      this.prisma.authorizationToken.create({\n        data: {\n          userId: typeof user === 'string' ? user : user.id,\n          token: IDHelper.id(128),\n          expiredAt: dayjs()\n            .add(setting.expiredIn.value, setting.expiredIn.unit)\n            .toDate(),\n          refreshExpiredAt: dayjs()\n            .add(setting.refreshExpiredIn.value, setting.refreshExpiredIn.unit)\n            .toDate(),\n        },\n      }),\n      this.prisma.authorizationToken.deleteMany({\n        where: {\n          refreshExpiredAt: {\n            lte: dayjs().add(10, 'minutes').toDate(),\n          },\n        },\n      }),\n    ]);\n\n    return token;\n  }\n\n  /**\n   * Create token with security.\n   * @param user Creathe token with user.\n   * @param type creat compare security type.\n   * @param security security object.\n   */\n  async createTokenWithSecurity(\n    user: User,\n    type: UserSecurityCompareType,\n    security: string,\n  ) {\n    const compared = await this.userService.compareSecurity(\n      user,\n      type,\n      security,\n    );\n    if (compared) {\n      if (compared instanceof Function) {\n        compared();\n      }\n      return this.createUserAuthorizationToken(user);\n    }\n\n    throw new Error(SECURITY_COMPARE_FAILED);\n  }\n\n  /**\n   * Refresh authorization token object to database.\n   * @param authorizationToken Await refresh authorization token object.\n   */\n  async refreshAuthorizationToken(\n    authorizationToken: AuthorizationToken,\n  ): Promise {\n    const setting = await this.getTokenExpiredIn();\n    // If authorization token not found, throw `not found` error.\n    if (!authorizationToken) {\n      throw new Error(AUTHORIZATION_TOKEN_NOT_FOUND);\n\n      // If token is expired, update to new token.\n    } else if (authorizationToken.expiredAt.getTime()  fiveMinutesDate.getTime()) {\n      await this.prisma.authorizationToken.update({\n        where: { token: authorizationToken.token },\n        data: {\n          expiredAt: fiveMinutesDate,\n          refreshExpiredAt: new Date(),\n        },\n      });\n    }\n\n    return this.createUserAuthorizationToken(authorizationToken.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthorizationTokenValidityPeriod.html":{"url":"interfaces/AuthorizationTokenValidityPeriod.html","title":"interface - AuthorizationTokenValidityPeriod","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthorizationTokenValidityPeriod\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization-token/types.ts\n        \n\n            \n                Description\n            \n            \n                认证Token有效期\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        expiredIn\n                                \n                                \n                                        refreshExpiredIn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expiredIn\n                                    \n                                \n                                \n                                    \n                                        expiredIn:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    token 生命有效期\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshExpiredIn\n                                    \n                                \n                                \n                                    \n                                        refreshExpiredIn:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token 用作刷新生命周期\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UnitType } from 'dayjs';\n\n/**\n * 认证Token有效期\n */\nexport interface AuthorizationTokenValidityPeriod {\n  /**\n   * token 生命有效期\n   */\n  expiredIn: {\n    value: number;\n    unit: UnitType;\n  };\n\n  /**\n   * Token 用作刷新生命周期\n   */\n  refreshExpiredIn: {\n    value: number;\n    unit: UnitType;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthorizationTokenArgs.html":{"url":"classes/CreateAuthorizationTokenArgs.html","title":"class - CreateAuthorizationTokenArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthorizationTokenArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization-token/dto/create-authorization-token.args.ts\n        \n\n            \n                Description\n            \n            \n                Create authorization token args\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                security\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            security\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Create AuthorizationToken security value'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/dto/create-authorization-token.args.ts:32\n                            \n                        \n\n                \n                    \n                        Create AuthorizationToken security value\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserSecurityCompareType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Create AuthorizationToken security type'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/dto/create-authorization-token.args.ts:24\n                            \n                        \n\n                \n                    \n                        Create AuthorizationToken security type\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserWhereUniqueInput\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User find where unique input'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authorization-token/dto/create-authorization-token.args.ts:16\n                            \n                        \n\n                \n                    \n                        User find where unique input\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field } from '@nestjs/graphql';\nimport { UserWhereUniqueInput } from 'src/user/dto';\nimport { UserSecurityCompareType } from 'src/user/enums';\n\n/**\n * Create authorization token args\n */\n@ArgsType()\nexport class CreateAuthorizationTokenArgs {\n  /**\n   * User find where unique input\n   */\n  @Field(() => UserWhereUniqueInput, {\n    description: 'User find where unique input',\n  })\n  user: UserWhereUniqueInput;\n\n  /**\n   * Create AuthorizationToken security type\n   */\n  @Field(() => UserSecurityCompareType, {\n    description: 'Create AuthorizationToken security type',\n  })\n  type: UserSecurityCompareType;\n\n  /**\n   * Create AuthorizationToken security value\n   */\n  @Field(() => String, {\n    description: 'Create AuthorizationToken security value',\n  })\n  security: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExecutionContext.html":{"url":"classes/ExecutionContext.html","title":"class - ExecutionContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExecutionContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/execution-context.ts\n        \n\n            \n                Description\n            \n            \n                Socfony execution context.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                authorizationToken\n                            \n                            \n                                    Public\n                                request\n                            \n                            \n                                    Public\n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                    Static\n                                getAuthorizationToken\n                            \n                            \n                                    Private\n                                    Static\n                                getHttpAuthorization\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor(request: Request, authorizationToken?: AuthorizationToken, user?: User)\n                    \n                \n                        \n                            \n                                Defined in src/execution-context.ts:7\n                            \n                        \n\n                \n                    \n                            Create a execution context.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Express request.\n\n                                                        \n                                                \n                                                \n                                                        authorizationToken\n                                                  \n                                                        \n                                                                        AuthorizationToken\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Authorization token\n\n                                                        \n                                                \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    User\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                User.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            authorizationToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AuthorizationToken\n\n                        \n                    \n                        \n                            \n                                    Defined in src/execution-context.ts:16\n                            \n                        \n\n                \n                    \n                        Authorization token\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Request\n\n                        \n                    \n                        \n                            \n                                    Defined in src/execution-context.ts:15\n                            \n                        \n\n                \n                    \n                        Express request.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     User\n\n                        \n                    \n                        \n                            \n                                    Defined in src/execution-context.ts:17\n                            \n                        \n\n                \n                    \n                        User.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(prismaClient: PrismaClient, request: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/execution-context.ts:24\n                \n            \n\n\n            \n                \n                    Create kernel context.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    prismaClient\n                                    \n                                            PrismaClient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Express request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            getAuthorizationToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthorizationToken(prismaClient: PrismaClient, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/execution-context.ts:73\n                \n            \n\n\n            \n                \n                    Get AuthorizationToken\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    prismaClient\n                                    \n                                            PrismaClient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Token string.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            getHttpAuthorization\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHttpAuthorization(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/execution-context.ts:54\n                \n            \n\n\n            \n                \n                    Get HTTP endpoint Authorization header value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Express request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Request } from 'express';\nimport { AuthorizationToken, Prisma, PrismaClient, User } from '@prisma/client';\n\n/**\n * Socfony execution context.\n */\nexport class ExecutionContext {\n  /**\n   * Create a execution context.\n   * @param request Express request.\n   * @param authorizationToken Authorization token\n   * @param user User.\n   */\n  private constructor(\n    public request: Request,\n    public authorizationToken?: AuthorizationToken,\n    public user?: User,\n  ) {}\n\n  /**\n   * Create kernel context.\n   * @param request Express request.\n   */\n  static async create(\n    prismaClient: PrismaClient,\n    request: Request,\n  ): Promise {\n    const token = this.getHttpAuthorization(request);\n    if (\n      request.context &&\n      request.context.authorizationToken?.token === token\n    ) {\n      return request.context;\n    }\n\n    const authorizationToken = await this.getAuthorizationToken(\n      prismaClient,\n      token,\n    );\n    const context = new ExecutionContext(\n      request,\n      authorizationToken,\n      authorizationToken?.user,\n    );\n    context.request.context = request.context = context;\n\n    return context;\n  }\n\n  /**\n   * Get HTTP endpoint `Authorization` header value.\n   * @param request Express request.\n   */\n  private static getHttpAuthorization(request: Request): string {\n    const key = 'Authorization';\n    if (request.header instanceof Function) {\n      return request.header(key);\n    }\n\n    const headers = request.headers;\n    let token = headers[key.toLowerCase()];\n    if (!token || !token.length) {\n      token = headers[key];\n    }\n\n    return Array.isArray(token) ? token.pop() : token;\n  }\n\n  /**\n   * Get `AuthorizationToken`\n   * @param token Token string.\n   */\n  private static getAuthorizationToken(\n    prismaClient: PrismaClient,\n    token: string,\n  ): Promise> {\n    if (token)\n      return prismaClient.authorizationToken.findUnique({\n        where: { token: token },\n        include: { user: true },\n        rejectOnNotFound: false,\n      });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Prisma module.\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import {\n  ClassProvider,\n  Global,\n  Logger,\n  Module,\n  OnModuleDestroy,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\nimport { PrismaLoggerMiddleware } from './middleware';\n\n/**\n * Prisma class provider\n */\nconst client: ClassProvider = {\n  provide: PrismaClient,\n  useClass: class\n    extends PrismaClient\n    implements OnModuleInit, OnModuleDestroy {\n    private readonly logger = new Logger('Prisma');\n\n    /**\n     * Prisma client constructor\n     */\n    constructor() {\n      super({\n        datasources: {\n          database: { url: process.env.DATABASE_URL },\n        },\n      });\n    }\n\n    /**\n     * NestJS module init hook callback.\n     */\n    async onModuleInit() {\n      // Prisma connect database.\n      await this.$connect();\n\n      // Set Prisma client global logger middleware.\n      this.$use(PrismaLoggerMiddleware(this.logger));\n    }\n\n    /**\n     * NestJS module destory hook callback.\n     */\n    async onModuleDestroy() {\n      // Prisma disconnect database.\n      await this.$disconnect();\n    }\n  },\n};\n\n/**\n * Prisma module.\n */\n@Global()\n@Module({\n  providers: [client],\n  exports: [client],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SecurityModule.html":{"url":"modules/SecurityModule.html","title":"module - SecurityModule","body":"\n                   \n\n\n\n\n    Modules\n    SecurityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SecurityModule\n\n\n\ncluster_SecurityModule_imports\n\n\n\ncluster_SecurityModule_exports\n\n\n\ncluster_SecurityModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nSecurityModule\n\nSecurityModule\n\nSecurityModule -->\n\nPrismaModule->SecurityModule\n\n\n\n\n\nTencentCloudModule\n\nTencentCloudModule\n\nSecurityModule -->\n\nTencentCloudModule->SecurityModule\n\n\n\n\n\nSecuritySmsService \n\nSecuritySmsService \n\nSecuritySmsService  -->\n\nSecurityModule->SecuritySmsService \n\n\n\n\n\nSecuritySmsService\n\nSecuritySmsService\n\nSecurityModule -->\n\nSecuritySmsService->SecurityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/security/security.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Security module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SecuritySmsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            TencentCloudModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SecuritySmsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma';\nimport { TencentCloudModule } from 'src/tencent-cloud';\nimport { SecuritySmsResolver } from './security-sms.resolver';\nimport { SecuritySmsService } from './security-sms.service';\n\n/**\n * Security module.\n */\n@Module({\n  imports: [TencentCloudModule, PrismaModule],\n  providers: [SecuritySmsService, SecuritySmsResolver],\n  exports: [SecuritySmsService],\n})\nexport class SecurityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SecuritySmsResolver.html":{"url":"classes/SecuritySmsResolver.html","title":"class - SecuritySmsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SecuritySmsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/security-sms.resolver.ts\n        \n\n            \n                Description\n            \n            \n                Security SMS resolver.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createSecurity\n                            \n                            \n                                    Async\n                                createViewerSecurity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(securitySmsService: SecuritySmsService)\n                    \n                \n                        \n                            \n                                Defined in src/security/security-sms.resolver.ts:13\n                            \n                        \n\n                \n                    \n                            Create the resolver.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        securitySmsService\n                                                  \n                                                        \n                                                                        SecuritySmsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Secyrity SMS service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createSecurity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createSecurity(phone: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Create a security SMS code for phone number'})\n                \n            \n\n            \n                \n                    Defined in src/security/security-sms.resolver.ts:27\n                \n            \n\n\n            \n                \n                    Create a security SMS code for phone number.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Need create Security SMS code phone number.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createViewerSecurity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createViewerSecurity(context: ExecutionContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Create the viewer security SMS code'})@Authorization({hasAuthorization: true, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/security/security-sms.resolver.ts:47\n                \n            \n\n\n            \n                \n                    Create the viewer security SMS code.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Socfony app execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, GraphQLISODateTime, Mutation, Resolver } from '@nestjs/graphql';\nimport { HasTokenExpiredType } from 'src/authorization-token/enums';\nimport { Authorization } from 'src/authorization.decorator';\nimport { USER_NOT_SET_PHONE } from 'src/constants';\nimport { Context } from 'src/context.decorator';\nimport { ExecutionContext } from 'src/execution-context';\nimport { SecuritySmsService } from './security-sms.service';\n\n/**\n * Security SMS resolver.\n */\n@Resolver()\nexport class SecuritySmsResolver {\n  /**\n   * Create the resolver.\n   * @param securitySmsService Secyrity SMS service.\n   */\n  constructor(private readonly securitySmsService: SecuritySmsService) {}\n\n  /**\n   * Create a security SMS code for phone number.\n   * @param phone Need create Security SMS code phone number.\n   */\n  @Mutation(() => GraphQLISODateTime, {\n    description: 'Create a security SMS code for phone number',\n  })\n  async createSecurity(\n    @Args({\n      name: 'phone',\n      description: 'Need send code phone number',\n      type: () => String,\n    })\n    phone: string,\n  ) {\n    const { expiredAt } = await this.securitySmsService.send(phone);\n    return expiredAt;\n  }\n\n  /**\n   * Create the viewer security SMS code.\n   * @param context Socfony app execution context.\n   */\n  @Mutation(() => GraphQLISODateTime, {\n    description: 'Create the viewer security SMS code',\n  })\n  @Authorization({ hasAuthorization: true, type: HasTokenExpiredType.AUTH })\n  async createViewerSecurity(@Context() context: ExecutionContext) {\n    const { phone } = context.user || {};\n    if (!phone) {\n      throw new Error(USER_NOT_SET_PHONE);\n    }\n\n    return await this.createSecurity(phone);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecuritySmsService.html":{"url":"injectables/SecuritySmsService.html","title":"injectable - SecuritySmsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SecuritySmsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/security-sms.service.ts\n        \n\n            \n                Description\n            \n            \n                Security SMS service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compareCode\n                            \n                            \n                                getOptions\n                            \n                            \n                                    Async\n                                send\n                            \n                            \n                                    Async\n                                updateCodeToUsed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tencentCloudSmsService: TencentCloudSmsService, prisma: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/security/security-sms.service.ts:11\n                            \n                        \n\n                \n                    \n                            Create the service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        tencentCloudSmsService\n                                                  \n                                                        \n                                                                        TencentCloudSmsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Tencent Cloud SMS service.\n\n                                                        \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            compareCode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    compareCode(phone: string, code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/security/security-sms.service.ts:85\n                \n            \n\n\n            \n                \n                    Compase phone security code.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        phone number.\n\n                                    \n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The sent phone security SMS code.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOptions\n                        \n                        \n                    \n                \n            \n            \n                \ngetOptions(hasChina: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/security/security-sms.service.ts:26\n                \n            \n\n\n            \n                \n                    Get SMS options.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hasChina\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Has china.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { expiredIn: any; templateID: any; veriables: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            send\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    send(phone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/security/security-sms.service.ts:49\n                \n            \n\n\n            \n                \n                    Send a SMS code to phone.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Send phone number.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateCodeToUsed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCodeToUsed(security: SecuritySmsCode)\n                \n            \n\n\n            \n                \n                    Defined in src/security/security-sms.service.ts:113\n                \n            \n\n\n            \n                \n                    Update security to used.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    security\n                                    \n                                            SecuritySmsCode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Security code.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaClient, SecuritySmsCode } from '@prisma/client';\nimport * as dayjs from 'dayjs';\nimport { IDHelper } from 'src/helper';\nimport { TencentCloudSmsService } from 'src/tencent-cloud/sms';\n\n/**\n * Security SMS service.\n */\n@Injectable()\nexport class SecuritySmsService {\n  /**\n   * Create the service.\n   * @param tencentCloudSmsService Tencent Cloud SMS service.\n   * @param prisma Prisma client.\n   */\n  constructor(\n    private readonly tencentCloudSmsService: TencentCloudSmsService,\n    private readonly prisma: PrismaClient,\n  ) {}\n\n  /**\n   * Get SMS options.\n   * @param hasChina Has china.\n   */\n  getOptions(hasChina: boolean) {\n    const expiredIn = Number.parseInt(\n      process.env.TENCENT_CLOUD_SMS_EXPIRED_IN || '300',\n    );\n    if (hasChina) {\n      return {\n        expiredIn,\n        templateID: process.env.TENCENT_CLOUD_SMS_CHINA_TEMPLATE_ID,\n        veriables: process.env.TENCENT_CLOUD_SMS_CHINA_VERIABLES,\n      };\n    }\n\n    return {\n      expiredIn,\n      templateID: process.env.TENCENT_CLOUD_SMS_OTHER_TEMPLATE_ID,\n      veriables: process.env.TENCENT_CLOUD_SMS_OTHER_VERIABLES,\n    };\n  }\n\n  /**\n   * Send a SMS code to phone.\n   * @param phone Send phone number.\n   */\n  async send(phone: string) {\n    const hasChina = phone.startsWith('+86');\n    const options = this.getOptions(hasChina);\n    const code = IDHelper.numeral(6);\n    const expiredAt = dayjs().add(options.expiredIn, 'seconds').toDate();\n    const paramsSet = options.veriables\n      .split(',')\n      .map((item) =>\n        item\n          .replace('#code#', code)\n          .replace('#expired#', (options.expiredIn / 60).toString()),\n      );\n\n    const security = await this.prisma.securitySmsCode.create({\n      data: {\n        id: IDHelper.id(64),\n        phone,\n        code,\n        expiredAt,\n      },\n    });\n\n    this.tencentCloudSmsService.send({\n      PhoneNumberSet: [phone],\n      TemplateID: options.templateID,\n      TemplateParamSet: paramsSet,\n    });\n\n    return security;\n  }\n\n  /**\n   * Compase phone security code.\n   * @param phone phone number.\n   * @param code The sent phone security SMS code.\n   */\n  async compareCode(\n    phone: string,\n    code: string,\n  ): Promise {\n    if (!phone || !code) {\n      return false;\n    }\n\n    const security = await this.prisma.securitySmsCode.findFirst({\n      where: { phone, code },\n      orderBy: { createdAt: 'desc' },\n      rejectOnNotFound: false,\n    });\n    if (\n      security &&\n      !security.usedAt &&\n      security.expiredAt.getTime() > Date.now()\n    ) {\n      return security;\n    }\n\n    return false;\n  }\n\n  /**\n   * Update security to used.\n   * @param security Security code.\n   */\n  async updateCodeToUsed(security: SecuritySmsCode) {\n    return await this.prisma.securitySmsCode.update({\n      where: { id: security.id },\n      data: { usedAt: new Date() },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SocfonyConfig.html":{"url":"interfaces/SocfonyConfig.html","title":"interface - SocfonyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SocfonyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.config.ts\n        \n\n            \n                Description\n            \n            \n                Socfony app config.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        endpoint\n                                \n                                \n                                        isProduction\n                                \n                                \n                                        port\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    GraphQL endpoint\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isProduction\n                                    \n                                \n                                \n                                    \n                                        isProduction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Is production.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                    \n                                \n                                \n                                    \n                                        port:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    App runner port\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { config as dontEnvConfig } from 'dotenv';\n\n/**\n * Socfony app config.\n */\nexport interface SocfonyConfig {\n  /**\n   * Is production.\n   */\n  isProduction: boolean;\n\n  /**\n   * App runner port\n   */\n  port: string | number;\n\n  /**\n   * GraphQL endpoint\n   */\n  endpoint: string;\n}\n\n/**\n * Load Socfony ENV config file.\n * @param path ENV file path.\n */\nexport function loadConfig(path?: string) {\n  const logger = new Logger('Socfony');\n  const { error } = dontEnvConfig({ path });\n  if (error) {\n    logger.error(error.message);\n    process.exit(1);\n  }\n\n  logger.log(`Loaded \"${path || '.env'}\" dot env config file.`);\n}\n\n/**\n * Get app config.\n * @returns {@like SocfonyConfig}\n */\nexport function getConfig(): SocfonyConfig {\n  return {\n    isProduction: process.env.NODE_ENV === 'production',\n    port: process.env.CLIENT_SERVER_PORT || 3000,\n    endpoint: process.env.CLIENT_GRAPHQL_ENDPOINT || '/',\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TencentCloudCosCredentials.html":{"url":"classes/TencentCloudCosCredentials.html","title":"class - TencentCloudCosCredentials","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TencentCloudCosCredentials\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/cos/entities/cos.entity.ts\n        \n\n            \n                Description\n            \n            \n                Tencent CLoud COS credential\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization\n                            \n                            \n                                bucket\n                            \n                            \n                                region\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authorization\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TencentCloudStsFederationToken\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud STS authorization token'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/cos/entities/cos.entity.ts:17\n                            \n                        \n\n                \n                    \n                        Tencent Cloud STS authorization token\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bucket\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud COS bucket'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/cos/entities/cos.entity.ts:25\n                            \n                        \n\n                \n                    \n                        Tencent Cloud COS bucket\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            region\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud COS bucket region'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/cos/entities/cos.entity.ts:33\n                            \n                        \n\n                \n                    \n                        Tencent Cloud COS bucket region\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { TencentCloudStsFederationToken } from '../../sts';\n\n/**\n * Tencent CLoud COS credential\n */\n@ObjectType({\n  description: 'Tencent CLoud COS credential',\n})\nexport class TencentCloudCosCredentials {\n  /**\n   * Tencent Cloud STS authorization token\n   */\n  @Field(() => TencentCloudStsFederationToken, {\n    description: 'Tencent Cloud STS authorization token',\n  })\n  authorization: TencentCloudStsFederationToken;\n\n  /**\n   * Tencent Cloud COS bucket\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud COS bucket',\n  })\n  bucket: string;\n\n  /**\n   * Tencent Cloud COS bucket region\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud COS bucket region',\n  })\n  region: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TencentCloudCosResolver.html":{"url":"classes/TencentCloudCosResolver.html","title":"class - TencentCloudCosResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TencentCloudCosResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/cos/cos.resolver.ts\n        \n\n            \n                Description\n            \n            \n                Tencent Cloud COS credentials resolver.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authorization\n                            \n                            \n                                    Async\n                                createCosTemporaryReadCredential\n                            \n                            \n                                    Async\n                                createCosTemporaryWriteCredential\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cosService: TencentCloudCosService)\n                    \n                \n                        \n                            \n                                Defined in src/tencent-cloud/cos/cos.resolver.ts:43\n                            \n                        \n\n                \n                    \n                            Create the resolver.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        cosService\n                                                  \n                                                        \n                                                                        TencentCloudCosService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Tencent Cloud COS service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            authorization\n                        \n                        \n                    \n                \n            \n            \n                \nauthorization(undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField(undefined)\n                \n            \n\n            \n                \n                    Defined in src/tencent-cloud/cos/cos.resolver.ts:55\n                \n            \n\n\n            \n                \n                    Resolve Tencent Cloud STS federation token.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCosTemporaryReadCredential\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCosTemporaryReadCredential()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Create Tencent Cloud COS read credential'})\n                \n            \n\n            \n                \n                    Defined in src/tencent-cloud/cos/cos.resolver.ts:72\n                \n            \n\n\n            \n                \n                    Create Tencent Cloud COS read credential\n\n\n                    \n                        Returns :     Promise<>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCosTemporaryWriteCredential\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCosTemporaryWriteCredential(type: AllowUploadFileType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Create Tencent Cloud COS write credential'})@AuthorizationWith()\n                \n            \n\n            \n                \n                    Defined in src/tencent-cloud/cos/cos.resolver.ts:90\n                \n            \n\n\n            \n                \n                    Create Tencent Cloud COS write credential\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                AllowUploadFileType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        AllowUploadFileType item.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Args,\n  Mutation,\n  Parent,\n  registerEnumType,\n  ResolveField,\n  Resolver,\n} from '@nestjs/graphql';\nimport { AuthorizationWith } from 'src/authorization.decorator';\nimport { IDHelper } from 'src/helper';\nimport { TencentCloudStsFederationToken } from '../sts';\nimport { TencentCloudCosCredentials } from './entities/cos.entity';\nimport { TencentCloudCosService } from './soc.service';\n\n/**\n * Allow upload File MIME-type.\n */\nexport enum AllowUploadFileType {\n  // Images\n  JPG = '.jpg',\n  PNG = '.png',\n  GIF = '.gif',\n  // Video\n  MP4 = '.mp4',\n  OGG = '.ogg',\n  // Audio\n  MP3 = '.mp3',\n  WAV = '.wav',\n}\n\n/**\n * Register `AllowUploadFileType` to GraphQL schema.\n */\nregisterEnumType(AllowUploadFileType, {\n  name: 'AllowUploadFileType',\n  description: 'Allow upload File MIME-type',\n});\n\n/**\n * Tencent Cloud COS credentials resolver.\n */\n@Resolver(() => TencentCloudCosCredentials)\nexport class TencentCloudCosResolver {\n  /**\n   * Create the resolver.\n   * @param cosService Tencent Cloud COS service.\n   */\n  constructor(private readonly cosService: TencentCloudCosService) {}\n\n  /**\n   * Resolve Tencent Cloud STS federation token.\n   * @param param SOcfony runner execution context.\n   */\n  @ResolveField(() => TencentCloudStsFederationToken)\n  authorization(\n    @Parent()\n    {\n      authorization,\n    }: {\n      authorization: () => Promise;\n    },\n  ) {\n    return authorization();\n  }\n\n  /**\n   * Create Tencent Cloud COS read credential\n   */\n  @Mutation(() => TencentCloudCosCredentials, {\n    description: 'Create Tencent Cloud COS read credential',\n  })\n  async createCosTemporaryReadCredential(): Promise & {\n      authorization: () => Promise;\n    }\n  > {\n    return Object.assign({}, this.cosService.options, {\n      authorization: () => this.cosService.createTemporaryReadCredential(),\n    });\n  }\n\n  /**\n   * Create Tencent Cloud COS write credential\n   * @param type `AllowUploadFileType` item.\n   */\n  @Mutation(() => TencentCloudCosCredentials, {\n    description: 'Create Tencent Cloud COS write credential',\n  })\n  @AuthorizationWith()\n  async createCosTemporaryWriteCredential(\n    @Args({\n      name: 'type',\n      type: () => AllowUploadFileType,\n      description: 'create resource type.',\n    })\n    type: AllowUploadFileType,\n  ): Promise & {\n      authorization: () => Promise;\n    }\n  > {\n    return Object.assign({}, this.cosService.options, {\n      authorization: () =>\n        this.cosService.createTemporaryWriteCredential(IDHelper.id(64) + type),\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TencentCloudCosService.html":{"url":"injectables/TencentCloudCosService.html","title":"injectable - TencentCloudCosService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TencentCloudCosService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/cos/soc.service.ts\n        \n\n            \n                Description\n            \n            \n                Tencent Cloud COS service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTemporaryReadCredential\n                            \n                            \n                                    Async\n                                createTemporaryWriteCredential\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                                \n                                    temporaryCredentialDurationSeconds\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sts: TencentCloudStsService)\n                    \n                \n                        \n                            \n                                Defined in src/tencent-cloud/cos/soc.service.ts:9\n                            \n                        \n\n                \n                    \n                            Create the COS service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sts\n                                                  \n                                                        \n                                                                        TencentCloudStsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Tencent Cloud STS service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTemporaryReadCredential\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTemporaryReadCredential()\n                \n            \n\n\n            \n                \n                    Defined in src/tencent-cloud/cos/soc.service.ts:36\n                \n            \n\n\n            \n                \n                    Create Tencent Cloud COS temporary read credential.\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTemporaryWriteCredential\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTemporaryWriteCredential(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tencent-cloud/cos/soc.service.ts:64\n                \n            \n\n\n            \n                \n                    Create Tencent Cloud COS temporary write credential.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tencent Cloud COS object key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/tencent-cloud/cos/soc.service.ts:19\n                                \n                            \n                    \n                        \n                                Get COS options.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        temporaryCredentialDurationSeconds\n                    \n                \n\n                \n                    \n                        gettemporaryCredentialDurationSeconds()\n                    \n                \n                            \n                                \n                                    Defined in src/tencent-cloud/cos/soc.service.ts:29\n                                \n                            \n                    \n                        \n                                get temporary credential duration seconds.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { IDHelper } from 'src/helper';\nimport { TencentCloudStsService } from '../sts';\n\n/**\n * Tencent Cloud COS service.\n */\n@Injectable()\nexport class TencentCloudCosService {\n  /**\n   * Create the COS service.\n   * @param sts Tencent Cloud STS service.\n   */\n  constructor(private readonly sts: TencentCloudStsService) {}\n\n  /**\n   * Get COS options.\n   */\n  get options() {\n    return {\n      bucket: process.env.TENCENT_CLOUD_COS_BUCKET,\n      region: process.env.TENCENT_CLOUD_COS_REGION,\n    };\n  }\n\n  /**\n   * get temporary credential duration seconds.\n   */\n  get temporaryCredentialDurationSeconds() {\n    return 7200;\n  }\n\n  /**\n   * Create Tencent Cloud COS temporary read credential.\n   */\n  async createTemporaryReadCredential() {\n    const { bucket, region } = this.options;\n    const stsClient = this.sts.createClient(region);\n    const [_, uid] = bucket.split('-');\n    return await stsClient.GetFederationToken({\n      Name: IDHelper.alphabet(32),\n      DurationSeconds: this.temporaryCredentialDurationSeconds,\n      Policy: JSON.stringify({\n        version: '2.0',\n        statement: [\n          {\n            effect: 'allow',\n            action: [\n              'name/cos:GetObject',\n              'name/cos:HeadObject',\n              'name/cos:OptionsObject',\n            ],\n            resource: [`qcs::cos:${region}:uid/${uid}:${bucket}/*`],\n          },\n        ],\n      }),\n    });\n  }\n\n  /**\n   * Create Tencent Cloud COS temporary write credential.\n   * @param name Tencent Cloud COS object key.\n   */\n  async createTemporaryWriteCredential(name: string) {\n    const { bucket, region } = this.options;\n    const stsClient = this.sts.createClient(region);\n    const [_, uid] = bucket.split('-');\n    return await stsClient.GetFederationToken({\n      Name: IDHelper.alphabet(32),\n      DurationSeconds: this.temporaryCredentialDurationSeconds,\n      Policy: JSON.stringify({\n        version: '2.0',\n        statement: [\n          {\n            effect: 'allow',\n            action: [\n              //简单上传操作\n              'name/cos:PutObject',\n              //表单上传对象\n              'name/cos:PostObject',\n              //分块上传：初始化分块操作\n              'name/cos:InitiateMultipartUpload',\n              //分块上传：List 进行中的分块上传\n              'name/cos:ListMultipartUploads',\n              //分块上传：List 已上传分块操作\n              'name/cos:ListParts',\n              //分块上传：上传分块块操作\n              'name/cos:UploadPart',\n              //分块上传：完成所有分块上传操作\n              'name/cos:CompleteMultipartUpload',\n              //取消分块上传操作\n              'name/cos:AbortMultipartUpload',\n            ],\n            resource: [`qcs::cos:${region}:uid/${uid}:${bucket}/${name}`],\n          },\n        ],\n      }),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TencentCloudModule.html":{"url":"modules/TencentCloudModule.html","title":"module - TencentCloudModule","body":"\n                   \n\n\n\n\n    Modules\n    TencentCloudModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TencentCloudModule\n\n\n\ncluster_TencentCloudModule_providers\n\n\n\ncluster_TencentCloudModule_exports\n\n\n\n\nTencentCloudCosService \n\nTencentCloudCosService \n\n\n\nTencentCloudSmsService \n\nTencentCloudSmsService \n\n\n\nTencentCloudStsService \n\nTencentCloudStsService \n\n\n\nTencentCloudModule\n\nTencentCloudModule\n\nTencentCloudCosService  -->\n\nTencentCloudModule->TencentCloudCosService \n\n\n\nTencentCloudSmsService  -->\n\nTencentCloudModule->TencentCloudSmsService \n\n\n\nTencentCloudStsService  -->\n\nTencentCloudModule->TencentCloudStsService \n\n\n\n\n\nTencentCloudCosService\n\nTencentCloudCosService\n\nTencentCloudModule -->\n\nTencentCloudCosService->TencentCloudModule\n\n\n\n\n\nTencentCloudSmsService\n\nTencentCloudSmsService\n\nTencentCloudModule -->\n\nTencentCloudSmsService->TencentCloudModule\n\n\n\n\n\nTencentCloudStsService\n\nTencentCloudStsService\n\nTencentCloudModule -->\n\nTencentCloudStsService->TencentCloudModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tencent-cloud/tencent-cloud.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Tencent Cloud module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TencentCloudCosService\n                        \n                        \n                            TencentCloudSmsService\n                        \n                        \n                            TencentCloudStsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TencentCloudCosService\n                        \n                        \n                            TencentCloudSmsService\n                        \n                        \n                            TencentCloudStsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TencentCloudCosService } from './cos';\nimport { TencentCloudCosResolver } from './cos/cos.resolver';\nimport { TencentCloudSmsService } from './sms';\nimport { TencentCloudStsService } from './sts';\n\n/**\n * Tencent Cloud module.\n */\n@Module({\n  providers: [\n    TencentCloudStsService,\n    TencentCloudCosService,\n    TencentCloudSmsService,\n\n    // Resolvers\n    TencentCloudCosResolver,\n  ],\n  exports: [\n    TencentCloudStsService,\n    TencentCloudCosService,\n    TencentCloudSmsService,\n  ],\n})\nexport class TencentCloudModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TencentCloudSmsService.html":{"url":"injectables/TencentCloudSmsService.html","title":"injectable - TencentCloudSmsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TencentCloudSmsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/sms/sms.service.ts\n        \n\n            \n                Description\n            \n            \n                Tencent Cloud SMS service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createClient\n                            \n                            \n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    baseOptions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createClient\n                        \n                        \n                    \n                \n            \n            \n                \ncreateClient(region: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tencent-cloud/sms/sms.service.ts:29\n                \n            \n\n\n            \n                \n                    Create Tencent Cloud SMS client.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    region\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'ap-guangzhou'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            send\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    send(params: Pick, region: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tencent-cloud/sms/sms.service.ts:45\n                \n            \n\n\n            \n                \n                    Send SMS.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                Pick\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Send SMS params.\n\n                                    \n                                \n                                \n                                    region\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'ap-guangzhou'\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        baseOptions\n                    \n                \n\n                \n                    \n                        getbaseOptions()\n                    \n                \n                            \n                                \n                                    Defined in src/tencent-cloud/sms/sms.service.ts:14\n                                \n                            \n                    \n                        \n                                Get SMS base options.\n\n\n                                \n                                    Returns :         Pick\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Client } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sms/v20190711/sms_client';\nimport { SendSmsRequest } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sms/v20190711/sms_models';\nimport { getCredential } from '../common';\n\n/**\n * Tencent Cloud SMS service.\n */\n@Injectable()\nexport class TencentCloudSmsService {\n  /**\n   * Get SMS base options.\n   */\n  get baseOptions(): Pick {\n    return {\n      SmsSdkAppid: process.env.TENCENT_CLOUD_SMS_APP_ID,\n      Sign: process.env.TENCENT_CLOUD_SMS_SIGN,\n      ExtendCode: process.env.TENCENT_CLOUD_SMS_EXTEND_CODE,\n      SenderId: process.env.TENCENT_CLOUD_SMS_SENDER_ID,\n    };\n  }\n\n  /**\n   * Create Tencent Cloud SMS client.\n   */\n  createClient(region: string = 'ap-guangzhou'): Client {\n    return new Client({\n      credential: getCredential(),\n      region,\n      profile: {\n        httpProfile: {\n          endpoint: 'sms.tencentcloudapi.com',\n        },\n      },\n    });\n  }\n\n  /**\n   * Send SMS.\n   * @param params Send SMS params.\n   */\n  async send(\n    params: Pick,\n    region: string = 'ap-guangzhou',\n  ) {\n    const client = this.createClient(region);\n    const request = Object.assign({}, this.baseOptions, params);\n    return await client.SendSms(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TencentCloudStsCredentials.html":{"url":"classes/TencentCloudStsCredentials.html","title":"class - TencentCloudStsCredentials","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TencentCloudStsCredentials\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/sts/entities/sts.entity.ts\n        \n\n            \n                Description\n            \n            \n                Tencent Cloud STS credentials.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Credentials\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                TmpSecretId\n                            \n                            \n                                TmpSecretKey\n                            \n                            \n                                Token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TmpSecretId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud credentials secrect id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/sts/entities/sts.entity.ts:26\n                            \n                        \n\n                \n                    \n                        Tencent Cloud credentials secrect id\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TmpSecretKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud credentials secrect key'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/sts/entities/sts.entity.ts:34\n                            \n                        \n\n                \n                    \n                        Tencent Cloud credentials secrect key\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud credentials token'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/sts/entities/sts.entity.ts:18\n                            \n                        \n\n                \n                    \n                        Tencent Cloud credentials token\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { GetFederationTokenResponse } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sts/v20180813/sts_models';\nimport { Credentials } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sts/v20180813/sts_models';\n\n/**\n * Tencent Cloud STS credentials.\n */\n@ObjectType({\n  description: 'Tencent Cloud STS credentials.',\n})\nexport class TencentCloudStsCredentials implements Credentials {\n  /**\n   * Tencent Cloud credentials token\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials token',\n  })\n  Token: string;\n\n  /**\n   * Tencent Cloud credentials secrect id\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials secrect id',\n  })\n  TmpSecretId: string;\n\n  /**\n   * Tencent Cloud credentials secrect key\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials secrect key',\n  })\n  TmpSecretKey: string;\n}\n\n/**\n * Tencent Clous STS federation token\n */\n@ObjectType({\n  description: 'Tencent Clous STS federation token',\n})\nexport class TencentCloudStsFederationToken\n  implements GetFederationTokenResponse {\n  /**\n   * Tencent Cloud credentials\n   */\n  @Field(() => TencentCloudStsCredentials, {\n    description: 'Tencent Cloud credentials',\n    nullable: true,\n  })\n  Credentials?: TencentCloudStsCredentials;\n\n  /**\n   * Tencent Cloud credentials expired Unix time\n   */\n  @Field(() => Int, {\n    description: 'Tencent Cloud credentials expired Unix time.',\n    nullable: true,\n  })\n  ExpiredTime?: number;\n\n  /**\n   * Tencent Cloud credentials expired ISO8601 date\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials expired ISO8601 date.',\n    nullable: true,\n  })\n  Expiration?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TencentCloudStsFederationToken.html":{"url":"classes/TencentCloudStsFederationToken.html","title":"class - TencentCloudStsFederationToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TencentCloudStsFederationToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/sts/entities/sts.entity.ts\n        \n\n            \n                Description\n            \n            \n                Tencent Clous STS federation token\n\n            \n\n\n            \n                Implements\n            \n            \n                        GetFederationTokenResponse\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                Credentials\n                            \n                            \n                                    Optional\n                                Expiration\n                            \n                            \n                                    Optional\n                                ExpiredTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            Credentials\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TencentCloudStsCredentials\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud credentials', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/sts/entities/sts.entity.ts:52\n                            \n                        \n\n                \n                    \n                        Tencent Cloud credentials\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            Expiration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud credentials expired ISO8601 date.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/sts/entities/sts.entity.ts:70\n                            \n                        \n\n                \n                    \n                        Tencent Cloud credentials expired ISO8601 date\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            ExpiredTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Tencent Cloud credentials expired Unix time.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tencent-cloud/sts/entities/sts.entity.ts:61\n                            \n                        \n\n                \n                    \n                        Tencent Cloud credentials expired Unix time\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { GetFederationTokenResponse } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sts/v20180813/sts_models';\nimport { Credentials } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sts/v20180813/sts_models';\n\n/**\n * Tencent Cloud STS credentials.\n */\n@ObjectType({\n  description: 'Tencent Cloud STS credentials.',\n})\nexport class TencentCloudStsCredentials implements Credentials {\n  /**\n   * Tencent Cloud credentials token\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials token',\n  })\n  Token: string;\n\n  /**\n   * Tencent Cloud credentials secrect id\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials secrect id',\n  })\n  TmpSecretId: string;\n\n  /**\n   * Tencent Cloud credentials secrect key\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials secrect key',\n  })\n  TmpSecretKey: string;\n}\n\n/**\n * Tencent Clous STS federation token\n */\n@ObjectType({\n  description: 'Tencent Clous STS federation token',\n})\nexport class TencentCloudStsFederationToken\n  implements GetFederationTokenResponse {\n  /**\n   * Tencent Cloud credentials\n   */\n  @Field(() => TencentCloudStsCredentials, {\n    description: 'Tencent Cloud credentials',\n    nullable: true,\n  })\n  Credentials?: TencentCloudStsCredentials;\n\n  /**\n   * Tencent Cloud credentials expired Unix time\n   */\n  @Field(() => Int, {\n    description: 'Tencent Cloud credentials expired Unix time.',\n    nullable: true,\n  })\n  ExpiredTime?: number;\n\n  /**\n   * Tencent Cloud credentials expired ISO8601 date\n   */\n  @Field(() => String, {\n    description: 'Tencent Cloud credentials expired ISO8601 date.',\n    nullable: true,\n  })\n  Expiration?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TencentCloudStsService.html":{"url":"injectables/TencentCloudStsService.html","title":"injectable - TencentCloudStsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TencentCloudStsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tencent-cloud/sts/sts.service.ts\n        \n\n            \n                Description\n            \n            \n                Tencent Cloud STS service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createClient\n                        \n                        \n                    \n                \n            \n            \n                \ncreateClient(region: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tencent-cloud/sts/sts.service.ts:14\n                \n            \n\n\n            \n                \n                    Create STS client for region.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    region\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'ap-guangzhou'\n                                    \n\n                                    \n                                        server region.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Client } from 'tencentcloud-sdk-nodejs/tencentcloud/services/sts/v20180813/sts_client';\nimport { getCredential } from '../common';\n\n/**\n * Tencent Cloud STS service.\n */\n@Injectable()\nexport class TencentCloudStsService {\n  /**\n   * Create STS client for region.\n   * @param region server region.\n   */\n  createClient(region: string = 'ap-guangzhou'): Client {\n    return new Client({\n      credential: getCredential(),\n      region,\n      profile: {\n        httpProfile: {\n          endpoint: 'sts.tencentcloudapi.com',\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateViewerArgs.html":{"url":"classes/UpdateViewerArgs.html","title":"class - UpdateViewerArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateViewerArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-viewer.args.ts\n        \n\n            \n                Description\n            \n            \n                Update viewer args.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                    Optional\n                                newPhoneSecurity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserUpdateInput\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User update input'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/update-viewer.args.ts:20\n                            \n                        \n\n                \n                    \n                        User update input\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            newPhoneSecurity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true, description: 'Update phone need set new phone security code'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/update-viewer.args.ts:29\n                            \n                        \n\n                \n                    \n                        Update phone need set new phone security code\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, PickType } from '@nestjs/graphql';\nimport { CreateAuthorizationTokenArgs } from 'src/authorization-token/dto/create-authorization-token.args';\nimport { UserUpdateInput } from './user-update.input';\n\n/**\n * Update viewer args.\n */\n@ArgsType()\nexport class UpdateViewerArgs extends PickType(\n  CreateAuthorizationTokenArgs,\n  ['security', 'type'] as const,\n  ArgsType,\n) {\n  /**\n   * User update input\n   */\n  @Field(() => UserUpdateInput, {\n    description: 'User update input',\n  })\n  data: UserUpdateInput;\n\n  /**\n   * Update phone need set new phone security code\n   */\n  @Field(() => String, {\n    nullable: true,\n    description: 'Update phone need set new phone security code',\n  })\n  newPhoneSecurity?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n            \n                Description\n            \n            \n                User entity.\n\n            \n\n            \n                Extends\n            \n            \n                        UserInterface\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                login\n                            \n                            \n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User registered date at.'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:44\n\n                            \n                        \n\n                \n                    \n                        User registered date at.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User ID'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:27\n\n                            \n                        \n\n                \n                    \n                        User ID\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true, description: 'User login name'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:36\n\n                            \n                        \n\n                \n                    \n                        User login name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     UserProfile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'The user profile'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:52\n\n                            \n                        \n\n                \n                    \n                        User profile.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ObjectType } from '@nestjs/graphql';\nimport { UserInterface } from './user.interface';\n\n/**\n * User entity.\n */\n@ObjectType({\n  implements: [UserInterface],\n  description: 'User entity',\n})\nexport class UserEntity extends UserInterface {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInterface.html":{"url":"classes/UserInterface.html","title":"class - UserInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.interface.ts\n        \n\n            \n                Description\n            \n            \n                User interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                login\n                            \n                            \n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User registered date at.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.interface.ts:44\n                            \n                        \n\n                \n                    \n                        User registered date at.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.interface.ts:27\n                            \n                        \n\n                \n                    \n                        User ID\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true, description: 'User login name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.interface.ts:36\n                            \n                        \n\n                \n                    \n                        User login name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     UserProfile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'The user profile'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.interface.ts:52\n                            \n                        \n\n                \n                    \n                        User profile.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, GraphQLISODateTime, ID, InterfaceType } from '@nestjs/graphql';\nimport { Prisma, UserProfile } from '@prisma/client';\nimport { UserProfileEntity } from '../profile/entities/profile.entity';\n\n/**\n * User interface.\n */\n@InterfaceType({\n  description: 'User interface.',\n})\nexport class UserInterface\n  implements\n    Omit,\n      'phone' | 'email' | 'password'\n    > {\n  /**\n   * User ID\n   */\n  @Field((type) => ID, {\n    description: 'User ID',\n  })\n  id: string;\n\n  /**\n   * User login name\n   */\n  @Field((type) => String, {\n    nullable: true,\n    description: 'User login name',\n  })\n  login: string;\n\n  /**\n   * User registered date at.\n   */\n  @Field((type) => GraphQLISODateTime, {\n    description: 'User registered date at.',\n  })\n  createdAt: Date;\n\n  /**\n   * User profile.\n   */\n  @Field((type) => UserProfileEntity, {\n    description: 'The user profile',\n  })\n  profile: UserProfile;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInterfaceResolver.html":{"url":"classes/UserInterfaceResolver.html","title":"class - UserInterfaceResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInterfaceResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-interface.resolver.ts\n        \n\n            \n                Description\n            \n            \n                GraphQL user interface resolver.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userProfileService: UserProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-interface.resolver.ts:11\n                            \n                        \n\n                \n                    \n                            Create GraphQL user interface resolver\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userProfileService\n                                                  \n                                                        \n                                                                        UserProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User profile service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            profile\n                        \n                        \n                    \n                \n            \n            \n                \nprofile(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/user-interface.resolver.ts:23\n                \n            \n\n\n            \n                \n                    Resolve user profile field.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parent context user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parent, ResolveField, Resolver } from '@nestjs/graphql';\nimport { User } from '@prisma/client';\nimport { UserInterface } from './entities/user.interface';\nimport { UserProfileEntity } from './profile/entities/profile.entity';\nimport { UserProfileService } from './profile/profile.service';\n\n/**\n * GraphQL user interface resolver.\n */\n@Resolver(() => UserInterface)\nexport class UserInterfaceResolver {\n  /**\n   * Create GraphQL user interface resolver\n   * @param userProfileService User profile service.\n   */\n  constructor(private readonly userProfileService: UserProfileService) {}\n\n  /**\n   * Resolve user profile field.\n   * @param user Parent context user.\n   */\n  @ResolveField(() => UserProfileEntity)\n  profile(@Parent() user: User) {\n    return this.userProfileService.resolveProfile(user);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nSecurityModule\n\nSecurityModule\n\nUserModule -->\n\nSecurityModule->UserModule\n\n\n\n\n\nUserProfileModule\n\nUserProfileModule\n\nUserModule -->\n\nUserProfileModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n        \n            Description\n        \n        \n            User module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            SecurityModule\n                        \n                        \n                            UserProfileModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma';\nimport { SecurityModule } from 'src/security/security.module';\nimport { UserProfileModule } from './profile/profile.module';\nimport { UserInterfaceResolver } from './user-interface.resolver';\nimport { UserService } from './user.service';\nimport { ViewerResolver } from './viewer.resolver';\n\n/**\n * User module.\n */\n@Module({\n  imports: [PrismaModule, UserProfileModule, SecurityModule],\n  providers: [UserService, UserInterfaceResolver, ViewerResolver],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileEntity.html":{"url":"classes/UserProfileEntity.html","title":"class - UserProfileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/profile/entities/profile.entity.ts\n        \n\n            \n                Description\n            \n            \n                User profile entity.\n\n            \n\n\n            \n                Implements\n            \n            \n                            UserProfileEntity\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                location\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User avatar storage path.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/profile/entities/profile.entity.ts:34\n                            \n                        \n\n                \n                    \n                        User avatar storage path\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bio\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User bio.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/profile/entities/profile.entity.ts:43\n                            \n                        \n\n                \n                    \n                        User bio\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            location\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User location string.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/profile/entities/profile.entity.ts:52\n                            \n                        \n\n                \n                    \n                        User location string\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User name.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/profile/entities/profile.entity.ts:25\n                            \n                        \n\n                \n                    \n                        User name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User profile updated at.', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/profile/entities/profile.entity.ts:61\n                            \n                        \n\n                \n                    \n                        User profile updated at\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'Profile owner ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/profile/entities/profile.entity.ts:16\n                            \n                        \n\n                \n                    \n                        Profile owner ID\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, GraphQLISODateTime, ID, ObjectType } from '@nestjs/graphql';\n\n/**\n * User profile entity.\n */\n@ObjectType({\n  description: 'User profile entity',\n})\nexport class UserProfileEntity implements UserProfileEntity {\n  /**\n   * Profile owner ID\n   */\n  @Field(() => ID, {\n    description: 'Profile owner ID',\n  })\n  userId: string;\n\n  /**\n   * User name\n   */\n  @Field((type) => String, {\n    description: 'User name.',\n    nullable: true,\n  })\n  name: string;\n\n  /**\n   * User avatar storage path\n   */\n  @Field((type) => String, {\n    description: 'User avatar storage path.',\n    nullable: true,\n  })\n  avatar: string;\n\n  /**\n   * User bio\n   */\n  @Field((type) => String, {\n    description: 'User bio.',\n    nullable: true,\n  })\n  bio: string;\n\n  /**\n   * User location string\n   */\n  @Field((type) => String, {\n    description: 'User location string.',\n    nullable: true,\n  })\n  location: string;\n\n  /**\n   * User profile updated at\n   */\n  @Field((type) => GraphQLISODateTime, {\n    description: 'User profile updated at.',\n    nullable: true,\n  })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserProfileModule.html":{"url":"modules/UserProfileModule.html","title":"module - UserProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    UserProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserProfileModule\n\n\n\ncluster_UserProfileModule_exports\n\n\n\ncluster_UserProfileModule_imports\n\n\n\ncluster_UserProfileModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserProfileModule\n\nUserProfileModule\n\nUserProfileModule -->\n\nPrismaModule->UserProfileModule\n\n\n\n\n\nUserProfileService \n\nUserProfileService \n\nUserProfileService  -->\n\nUserProfileModule->UserProfileService \n\n\n\n\n\nUserProfileService\n\nUserProfileService\n\nUserProfileModule -->\n\nUserProfileService->UserProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/profile/profile.module.ts\n        \n\n\n        \n            Description\n        \n        \n            User profile module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserProfileService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserProfileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma';\nimport { UserProfileResolver } from './profile.resolver';\nimport { UserProfileService } from './profile.service';\n\n/**\n * User profile module.\n */\n@Module({\n  imports: [PrismaModule],\n  providers: [UserProfileService, UserProfileResolver],\n  exports: [UserProfileService],\n})\nexport class UserProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileResolver.html":{"url":"classes/UserProfileResolver.html","title":"class - UserProfileResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/profile/profile.resolver.ts\n        \n\n            \n                Description\n            \n            \n                User prifle entity resolver.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                updateViewerProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileService: UserProfileService, prismaClient: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/user/profile/profile.resolver.ts:13\n                            \n                        \n\n                \n                    \n                            Create user prifle entity resolver\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        UserProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User profile service.\n\n                                                        \n                                                \n                                                \n                                                        prismaClient\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateViewerProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateViewerProfile(context: ExecutionContext, data: UserProfileUpdateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Update viewer profile'})@AuthorizationWith()\n                \n            \n\n            \n                \n                    Defined in src/user/profile/profile.resolver.ts:33\n                \n            \n\n\n            \n                \n                    Update viewer profile.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Socfony execution context.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UserProfileUpdateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User profile update input.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Context, Mutation, Resolver } from '@nestjs/graphql';\nimport { PrismaClient } from '@prisma/client';\nimport { AuthorizationWith } from 'src/authorization.decorator';\nimport { ExecutionContext } from 'src/execution-context';\nimport { UserProfileUpdateInput } from './dto/profile-update.input';\nimport { UserProfileEntity } from './entities/profile.entity';\nimport { UserProfileService } from './profile.service';\n\n/**\n * User prifle entity resolver.\n */\n@Resolver(() => UserProfileEntity)\nexport class UserProfileResolver {\n  /**\n   * Create user prifle entity resolver\n   * @param profileService User profile service.\n   * @param prismaClient Prisma client.\n   */\n  constructor(\n    private readonly profileService: UserProfileService,\n    private readonly prismaClient: PrismaClient,\n  ) {}\n\n  /**\n   * Update viewer profile.\n   * @param context Socfony execution context.\n   * @param data User profile update input.\n   */\n  @Mutation(() => UserProfileEntity, {\n    description: 'Update viewer profile',\n  })\n  @AuthorizationWith()\n  async updateViewerProfile(\n    @Context() context: ExecutionContext,\n    @Args({\n      name: 'data',\n      type: () => UserProfileUpdateInput,\n      description: 'Viewer profile update data.',\n    })\n    data: UserProfileUpdateInput,\n  ) {\n    const profile = await this.profileService.resolveProfile(context.user);\n    return await this.prismaClient.userProfile.update({\n      where: { userId: profile.userId },\n      data,\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserProfileService.html":{"url":"injectables/UserProfileService.html","title":"injectable - UserProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/profile/profile.service.ts\n        \n\n            \n                Description\n            \n            \n                User profile service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolveProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/user/profile/profile.service.ts:8\n                            \n                        \n\n                \n                    \n                            Create the user profile service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resolveProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resolveProfile(user: User | Prisma.UserGetPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/profile/profile.service.ts:19\n                \n            \n\n\n            \n                \n                    Resolve user profile.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User | Prisma.UserGetPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        need resolve profile user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma, PrismaClient, User, UserProfile } from '@prisma/client';\n\n/**\n * User profile service.\n */\n@Injectable()\nexport class UserProfileService {\n  /**\n   * Create the user profile service.\n   * @param prisma Prisma client.\n   */\n  constructor(private readonly prisma: PrismaClient) {}\n\n  /**\n   * Resolve user profile.\n   * @param user need resolve profile user.\n   */\n  async resolveProfile(\n    user:\n      | User\n      | Prisma.UserGetPayload,\n  ): Promise {\n    let { profile } = user as Prisma.UserGetPayload;\n    if (profile) {\n      return profile;\n    }\n    profile = await this.prisma.userProfile.findUnique({\n      where: { userId: user.id },\n      rejectOnNotFound: false,\n    });\n    if (profile) {\n      return profile;\n    }\n\n    return await this.prisma.userProfile.create({\n      data: { userId: user.id },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileUpdateInput.html":{"url":"classes/UserProfileUpdateInput.html","title":"class - UserProfileUpdateInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileUpdateInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/profile/dto/profile-update.input.ts\n        \n\n            \n                Description\n            \n            \n                User profile update input\n\n            \n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Prisma } from '@prisma/client';\nimport { UserProfileEntity } from '../entities/profile.entity';\n\n/**\n * User profile update input\n */\n@InputType({\n  description: 'User profile update input',\n})\nexport class UserProfileUpdateInput\n  extends OmitType(\n    PartialType(UserProfileEntity),\n    ['updatedAt', 'userId'] as const,\n    InputType,\n  )\n  implements Omit {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.resolver.ts\n        \n\n            \n                Description\n            \n            \n                User entity resolver\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaClient: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.resolver.ts:12\n                            \n                        \n\n                \n                    \n                            Create user entity resolver.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        prismaClient\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            user\n                        \n                        \n                    \n                \n            \n            \n                \nuser(where: UserWhereUniqueInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {description: 'query where.'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.resolver.ts:26\n                \n            \n\n\n            \n                \n                    Query a user where unique\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                                UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Query a user where unique\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Query, Resolver } from '@nestjs/graphql';\nimport { PrismaClient } from '@prisma/client';\nimport { USER_NOT_FOUND } from 'src/constants';\nimport { UserWhereUniqueInput } from './dto';\nimport { UserEntity } from './entities/user.entity';\nimport { UserUnion } from './entities/user.union';\n\n/**\n * User entity resolver\n */\n@Resolver(() => UserEntity)\nexport class UserResolver {\n  /**\n   * Create user entity resolver.\n   * @param prismaClient Prisma client.\n   */\n  constructor(private readonly prismaClient: PrismaClient) {}\n\n  /**\n   * Query a user where unique\n   * @param where Query a user where unique\n   */\n  @Query(() => UserUnion, {\n    description: 'query where.',\n  })\n  user(\n    @Args({\n      name: 'where',\n      type: () => UserWhereUniqueInput,\n      description: 'query where',\n    })\n    where: UserWhereUniqueInput,\n  ) {\n    return this.prismaClient.user.findUnique({\n      where,\n      rejectOnNotFound: () => new Error(USER_NOT_FOUND),\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n            \n                Description\n            \n            \n                User service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                compareSecurity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(securitySmsService: SecuritySmsService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            Create user service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        securitySmsService\n                                                  \n                                                        \n                                                                        SecuritySmsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Security SMS service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comparePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(user: User, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:23\n                \n            \n\n\n            \n                \n                    Compore user password.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Need compare password user.\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        input password.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            compareSecurity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    compareSecurity(user: User, type: UserSecurityCompareType, security: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:34\n                \n            \n\n\n            \n                \n                    Compare secuity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Need compare user.\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                UserSecurityCompareType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        compare type.\n\n                                    \n                                \n                                \n                                    security\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Security object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { User } from '@prisma/client';\nimport { PasswordHelper } from 'src/helper';\nimport { SecuritySmsService } from 'src/security/security-sms.service';\nimport { UserSecurityCompareType } from './enums';\n\n/**\n * User service.\n */\n@Injectable()\nexport class UserService {\n  /**\n   * Create user service.\n   * @param securitySmsService Security SMS service.\n   */\n  constructor(private readonly securitySmsService: SecuritySmsService) {}\n\n  /**\n   * Compore user password.\n   * @param user Need compare password user.\n   * @param password input password.\n   */\n  async comparePassword(user: User, password: string): Promise {\n    if (!user?.password) return false;\n    return await PasswordHelper.compare(password, user.password);\n  }\n\n  /**\n   * Compare secuity.\n   * @param user Need compare user.\n   * @param type compare type.\n   * @param security Security object.\n   */\n  async compareSecurity(\n    user: User,\n    type: UserSecurityCompareType,\n    security: string,\n  ): Promise {\n    switch (type) {\n      case UserSecurityCompareType.PASSWORD:\n        return await this.comparePassword(user, security);\n      case UserSecurityCompareType.SMS_CODE:\n        const value = await this.securitySmsService.compareCode(\n          user.phone,\n          security,\n        );\n        if (value) {\n          return () => this.securitySmsService.updateCodeToUsed(value);\n        }\n        return false;\n      default:\n        return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserUpdateInput.html":{"url":"classes/UserUpdateInput.html","title":"class - UserUpdateInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserUpdateInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user-update.input.ts\n        \n\n            \n                Description\n            \n            \n                User update input.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Pick\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User new password', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-update.input.ts:25\n                            \n                        \n\n                \n                    \n                        User new password.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, PartialType, PickType } from '@nestjs/graphql';\nimport { Prisma } from '@prisma/client';\nimport { ViewerEntity } from '../entities/viewer.entity';\n\n/**\n * User update input.\n */\n@InputType({\n  description: 'User update input',\n})\nexport class UserUpdateInput\n  extends PartialType(\n    PickType(ViewerEntity, ['email', 'login', 'phone']),\n    InputType,\n  )\n  implements\n    Pick {\n  /**\n   * User new password.\n   */\n  @Field(() => String, {\n    description: 'User new password',\n    nullable: true,\n  })\n  password?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWhereUniqueInput.html":{"url":"classes/UserWhereUniqueInput.html","title":"class - UserWhereUniqueInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWhereUniqueInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user-where-unique.input.ts\n        \n\n            \n                Description\n            \n            \n                User where inique input\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, InputType, PartialType, PickType } from '@nestjs/graphql';\nimport { Prisma } from '@prisma/client';\nimport { ViewerEntity } from '../entities/viewer.entity';\n\n/**\n * User where inique input\n */\n@InputType({\n  description: 'User where inique input',\n})\nexport class UserWhereUniqueInput\n  extends PickType(\n    PartialType(ViewerEntity),\n    ['id', 'login', 'email', 'phone'] as const,\n    InputType,\n  )\n  implements Prisma.UserWhereUniqueInput {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ViewerEntity.html":{"url":"classes/ViewerEntity.html","title":"class - ViewerEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ViewerEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/viewer.entity.ts\n        \n\n            \n                Description\n            \n            \n                Viewer entity.\n\n            \n\n            \n                Extends\n            \n            \n                        UserInterface\n            \n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                phone\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                login\n                            \n                            \n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true, description: 'User bound E-Mail address.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/viewer.entity.ts:22\n                            \n                        \n\n                \n                    \n                        User bound E-Mail address.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true, description: 'User bound Phone full number.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/viewer.entity.ts:31\n                            \n                        \n\n                \n                    \n                        User bound Phone full number.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User registered date at.'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:44\n\n                            \n                        \n\n                \n                    \n                        User registered date at.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'User ID'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:27\n\n                            \n                        \n\n                \n                    \n                        User ID\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true, description: 'User login name'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:36\n\n                            \n                        \n\n                \n                    \n                        User login name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     UserProfile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: 'The user profile'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         UserInterface\n\n                                \n                            \n                        \n                            \n                                    Defined in         UserInterface:52\n\n                            \n                        \n\n                \n                    \n                        User profile.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { User } from '@prisma/client';\nimport { UserInterface } from './user.interface';\n\n/**\n * Viewer entity.\n */\n@ObjectType({\n  implements: [UserInterface],\n  description: 'Viewer entity.',\n})\nexport class ViewerEntity\n  extends UserInterface\n  implements Omit {\n  /**\n   * User bound E-Mail address.\n   */\n  @Field((type) => String, {\n    nullable: true,\n    description: 'User bound E-Mail address.',\n  })\n  email: string;\n\n  /**\n   * User bound Phone full number.\n   */\n  @Field((type) => String, {\n    nullable: true,\n    description: 'User bound Phone full number.',\n  })\n  phone: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ViewerResolver.html":{"url":"classes/ViewerResolver.html","title":"class - ViewerResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ViewerResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/viewer.resolver.ts\n        \n\n            \n                Description\n            \n            \n                Viewer entity resolver.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                phone\n                            \n                            \n                                    Async\n                                updateViewer\n                            \n                            \n                                viewer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, prismaClient: PrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/user/viewer.resolver.ts:38\n                            \n                        \n\n                \n                    \n                            Create viewer entity resolver.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User service.\n\n                                                        \n                                                \n                                                \n                                                        prismaClient\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Prisma client.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            email\n                        \n                        \n                    \n                \n            \n            \n                \nemail(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/viewer.resolver.ts:68\n                \n            \n\n\n            \n                \n                    Resolve viewer email field.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parent context user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            phone\n                        \n                        \n                    \n                \n            \n            \n                \nphone(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/viewer.resolver.ts:54\n                \n            \n\n\n            \n                \n                    Resolver viewer phone field.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parent context user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateViewer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateViewer(context: ExecutionContext, args: UpdateViewerArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'Update viewer'})@AuthorizationWith()\n                \n            \n\n            \n                \n                    Defined in src/user/viewer.resolver.ts:98\n                \n            \n\n\n            \n                \n                    Update viewer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Scofony exection context\n\n                                    \n                                \n                                \n                                    args\n                                    \n                                                UpdateViewerArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Update viewer args.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            viewer\n                        \n                        \n                    \n                \n            \n            \n                \nviewer(context: ExecutionContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {description: 'Query the HTTP endpoint Authorization user.'})@AuthorizationWith()\n                \n            \n\n            \n                \n                    Defined in src/user/viewer.resolver.ts:85\n                \n            \n\n\n            \n                \n                    Query the HTTP endpoint Authorization user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Socfony execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Args,\n  Mutation,\n  Parent,\n  Query,\n  ResolveField,\n  Resolver,\n} from '@nestjs/graphql';\nimport { PrismaClient, User } from '@prisma/client';\nimport { AuthorizationWith } from 'src/authorization.decorator';\nimport {\n  SECURITY_COMPARE_FAILED,\n  USER_EMAIL_FIELD_EXISTED,\n  USER_LOGIN_FIELD_EXISTED,\n  USER_PHONE_FIELD_EXISTED,\n} from 'src/constants';\nimport { Context } from 'src/context.decorator';\nimport { ExecutionContext } from 'src/execution-context';\nimport { PasswordHelper } from 'src/helper';\nimport { UpdateViewerArgs } from './dto/update-viewer.args';\nimport { ViewerEntity } from './entities/viewer.entity';\nimport { UserSecurityCompareType } from './enums';\nimport { UserService } from './user.service';\n\n/**\n * User error codes.\n */\nconst constants = {\n  USER_LOGIN_FIELD_EXISTED,\n  USER_PHONE_FIELD_EXISTED,\n  USER_EMAIL_FIELD_EXISTED,\n};\n\n/**\n * Viewer entity resolver.\n */\n@Resolver(() => ViewerEntity)\nexport class ViewerResolver {\n  /**\n   * Create viewer entity resolver.\n   * @param userService User service.\n   * @param prismaClient Prisma client.\n   */\n  constructor(\n    private readonly userService: UserService,\n    private readonly prismaClient: PrismaClient,\n  ) {}\n\n  /**\n   * Resolver viewer phone field.\n   * @param user Parent context user.\n   */\n  @ResolveField(() => String)\n  phone(@Parent() user: User) {\n    const { phone } = user;\n    if (phone) {\n      return phone.replace(/(.*)\\d{4}(\\d{4})/, '$1****$2');\n    }\n\n    return phone;\n  }\n\n  /**\n   * Resolve viewer email field.\n   * @param user Parent context user.\n   */\n  @ResolveField(() => String)\n  email(@Parent() user: User) {\n    const { email } = user;\n    if (email) {\n      return email.replace(/^(\\w{1}).*?(\\w{1}?)\\@(.*)$/, '$1***$2@$3');\n    }\n\n    return email;\n  }\n\n  /**\n   * Query the HTTP endpoint Authorization user.\n   * @param context Socfony execution context.\n   */\n  @Query(() => ViewerEntity, {\n    description: 'Query the HTTP endpoint Authorization user.',\n  })\n  @AuthorizationWith()\n  viewer(@Context() context: ExecutionContext) {\n    return context.user;\n  }\n\n  /**\n   * Update viewer.\n   * @param context Scofony exection context\n   * @param args Update viewer args.\n   */\n  @Mutation(() => ViewerEntity, {\n    description: 'Update viewer',\n  })\n  @AuthorizationWith()\n  async updateViewer(\n    @Context() context: ExecutionContext,\n    @Args({\n      type: () => UpdateViewerArgs,\n      description: 'Update viewer args.',\n    })\n    args: UpdateViewerArgs,\n  ) {\n    const { data, security, type, newPhoneSecurity } = args;\n    const { user } = context;\n    for await (const key of Object.keys(data)) {\n      // Convert to password hash\n      if (key === 'password') {\n        data[key] = await PasswordHelper.hash(data[key]);\n        continue;\n      }\n\n      // Check whether the unique field is used by other users\n      const other = await this.prismaClient.user.findUnique({\n        where: { [key]: data[key] },\n        rejectOnNotFound: false,\n      });\n      if (other && other.id !== user.id) {\n        throw new Error(constants[`USER_${key.toUpperCase()}_FIELD_EXISTED`]);\n      }\n\n      // Check whether the new mobile phone number verification code matches\n      if (key === 'phone' && data[key] !== user.phone) {\n        const compared = await this.userService.compareSecurity(\n          Object.assign({}, user, { phone: data[key] }),\n          UserSecurityCompareType.SMS_CODE,\n          newPhoneSecurity,\n        );\n        if (compared) {\n          if (compared instanceof Function) {\n            compared();\n          }\n          continue;\n        }\n\n        throw new Error(SECURITY_COMPARE_FAILED);\n      }\n    }\n    const compared = await this.userService.compareSecurity(\n      user,\n      type,\n      security,\n    );\n    if (compared) {\n      if (compared instanceof Function) {\n        compared();\n      }\n      return (context.user = await this.prismaClient.user.update({\n        where: { id: user.id },\n        data,\n      }));\n    }\n\n    throw new Error(SECURITY_COMPARE_FAILED);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.config.ts\n            \n            interface\n            SocfonyConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app.config.ts\n            \n            function\n            getConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.config.ts\n            \n            function\n            loadConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/authorization-token.resolver.ts\n            \n            class\n            AuthorizationTokenEntityResolver\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/authorization-token/authorization-token.service.ts\n            \n            injectable\n            AuthorizationTokenService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_METADATA_HAS_AUTHORIZATION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_METADATA_HAS_AUTHORIZATION_TYPE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_TOKEN_DEFAULT_EXPIRED_IN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_TOKEN_DEFAULT_EXPIRED_UNIT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_IN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_UNIT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/constants.ts\n            \n            variable\n            AUTH_TOKEN_VVALIDITY_PERIOD_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization-token/dto/create-authorization-token.args.ts\n            \n            class\n            CreateAuthorizationTokenArgs\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/authorization-token/entities/authorization-token.entity.ts\n            \n            class\n            AuthorizationTokenEntity\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/authorization-token/types.ts\n            \n            interface\n            AuthorizationTokenValidityPeriod\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/authorization.decorator.ts\n            \n            interface\n            AuthDecoratorOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/authorization.decorator.ts\n            \n            function\n            Authorization\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization.decorator.ts\n            \n            variable\n            AuthorizationWith\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization.decorator.ts\n            \n            variable\n            AuthorizationWithout\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authorization.guard.ts\n            \n            guard\n            AuthorizationGuard\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            AUTHORIZATION_TOKEN_CREATE_USER_WHERE_ALLOW_ONE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            AUTHORIZATION_TOKEN_NOT_FOUND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            SECURITY_COMPARE_FAILED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            UNAUTHORIZED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            USER_EMAIL_FIELD_EXISTED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            USER_LOGIN_FIELD_EXISTED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            USER_NOT_FOUND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            USER_NOT_SET_PHONE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            USER_PHONE_FIELD_EXISTED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/context.decorator.ts\n            \n            variable\n            Context\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/execution-context.ts\n            \n            class\n            ExecutionContext\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/helper/id.helper.ts\n            \n            variable\n            alphabet\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper/id.helper.ts\n            \n            variable\n            custom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper/id.helper.ts\n            \n            variable\n            id\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper/id.helper.ts\n            \n            variable\n            numeral\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper/id.helper.ts\n            \n            variable\n            readability\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper/password.helper.ts\n            \n            function\n            compare\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper/password.helper.ts\n            \n            function\n            hash\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/prisma/middleware/logger.middleware.ts\n            \n            function\n            PrismaLoggerMiddleware\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.module.ts\n            \n            variable\n            client\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/security/security-sms.resolver.ts\n            \n            class\n            SecuritySmsResolver\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/security/security-sms.service.ts\n            \n            injectable\n            SecuritySmsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tencent-cloud/common/index.ts\n            \n            function\n            getCredential\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tencent-cloud/cos/cos.resolver.ts\n            \n            class\n            TencentCloudCosResolver\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/tencent-cloud/cos/entities/cos.entity.ts\n            \n            class\n            TencentCloudCosCredentials\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/tencent-cloud/cos/soc.service.ts\n            \n            injectable\n            TencentCloudCosService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/tencent-cloud/sms/sms.service.ts\n            \n            injectable\n            TencentCloudSmsService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/tencent-cloud/sts/entities/sts.entity.ts\n            \n            class\n            TencentCloudStsCredentials\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/tencent-cloud/sts/entities/sts.entity.ts\n            \n            class\n            TencentCloudStsFederationToken\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/tencent-cloud/sts/sts.service.ts\n            \n            injectable\n            TencentCloudStsService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/dto/update-viewer.args.ts\n            \n            class\n            UpdateViewerArgs\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/dto/user-update.input.ts\n            \n            class\n            UserUpdateInput\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/dto/user-where-unique.input.ts\n            \n            class\n            UserWhereUniqueInput\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/user/entities/user.interface.ts\n            \n            class\n            UserInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/user/entities/user.union.ts\n            \n            function\n            resolveType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.union.ts\n            \n            variable\n            UserUnion\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/entities/viewer.entity.ts\n            \n            class\n            ViewerEntity\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/user/profile/dto/profile-update.input.ts\n            \n            class\n            UserProfileUpdateInput\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/profile/entities/profile.entity.ts\n            \n            class\n            UserProfileEntity\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/user/profile/profile.resolver.ts\n            \n            class\n            UserProfileResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/profile/profile.service.ts\n            \n            injectable\n            UserProfileService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/user-interface.resolver.ts\n            \n            class\n            UserInterfaceResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/user/viewer.resolver.ts\n            \n            class\n            ViewerResolver\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/user/viewer.resolver.ts\n            \n            variable\n            constants\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.6.5\n        \n            @nestjs/core : ^7.6.5\n        \n            @nestjs/graphql : ^7.9.8\n        \n            @nestjs/platform-express : ^7.6.5\n        \n            @prisma/client : ^2.17.0\n        \n            apollo-server-express : ^2.19.2\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.2\n        \n            class-validator : ^0.13.1\n        \n            dayjs : ^1.10.4\n        \n            dotenv : ^8.2.0\n        \n            express : ^4.17.1\n        \n            graphql : ^15.4.0\n        \n            nanoid : ^3.1.20\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^6.6.3\n        \n            tencentcloud-sdk-nodejs : ^4.0.55\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AllowUploadFileType   (src/.../cos.resolver.ts)\n                        \n                        \n                            HasTokenExpiredType   (src/.../enums.ts)\n                        \n                        \n                            UserSecurityCompareType   (src/.../enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tencent-cloud/cos/cos.resolver.ts\n    \n        \n            \n                \n                    \n                        \n                        AllowUploadFileType\n                    \n                \n                    \n                        \n                            Allow upload File MIME-type.\n\n                        \n                    \n                        \n                            \n                                 JPG\n                            \n                        \n                        \n                            \n                                Value : .jpg\n                            \n                        \n                        \n                            \n                                 PNG\n                            \n                        \n                        \n                            \n                                Value : .png\n                            \n                        \n                        \n                            \n                                 GIF\n                            \n                        \n                        \n                            \n                                Value : .gif\n                            \n                        \n                        \n                            \n                                 MP4\n                            \n                        \n                        \n                            \n                                Value : .mp4\n                            \n                        \n                        \n                            \n                                 OGG\n                            \n                        \n                        \n                            \n                                Value : .ogg\n                            \n                        \n                        \n                            \n                                 MP3\n                            \n                        \n                        \n                            \n                                Value : .mp3\n                            \n                        \n                        \n                            \n                                 WAV\n                            \n                        \n                        \n                            \n                                Value : .wav\n                            \n                        \n            \n        \n\n    src/authorization-token/enums.ts\n    \n        \n            \n                \n                    \n                        \n                        HasTokenExpiredType\n                    \n                \n                    \n                        \n                            AuthorizationToken has expired type.\n\n                        \n                    \n                        \n                            \n                                 AUTH\n                            \n                        \n                        \n                            \n                                 REFRESH\n                            \n                        \n            \n        \n\n    src/user/enums.ts\n    \n        \n            \n                \n                    \n                        \n                        UserSecurityCompareType\n                    \n                \n                    \n                        \n                            User security compare type.\n\n                        \n                    \n                        \n                            \n                                 PASSWORD\n                            \n                        \n                        \n                            \n                                 SMS_CODE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Authorization   (src/.../authorization.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            compare   (src/.../password.helper.ts)\n                        \n                        \n                            getConfig   (src/.../app.config.ts)\n                        \n                        \n                            getCredential   (src/.../index.ts)\n                        \n                        \n                            hash   (src/.../password.helper.ts)\n                        \n                        \n                            loadConfig   (src/.../app.config.ts)\n                        \n                        \n                            PrismaLoggerMiddleware   (src/.../logger.middleware.ts)\n                        \n                        \n                            resolveType   (src/.../user.union.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/authorization.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Authorization\n                        \n                        \n                    \n                \n            \n            \n                \nAuthorization(options?)\n                \n            \n\n\n\n\n            \n                \n                    Need validate HTTP endpoint Authorization token decorator.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Create SOcfony bootstrap.\n\n\n                \n            \n        \n    \n    src/helper/password.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            compare\n                        \n                        \n                    \n                \n            \n            \n                \ncompare(password, encrypted)\n                \n            \n\n\n\n\n            \n                \n                    Compare password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        password text.\n\n                                    \n                                \n                                \n                                    encrypted\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        encrpyted password text.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hash\n                        \n                        \n                    \n                \n            \n            \n                \nhash(password)\n                \n            \n\n\n\n\n            \n                \n                    Create a password encrpyted hash text.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        password text.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getConfig\n                        \n                        \n                    \n                \n            \n            \n                \ngetConfig()\n                \n            \n\n\n\n\n            \n                \n                    Get app config.\n\n\n                    \n                    \n                    \n                        Returns :         SocfonyConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadConfig\n                        \n                        \n                    \n                \n            \n            \n                \nloadConfig(path?)\n                \n            \n\n\n\n\n            \n                \n                    Load Socfony ENV config file.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        ENV file path.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/tencent-cloud/common/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getCredential\n                        \n                        \n                    \n                \n            \n            \n                \ngetCredential()\n                \n            \n\n\n\n\n            \n                \n                    Get Tencent Cloud common credential.\n\n\n                    \n                        Returns :     Credential\n\n                    \n                \n            \n        \n    \n    src/prisma/middleware/logger.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            PrismaLoggerMiddleware\n                        \n                        \n                    \n                \n            \n            \n                \nPrismaLoggerMiddleware(logger)\n                \n            \n\n\n\n\n            \n                \n                    Create Prisma logger middleware helper.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    logger\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Logger\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Prisma.Middleware\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/user/entities/user.union.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            resolveType\n                        \n                        \n                    \n                \n            \n            \n                \nresolveType(value, context)\n                \n            \n\n\n\n\n            \n                \n                    resolve UserUnion real type\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User object.\n\n                                    \n                                \n                                \n                                    context\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Application context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSocfony\nSocfony is a full-stack open source software that builds full-platform application with social networking as the core. Socfony plugin mechanism allows more developers or teams to write more functions for it, can help you solve the complexity of developing full-platform software.\n\n\n\n\nEcosystem\n\n\n\nProject\nStatus\nDescription\n\n\n\n\nSocfony App\n\nSocfony App with Flutter\n\n\n\nDocumentation\nNo document has been written yet.\nLicense\nSocfony is BSD-3-Clause licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nBSD 3-Clause License\nCopyright (c) 2021, Byte Gem\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\nNeither the name of the copyright holder nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthorizationTokenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SecurityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TencentCloudModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthorizationTokenModule\n\n\n\ncluster_AuthorizationTokenModule_exports\n\n\n\ncluster_AuthorizationTokenModule_providers\n\n\n\ncluster_SecurityModule\n\n\n\ncluster_SecurityModule_exports\n\n\n\ncluster_SecurityModule_providers\n\n\n\ncluster_TencentCloudModule\n\n\n\ncluster_TencentCloudModule_exports\n\n\n\ncluster_TencentCloudModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserProfileModule\n\n\n\ncluster_UserProfileModule_exports\n\n\n\ncluster_UserProfileModule_providers\n\n\n\n\nAuthorizationTokenModule\n\nAuthorizationTokenModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthorizationTokenModule->AppModule\n\n\n\n\n\nAuthorizationTokenService \n\nAuthorizationTokenService \n\nAuthorizationTokenService  -->\n\nAuthorizationTokenModule->AuthorizationTokenService \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthorizationTokenModule -->\n\nPrismaModule->AuthorizationTokenModule\n\n\n\n\n\nSecurityModule\n\nSecurityModule\n\nSecurityModule -->\n\nPrismaModule->SecurityModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUserProfileModule\n\nUserProfileModule\n\nUserProfileModule -->\n\nPrismaModule->UserProfileModule\n\n\n\nUserModule -->\n\nSecurityModule->UserModule\n\n\n\nAppModule -->\n\nSecurityModule->AppModule\n\n\n\n\n\nSecuritySmsService \n\nSecuritySmsService \n\nSecuritySmsService  -->\n\nSecurityModule->SecuritySmsService \n\n\n\n\n\nTencentCloudModule\n\nTencentCloudModule\n\nSecurityModule -->\n\nTencentCloudModule->SecurityModule\n\n\n\nAppModule -->\n\nTencentCloudModule->AppModule\n\n\n\n\n\nTencentCloudCosService \n\nTencentCloudCosService \n\nTencentCloudCosService  -->\n\nTencentCloudModule->TencentCloudCosService \n\n\n\n\n\nTencentCloudSmsService \n\nTencentCloudSmsService \n\nTencentCloudSmsService  -->\n\nTencentCloudModule->TencentCloudSmsService \n\n\n\n\n\nTencentCloudStsService \n\nTencentCloudStsService \n\nTencentCloudStsService  -->\n\nTencentCloudModule->TencentCloudStsService \n\n\n\nAuthorizationTokenModule -->\n\nUserModule->AuthorizationTokenModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthorizationTokenService\n\nAuthorizationTokenService\n\nAuthorizationTokenModule -->\n\nAuthorizationTokenService->AuthorizationTokenModule\n\n\n\n\n\nSecuritySmsService\n\nSecuritySmsService\n\nSecurityModule -->\n\nSecuritySmsService->SecurityModule\n\n\n\n\n\nTencentCloudCosService\n\nTencentCloudCosService\n\nTencentCloudModule -->\n\nTencentCloudCosService->TencentCloudModule\n\n\n\n\n\nTencentCloudSmsService\n\nTencentCloudSmsService\n\nTencentCloudModule -->\n\nTencentCloudSmsService->TencentCloudModule\n\n\n\n\n\nTencentCloudStsService\n\nTencentCloudStsService\n\nTencentCloudModule -->\n\nTencentCloudStsService->TencentCloudModule\n\n\n\nUserModule -->\n\nUserProfileModule->UserModule\n\n\n\n\n\nUserProfileService \n\nUserProfileService \n\nUserProfileService  -->\n\nUserProfileModule->UserProfileService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserProfileService\n\nUserProfileService\n\nUserProfileModule -->\n\nUserProfileService->UserProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            alphabet   (src/.../id.helper.ts)\n                        \n                        \n                            AUTH_METADATA_HAS_AUTHORIZATION   (src/.../constants.ts)\n                        \n                        \n                            AUTH_METADATA_HAS_AUTHORIZATION_TYPE   (src/.../constants.ts)\n                        \n                        \n                            AUTH_TOKEN_DEFAULT_EXPIRED_IN   (src/.../constants.ts)\n                        \n                        \n                            AUTH_TOKEN_DEFAULT_EXPIRED_UNIT   (src/.../constants.ts)\n                        \n                        \n                            AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_IN   (src/.../constants.ts)\n                        \n                        \n                            AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_UNIT   (src/.../constants.ts)\n                        \n                        \n                            AUTH_TOKEN_VVALIDITY_PERIOD_KEY   (src/.../constants.ts)\n                        \n                        \n                            AUTHORIZATION_TOKEN_CREATE_USER_WHERE_ALLOW_ONE   (src/.../constants.ts)\n                        \n                        \n                            AUTHORIZATION_TOKEN_NOT_FOUND   (src/.../constants.ts)\n                        \n                        \n                            AuthorizationWith   (src/.../authorization.decorator.ts)\n                        \n                        \n                            AuthorizationWithout   (src/.../authorization.decorator.ts)\n                        \n                        \n                            client   (src/.../prisma.module.ts)\n                        \n                        \n                            constants   (src/.../viewer.resolver.ts)\n                        \n                        \n                            Context   (src/.../context.decorator.ts)\n                        \n                        \n                            custom   (src/.../id.helper.ts)\n                        \n                        \n                            id   (src/.../id.helper.ts)\n                        \n                        \n                            numeral   (src/.../id.helper.ts)\n                        \n                        \n                            readability   (src/.../id.helper.ts)\n                        \n                        \n                            SECURITY_COMPARE_FAILED   (src/.../constants.ts)\n                        \n                        \n                            UNAUTHORIZED   (src/.../constants.ts)\n                        \n                        \n                            USER_EMAIL_FIELD_EXISTED   (src/.../constants.ts)\n                        \n                        \n                            USER_LOGIN_FIELD_EXISTED   (src/.../constants.ts)\n                        \n                        \n                            USER_NOT_FOUND   (src/.../constants.ts)\n                        \n                        \n                            USER_NOT_SET_PHONE   (src/.../constants.ts)\n                        \n                        \n                            USER_PHONE_FIELD_EXISTED   (src/.../constants.ts)\n                        \n                        \n                               (src/.../main.ts)\n                        \n                        \n                            UserUnion   (src/.../user.union.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helper/id.helper.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            alphabet\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (size: number): string =>\n    customAlphabet('qwertyuiopasdfghjklzxcvbnm', size)()\n                        \n                    \n\n                \n                    \n                        Generate alphabet(a-z) ID.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            custom\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (alphabet: string, size: number) =>\n    customAlphabet(alphabet, size)()\n                        \n                    \n\n                \n                    \n                        Generate a custom alphabet ID.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (size: number): string => nanoid(size)\n                        \n                    \n\n                \n                    \n                        Generate secure URL-friendly unique ID\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numeral\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (size: number): string =>\n    customAlphabet('0123456789', size)()\n                        \n                    \n\n                \n                    \n                        Generate numeral ID.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            readability\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (size: number): string =>\n    customAlphabet('23456789qwertyupasdfghjklzxcvbnm', size)()\n                        \n                    \n\n                \n                    \n                        Generate readability(23456789qwertyupasdfghjklzxcvbnm) ID.\n\n                    \n                \n\n            \n        \n\n    src/authorization-token/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_METADATA_HAS_AUTHORIZATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'metadata has authorization'\n                        \n                    \n\n                \n                    \n                        metadata has authorization\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_METADATA_HAS_AUTHORIZATION_TYPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'metadata has authorization type'\n                        \n                    \n\n                \n                    \n                        metadata has authorization type\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_TOKEN_DEFAULT_EXPIRED_IN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n\n                \n                    \n                        token default expired in.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_TOKEN_DEFAULT_EXPIRED_UNIT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'days'\n                        \n                    \n\n                \n                    \n                        token default expired in unit type.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_IN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n\n                \n                    \n                        token default refresh expired in.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_TOKEN_DEFAULT_REFRESH_EXPIRED_UNIT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'months'\n                        \n                    \n\n                \n                    \n                        token default refresh expired in unit type.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTH_TOKEN_VVALIDITY_PERIOD_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'auth token validity period key'\n                        \n                    \n\n                \n                    \n                        auth token validity period key\n\n                    \n                \n\n            \n        \n\n    src/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AUTHORIZATION_TOKEN_CREATE_USER_WHERE_ALLOW_ONE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'AUTHORIZATION_TOKEN_CREATE_USER_WHERE_ALLOW_ONE'\n                        \n                    \n\n                \n                    \n                        Authorization Token create user where allow one\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AUTHORIZATION_TOKEN_NOT_FOUND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'AUTHORIZATION_TOKEN_NOT_FOUND'\n                        \n                    \n\n                \n                    \n                        Authorization Token Not Found\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SECURITY_COMPARE_FAILED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'SECURITY_COMPARE_FAILED'\n                        \n                    \n\n                \n                    \n                        security code validate error\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UNAUTHORIZED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'UNAUTHORIZED'\n                        \n                    \n\n                \n                    \n                        User unauthorized\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_EMAIL_FIELD_EXISTED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'USER_EMAIL_FIELD_EXISTED'\n                        \n                    \n\n                \n                    \n                        user email existed.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_LOGIN_FIELD_EXISTED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'USER_LOGIN_FIELD_EXISTED'\n                        \n                    \n\n                \n                    \n                        User login existed\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_NOT_FOUND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'USER_NOT_FOUND'\n                        \n                    \n\n                \n                    \n                        User not found\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_NOT_SET_PHONE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'USER_NOT_SET_PHONE'\n                        \n                    \n\n                \n                    \n                        User not set phone.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_PHONE_FIELD_EXISTED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'USER_PHONE_FIELD_EXISTED'\n                        \n                    \n\n                \n                    \n                        user phone existed.\n\n                    \n                \n\n            \n        \n\n    src/authorization.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AuthorizationWith\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () =>\n  Authorization({\n    hasAuthorization: true,\n    type: HasTokenExpiredType.AUTH,\n  })\n                        \n                    \n\n                \n                    \n                        Http auth validate token.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AuthorizationWithout\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () =>\n  Authorization({\n    hasAuthorization: false,\n    type: HasTokenExpiredType.AUTH,\n  })\n                        \n                    \n\n                \n                    \n                        Http auth, without validate token.\n\n                    \n                \n\n            \n        \n\n    src/prisma/prisma.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            client\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ClassProvider\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  provide: PrismaClient,\n  useClass: class\n    extends PrismaClient\n    implements OnModuleInit, OnModuleDestroy {\n    private readonly logger = new Logger('Prisma');\n\n    /**\n     * Prisma client constructor\n     */\n    constructor() {\n      super({\n        datasources: {\n          database: { url: process.env.DATABASE_URL },\n        },\n      });\n    }\n\n    /**\n     * NestJS module init hook callback.\n     */\n    async onModuleInit() {\n      // Prisma connect database.\n      await this.$connect();\n\n      // Set Prisma client global logger middleware.\n      this.$use(PrismaLoggerMiddleware(this.logger));\n    }\n\n    /**\n     * NestJS module destory hook callback.\n     */\n    async onModuleDestroy() {\n      // Prisma disconnect database.\n      await this.$disconnect();\n    }\n  },\n}\n                        \n                    \n\n                \n                    \n                        Prisma class provider\n\n                    \n                \n\n            \n        \n\n    src/user/viewer.resolver.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            constants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  USER_LOGIN_FIELD_EXISTED,\n  USER_PHONE_FIELD_EXISTED,\n  USER_EMAIL_FIELD_EXISTED,\n}\n                        \n                    \n\n                \n                    \n                        User error codes.\n\n                    \n                \n\n            \n        \n\n    src/context.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(function (\n  _data: unknown,\n  context: ExecutionContext,\n): IContext {\n  if (context.getType() === 'graphql') {\n    return GqlExecutionContext.create(context).getContext();\n  }\n\n  return context.switchToHttp().getRequest().context;\n})\n                        \n                    \n\n                \n                    \n                        Get Socfony execution context decorator.\n\n                    \n                \n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.argv\n                        \n                    \n\n                \n                    \n                        Get Socfony ENV filename\n\n                    \n                \n\n            \n        \n\n    src/user/entities/user.union.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserUnion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createUnionType({\n  name: 'userUnion',\n  types: () => [UserEntity, ViewerEntity],\n  resolveType,\n  description: 'User union type.',\n})\n                        \n                    \n\n                \n                    \n                        User union type.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
